{"version":3,"sources":["function/service/certificationService.js","img/translate.svg","component/navbar/LanguageMenu.js","component/navbar/ToolMenu.js","img/heartbeat.svg","component/navbar/Status.js","img/home.svg","img/gavel.svg","img/file.svg","img/folder.svg","component/sidebar/Sidebar.js","component/sidebar/SidebarItem.js","component/navbar/MobileMenu.js","img/ITM.svg","img/icp_logo.svg","theme/Theme.js","component/navbar/Navbar.js","component/page/HomePage.js","img/fingerprint.svg","component/common/UploadedInfoAlert.js","constants/ExistenceType.js","util/stringUtil.js","component/page/ProofVerification/UploadSection/UploadSection.js","component/page/ProofVerification/UploadSection/RwdUploadSection.js","img/remove.svg","img/plus.svg","img/modify.svg","component/common/VerifyStatus.js","component/common/VerifyListTableRow/DataRow.js","component/common/VerifyListTableRow/CollapseRow.js","util/sortUtil.js","component/page/ProofVerification/VerifyListModal.js","util/verifyListTableDataUtil.js","component/page/ProofVerification/MoreInfoModal.js","component/page/ProofVerification/VerifyDetailTable.js","constants/VerifyResultDescription.js","constants/LedgerBoosterABI.js","function/service/clearanceRecordService.js","function/util/hashUtil.js","function/util/fileUtil.js","constants/QueryType.js","function/util/queryStringParser.js","constants/VerifyVerificationProofStatus.js","function/util/verifyReportUtil.js","function/util/messageBuilderUtil.js","function/service/verifyClearanceRecordServiceAdapter.js","function/service/verifyClearanceRecordServiceAdapter_2_3_0.js","constants/ProofExistStatus.js","constants/VerifyNotExistProofStatus.js","constants/StatusConstantsString.js","function/util/signatureUtil.js","function/util/ethUtil.js","function/util/sliceValidationUtil.js","function/service/verifyReceiptAndMerkleProofService.js","function/service/verifyProofListService.js","function/util/clearanceRecordVerifyUtil.js","function/service/verifyVerificationProofService.js","constants/VerifyResult.js","function/service/verifyService.js","function/util/InfuraNodeUrlConfig.js","constants/EthereumEnv.js","constants/ExplorerType.js","function/util/blockChainExplorerUrlUtil.js","function/util/verificationUtil.js","function/api/verifyProofApi.js","component/page/ProofVerification/ProofVerificationPage.js","constants/VerificationType.js","component/common/VerifyStepper/VerifyStepper.js","img/fileUpload.svg","component/page/RawDataVerification/UploadSection/UploadBinaryData.js","component/common/UploadVerificationProof.js","component/page/RawDataVerification/UploadSection/VerifyFileNameCheckbox.js","component/common/UploadedInfoSection.js","component/common/VerifyStepper/StepperButton.js","component/page/RawDataVerification/UploadSection/RwdUploadSection.js","function/api/verifyRawDataApi.js","component/page/RawDataVerification/UploadSection/UploadSection.js","component/page/RawDataVerification/VerifyResultTable.js","component/page/RawDataVerification/VerifyDetailTable/DetailTableContent.js","component/page/RawDataVerification/VerifyDetailTable/RwdDetailTableContent.js","component/page/RawDataVerification/VerifyDetailTable/VerifyDetailTable.js","component/page/RawDataVerification/RawDataVerificationPage.js","util/cryptoUtil.js","component/page/FileSetVerification/UploadSection/UploadFolder.js","constants/VerifyFileNameAndHashStatus.js","function/service/verifyContinuousProofService.js","function/api/verifyFileSetApi.js","component/page/FileSetVerification/UploadSection/RwdUploadSection.js","component/page/FileSetVerification/UploadSection/UploadSection.js","component/page/FileSetVerification/FilesVerifyListModal.js","component/page/FileSetVerification/SingleFileMoreInfoModal.js","component/page/FileSetVerification/FilesVerifyDetailTable.js","component/page/FileSetVerification/FileSetVerificationPage.js","component/App.js","reportWebVitals.js","i18n/i18n.js","index.js"],"names":["web3","contract","LanguageMenu","useState","language","setlanguage","selectedIndex","setselectedIndex","languageOpen","Boolean","cookies","Cookies","defaultCookieLanguage","get","currentLanguage","setcurrentLanguage","i18n","useTranslation","Button","sx","p","minWidth","onClick","event","currentTarget","color","src","TranslateIcon","alt","height","width","Hidden","smDown","Box","ml","Menu","id","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","onClose","map","option","index","MenuItem","selected","getAttribute","changeLanguage","set","path","handleLanguage","ToolMenu","t","setAnchorEl","accountOpen","handleClose","style","fill","display","xs","sm","preventDefault","window","marginRight","Typography","variant","Status","statusAnchorEl","setstatusAnchorEl","statusOpen","status","m","mb","Grid","container","spacing","item","process","moment","format","IconButton","size","Avatar","backgroundColor","StatusIcon","Popover","CustomDrawer","styled","Drawer","flexShrink","links","icon","HomeIcon","text","to","ProofIcon","RawDataIcon","FolderIcon","Sidebar","md","Toolbar","overflow","List","CustomListItemButton","ListItemButton","theme","palette","action","hover","SidebarItem","pathname","useLocation","selectedPath","setSelectedPath","useEffect","forEach","link","textDecoration","ListItem","disablePadding","ListItemIcon","ListItemText","MobileMenu","setOpen","handleDrawerOpen","prev","handleDrawerClose","SwipeableDrawer","onOpen","Divider","onKeyDown","CLIENT_TYPE","REACT_APP_CLIENT_TYPE","isIcpStyle","toLocaleLowerCase","createTheme","adaptV4Theme","overrides","MuiDrawer","paperAnchorBottom","primary","light","main","dark","secondary","error","warning","info","success","hint","background","uploader","fingerPrint","typography","fontFamily","mixins","toolbar","minHeight","Navbar","matches","useMediaQuery","breakpoints","up","AppBar","position","zIndex","drawer","mdUp","textTransform","alignItems","ICPIcon","borderRadius","ITMIcon","mx","mdDown","grey","linkStyle","HomePage","down","mt","lg","Card","mr","fontSize","UploadedInfoAlert","fileList","uploadedFiles","rootFolderName","isXsScreen","Alert","severity","wordBreak","my","length","files","file","fileName","name","renderFileInfo","ExistenceType","renderCertificatedName","certification","certificatedChineseName","certificatedEnglishName","getTxHashBaseUrl","evmEnv","txHashBaseUrl","renderTime","value","getContractAddressUrl","contractAddress","url","renderCmd","cmd","slice","split","join","getSn","indexValue","Number","lastIndexOf","renderAttesterAddress","data","attesterAddress","JSON","parse","callerAddress","isEmptyString","toHumanReadableFileSize","i","Math","floor","log","pow","toFixed","UploadSection","detailData","handleVerify","enqueueSnackbar","useSnackbar","cursor","setCursor","cursorStyle","onDrop","useCallback","acceptedFiles","maxSize","useDropzone","onDropRejected","i18next","getRootProps","getInputProps","onMouseOver","onMouseLeave","multiple","textAlign","flexDirection","justifyContent","py","FingerPrint","fontWeight","component","RwdUploadSection","proofFile","setProofFile","isVerify","setIsVerify","startIcon","disabled","type","onChange","uploadProof","target","console","VerifyStatus","iconOnly","Tooltip","title","placement","RemoveIcon","AddIcon","Modify","CustomCell","TableCell","DataRow","renderMoreInfo","renderClearanceOrder","renderShortIndexValue","TableRow","align","only","existenceType","receiptTimestamp","smUp","lgDown","substr","proofExistStatus","uuidv4","CollapseRow","dataArr","hideBottomBorder","expand","setExpand","isMdDown","colSpan","padding","borderBottom","flexGrow","Fragment","clearanceOrder","proofDetailSortAscFunction","value1","value2","result","VerifyListModal","modalOpen","handleMoreInfoModalOpen","handleVerifyListModalClose","txHash","href","rel","rowList","setRowList","proofDetailList","sort","currentList","collapse","push","dataList","arrangeRowDataList","Modal","overflowY","boxShadow","pb","top","left","transform","maxHeight","maxWidth","TableContainer","Paper","Table","stickyHeader","TableHead","TableBody","singleRowData","contentTypo","listItem","noBorderBottomListItem","MoreInfoModal","moreInfo","moreInfoModalOpen","merkleProofRootHash","whiteSpace","titleCell","contentCell","VerifyDetailTable","detailExpand","setDetailExpand","setModalOpen","setMoreInfo","setMoreInfoModalOpen","contractAddressUrl","renderResult","verifyResultDescription","handleVerifyListModalOpen","Collapse","in","timeout","unmountOnExit","proofFileName","uploadTimestamp","totalCount","successCount","modifiedCount","queryType","addedCount","removedCount","verifyResult","constant","inputs","outputs","payable","stateMutability","anonymous","indexed","loadContract","nodeUrl","Web3","providers","HttpProvider","eth","Contract","ABI","err","obtainClearanceRecordFromContract","a","spoContract","methods","clearanceRecords","call","clearanceRecord","rootHash","replace","createTime","chainHash","description","sha256HexString","hexString","cryptoJSsha256","cryptoJS","enc","Hex","toString","sha256ToHex","toSha256Data","sha256","hex","hexToBytes","bytes","c","parseInt","Int8Array","readFileContent","Promise","resolve","reject","reader","FileReader","onload","e","onerror","readAsText","loadVerificationProofFileToJson","fileContent","verificationProof","QueryType","queryString","query","startsWith","includes","keyValuePairs","splitString","indexValueKey","fromTS","toTS","fromCO","toCO","fromSN","toSN","VerifyVerificationProofStatus","ALL_PASS","SIG_ERROR","CONTRACT_CONNECTION_ERR","buildProofSignaturePassReport","serverWalletAddress","sigServer","signData","proofSignaturePass","report","r","s","v","buildVerifyLastClearanceRecordReport","lastRecord","buildVerifyClearanceRecordReport","currentRecord","concatByteArray","calculateChainHash","utils","bytesToHex","Uint8Array","from","concatSigServer","buildReceiptToDigestContent","receipt","buildReceiptToSignData","iv","co","timestamp","metadata","timestampSPO","sigClient","buildExistenceProofToSignData","existenceProof","exist","merkleProof","receiptDigestContent","merkleProofToConCatSignData","pbPairToString","pbPair","keyHash","buildMerkleProofToConCatSignData","buildProofMessage","proof","existenceProofToSignData","existenceProofs","reduce","previous","current","clearanceRecordToSignData","record","version","env","nodeConnectionString","buildPbPairToString","message","buildSpoSignatureToString","signature","buildExistenceProofToString","concat","pair","buildMerkleProofToString","buildReceiptToString","buildClearanceRecordToString","buildProofMessageFail","clearanceRecordsEqual","firstCr","secondCr","buildVerifiedClearanceRecordInfoMap","crList","latestCR","verifiedClearanceRecordInfoMap","clearanceRecordMap","buildClearanceRecordMapFilterByLatestCO","pass","currentCo","verifyLastClearanceRecordReport","reportList","Object","keys","previousRecord","undefined","verifyChainHashResult","verifyChainHash","verifyClearanceRecordReportList","rootHashByteArray","clearanceOrderByteArray","padLeft","numberToHex","previousRecordByteArray","keccak256","clearanceRecordList","filter","buildVerifiedClearanceRecordInfoMap_2_3_0","previousCo","ProofExistStatus","VerifyNotExistProofStatus","StatusConstantsString","verifySPOSignature","verifyEthereumSignature","recoveredAddress","signatureR","signatureS","signatureV","recoverAddress","accounts","require","recover","messageHash","hashedMessage","hashMessage","recoverEthereumAddress","verifyProofSignature","first","proofMessage","verifyMerkleProofSignature","serverWalletAddess","merkleProofMessage","buildMerkleProofToSignData","getLeafNode","interNodes","sliceListSize","arrayEqual","arr1","arr2","isReceiptInPbPair","indexValueHash","receiptDigestValue","arrayBuffer","String","toLowerCase","evalRootHashFromSlice","sliceString","tokens","treeHeight","parentIndex","merkleTreeReport","maxLevel","getRootHashFromSlice","parentDigestHex","verifyPbPair","leafNodeVerifyResult","sliceIndex","leafNode","valueString","pbPairValue","pbPairHashValue","isLeafNode","receiptInPbPairVerifyResult","pbPairReport","inPbPair","verify","Date","now","ledgerInputTimestamp","contractRootHash","merkleProofSignatureOk","receiptSignatureOk","pbPairOk","clearanceOrderOk","sliceOk","clearanceRecordRootHashOk","receiptCO","merkleProofCO","clearanceRecordCO","isReceiptSignatureOk","receiptMessage","verifyReceiptSignature","verifyPbPairReport","verifySliceReport","verifyMerkleProofSlice","isRootHashCorrect","rootHashFromSlice","verifyRootHash","collectExistenceProofByClearanceOrder","existenceProofList","b","getIndexValuePropertiesFromIndexValue","sn","matcher","match","findNotExistProofList","notExistProofList","verifyNotExistProofList","notExistProof","verifyNotExistProof","getSnFromNotExistProofSuccessInfo","MAX_SAFE_INTEGER","getCurrentSnFromQuery","buildRemovedProofResultList","fromSn","toSn","resultList","contractClearanceRecord","verifyNotExistProofStatus","isMerkleProofSignature","verifyNotExistReport","verifyNotExistMerkleProofAndReceipt","verifyNotExistProofResult","verifyReceiptAndMerkleProof","clearanceOrderAndIndexValueOk","isNextExistenceProofHaveSameCOIV","currentProof","nextProof","cr","verifyNotExistPbPair","rootHashEqual","isRootHashEqual","isInPbPair","key","verifyLeafNodeReport","indexPosition","isLeafNodeWithReport","containDataCount","leafNodeHashValue","verifyExistenceProof","verifyReportType","generalReport","verifyExceptionReport","verifyProofSigReport","verifyExistenceProofList","isProofSignaturePass","obtainVersionFromContract","contractVersion","verifiedCrMap","crPass","isCrListPass","existProofResults","errorCoList","count","clearanceOrderList","collectProofClearanceOrderReversedList","verifiedClearanceRecordInfo","verifySingleCOExistenceProofInput","isLatestCO","verifySingleCOExistenceProof","addCount","addAllIfNotNull","existenceProofResultList","coError","verifyReceiptResult","errorClearanceOrderInClearanceRecordList","verifyReport","crMap","values","Array","Set","reverse","resultCount","input","verifyProofListResult","existenceProofListInSameCO","proofResultList","successNotExistProofInfo","firstSuccessNotExistProofSn","currentSN","indexValueProperties","removedProofResultList","j","verifyExistenceProofWithNotExist","existProofResultList","existenceProofResult","verifyOnlyExistenceProof","failResult","buildClearanceRecordFailResult","verifyProofCount","apply","crFailResult","clearanceRecordRootHash","list","source","infuraProjectId","getNodeUrl","latestCO","findLatestCO","toNodeUrl","verifyRawDataWithFileNameAndHash","fileHash","isCheckFileName","verifyFileWithCmdResult","cmdObject","isAllPass","isFileHashPass","attestationFileName","attestationFileHash","verifyFileName","fileNamePass","VerifyResult","fileHashPass","isFileNamePass","verifyFileInfoWithCmd","EthereumEnv","ExplorerType","obtainExplorerType","getVerifyResult","getVerifyResultDescription","VerifyResultDescription","CONTRACT_CONNECTION_ERROR","buildVerifyProofDetailList","proofResult","isVerificationContentContainsNull","INFURA_PROJECT_ID","buildWeb3AndContract","currentProvider","contractAbi","getCertificationSize","address","lowerCaseAddress","getCertificationFromContract","getCertificationByTimestamp","chineseName","englishName","walletAddress","startTime","expireTime","getCertificationKey","dateObj","getFullYear","getMonth","getDate","getTime","getCertification","proofVerifyResult","currentTimestamp","timeCertMap","timestampByDay","verifyProof","verifyTimestamp","verificationProofFromFile","responseResult","explorerType","buildResponseResult","ProofVerificationPage","setopen","setDetailData","then","catch","Backdrop","CircularProgress","VerificationType","VerifyStepper","activeStep","substring","rawDataType","steps","fileSetType","stepper","setStepper","Stepper","shape","label","Step","StepLabel","UploadBinaryData","handleFileDataChange","handleFileHashChange","handleFileNameChange","handleNext","wordArray","CryptoJS","lib","WordArray","create","hash","readAsArrayBuffer","FileUpload","UploadVerificationProof","handleProofDataChange","className","WhiteCheckbox","Checkbox","common","white","VerifyFileNameCheckbox","isVerifyFileName","handleCheckboxChange","FormControlLabel","control","checked","UploadedInfoSection","StepperButton","onBackButtonClick","handleReset","binaryData","onFileUpload","onProofUpload","verifyRawDataWithVerificationProof","rawDataFileName","rawDataFileHash","fileNameVerifyResult","fileContentVerifyResult","verifyProofResult","verifyFileResult","buildRawDataResponseResult","handleDetailDataChange","handleBackdropOpen","handleBackdropClose","setActiveStep","setbinaryData","binaryHash","setbinaryHash","binaryName","setbinaryName","setverificationProof","prevActiveStep","timeOut","setTimeout","clearTimeout","uploadFileHash","setIsVerifyFileName","uploadFile","VerifyResultTable","resultExpand","setResultExpand","checkIsVerifyFileName","DetailTableContent","parseCmd","arrow","RwdDetailTableContent","RawDataVerificationPage","sha256File","onProgress","chunkSize","hasher","algo","SHA256","offset","update","this","partial","progress","finalize","getAndSha256FileList","resultPromise","toVerifyFile","_toVerifyFileList","toVerifyFileList","UploadFolder","setFileList","setRootFolderName","handleUploadStart","checkFileNameValid","nameFirstIndex","checkFileInRootFolder","indexOf","folderName","toReadFiles","webkitdirectory","verifyFileSetAndContinuousProof","fileNameAndHashList","verifyFileNameAndHashListWithContinuousProof","verifyFileSetResultList","existProofVerifyResultList","getOnlyExistVerifyReceiptResult","existProofVerifyResult","verifyFileNameAndFileHashResult","verifyFileNameAndHashWithProofVerifyResult","element","VerifyFileNameAndHashStatus","verifyFileNameAndHashResult","verifyStatus","isFileType","fileObjectInList","getFileObjectInList","cmdFileName","splice","verifyReceiptResultList","object","verifyFileSetWithVerificationProof","verifyFileSetAndContinuousProofResult","buildVerifyContinuousProofResponse","verifyFileCount","countVerifyFileCount","total","missing","added","modified","verifyFileNameAndHashDetailList","verifyFileTotalCount","verifyFileSuccessCount","verifyFileMissingCount","verifyFileAddedCount","verifyFileModifiedCount","onFolderUpload","handleInProgress","handleProgressDone","fileVerifyResult","webkitRelativePath","uploadFiles","uploadFilesSize","FilesVerifyListModal","verifyFileDetailList","handleMoreInfoOpen","moreInfoContent","textOverflow","SingleFileMoreInfoModal","content","renderVerifyFileContentResult","renderVerifyFileNameResult","renderVerifyResultText","gutterBottom","FilesVerifyDetailTable","setMoreInfoContent","moreInfoOpen","setMoreInfoOpen","FileSetVerificationPage","inProgress","setInProgress","App","isBiggerView","StyledEngineProvider","injectFirst","ThemeProvider","maxSnack","basename","pt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","use","LanguageDetector","initReactI18next","init","resources","en","translations","tw","lng","fallbackLng","debug","ns","defaultNS","keySeparator","interpolation","escapeValue","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60f572ff.chunk.js","sourcesContent":["import Web3 from 'web3'\nimport moment from 'moment'\nimport contractAbi from '../../contract/CertificationABI.json'\nimport { ExistenceType } from '../../constants/ExistenceType'\n\nconst INFURA_PROJECT_ID = process.env.REACT_APP_INFURA_PROJECT_ID\n\nconst PROD_CONTRACT_ADDRESS = '0x4FCcB0e465D836678BF32C66b86f0EB87C0401B5'\nconst DEV_CONTRACT_ADDRESS = '0x1aaFE9daAa219c43B798C0dF2909341cC37C14fb'\n\nlet web3\nlet contract\n\nconst buildWeb3AndContract = (env) => {\n    let contractAddress = PROD_CONTRACT_ADDRESS\n    let nodeUrl = `https://mainnet.infura.io/v3/${INFURA_PROJECT_ID}`\n\n    if (env && env.toLocaleLowerCase() === 'goerli') {\n        nodeUrl = `https://sepolia.infura.io/v3/${INFURA_PROJECT_ID}`\n        contractAddress = DEV_CONTRACT_ADDRESS\n    }\n    if (typeof web3 !== 'undefined') {\n        web3 = new Web3(web3.currentProvider)\n    } else {\n        web3 = new Web3(new Web3.providers.HttpProvider(nodeUrl))\n    }\n    contract = new web3.eth.Contract(contractAbi, contractAddress)\n}\n\nconst getCertificationSize = async (address) => {\n    const lowerCaseAddress = address.toLocaleLowerCase()\n    console.log('getCertificationSize() address: ', lowerCaseAddress)\n\n    if (web3 && contract) {\n        try {\n            const size = await contract.methods.getCertificationSize(lowerCaseAddress).call()\n            console.log('getCertificationSize() size : ', size)\n            return size\n        } catch (error) {\n            console.log('error: ', error)\n            return null\n        }\n    } else {\n        console.log('warning: web3 contract not build yet')\n    }\n    return 0\n}\n\nconst getCertificationFromContract = async (address, timestamp) => {\n    const lowerCaseAddress = address.toLocaleLowerCase()\n    console.log('getCertificationFromContract() timestamp: ', timestamp, 'address:', lowerCaseAddress)\n    if (web3 && contract) {\n        try {\n            const certification = await contract.methods.getCertificationByTimestamp(address, timestamp).call()\n            console.log('getCertificationFromContract() certification : ', certification)\n            const { chineseName, englishName, walletAddress, startTime, expireTime } = certification\n            return {\n                address: walletAddress,\n                certificatedChineseName: chineseName,\n                certificatedEnglishName: englishName,\n                startTime,\n                expireTime,\n            }\n        } catch (error) {\n            console.log('error: ', error)\n            return null\n        }\n    } else {\n        console.log('warning: web3 contract not build yet')\n    }\n    return 0\n}\n\nconst getCertificationKey = (timestamp) => {\n    // 將timestamp都轉換成當天的0:00\n    var dateObj = new Date(timestamp)\n    var noTime = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate())\n    return noTime.getTime()\n}\n\nconst getCertification = async (proofVerifyResult, verificationProof) => {\n    let certification = null\n    const callerAddress = verificationProof.existenceProofs[0].receipt.callerAddress\n    buildWeb3AndContract(verificationProof.env)\n\n    // If the address has no any certification, then no certification record needs to be fetch and append\n    if ((await getCertificationSize(callerAddress, verificationProof.env)) <= 0) {\n        return\n    }\n\n    const currentTimestamp = moment().format('x')\n    const resultList = proofVerifyResult.verifyReceiptResult\n\n    certification = await getCertificationFromContract(callerAddress, currentTimestamp)\n\n    // If the account is currently under certification, then just use the current certification\n    if (certification) {\n        resultList.forEach((result) => {\n            if (result.existenceType === ExistenceType.EXIST) {\n                result.certification = certification\n            }\n        })\n    } else {\n        let timeCertMap = {}\n        for (let i = 0; i < resultList.length; i++) {\n            if (resultList[i].existenceType === ExistenceType.EXIST) {\n                let timestampByDay = getCertificationKey(resultList[i].receiptTimestamp)\n                if (timeCertMap[timestampByDay] === undefined) {\n                    // If the timestamp of the day does not exist its certification record, obtained it from blockchain\n                    certification = await getCertificationFromContract(callerAddress, timestampByDay)\n                    timeCertMap[timestampByDay] = certification\n                } else {\n                    // If exist, use the record (if null, indicates that there is no certification at the time)\n                    certification = timeCertMap[timestampByDay]\n                }\n            } else {\n                certification = null\n            }\n            resultList[i].certification = certification\n        }\n    }\n    console.log('resultList: ', resultList)\n}\n\nexport { getCertification }\n","export default __webpack_public_path__ + \"static/media/translate.fcdae3d8.svg\";","import React, { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport Cookies from 'universal-cookie'\nimport { Button, Hidden, Menu, MenuItem, Box } from '@mui/material'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\nimport TranslateIcon from '../../img/translate.svg'\n\nconst LanguageMenu = () => {\n    const [language, setlanguage] = useState(null)\n    const [selectedIndex, setselectedIndex] = useState(0)\n    const languageOpen = Boolean(language)\n    const cookies = new Cookies()\n    const defaultCookieLanguage = cookies.get('language')\n    const [currentLanguage, setcurrentLanguage] = useState(defaultCookieLanguage ? defaultCookieLanguage : 'English')\n    const { i18n } = useTranslation()\n\n    const handleLanguageMenu = (event) => {\n        setlanguage(event.currentTarget)\n    }\n\n    const handleLanguageClose = () => {\n        setlanguage(null)\n    }\n\n    const handleLanguage = (event, index) => {\n        const language = event.currentTarget.getAttribute('data-id')\n        if (language === '中文') {\n            i18n.changeLanguage('zh-TW')\n            cookies.set('language', '中文', { path: '/' })\n            setcurrentLanguage('中文')\n        } else {\n            i18n.changeLanguage('en')\n            cookies.set('language', 'English', { path: '/' })\n            setcurrentLanguage('English')\n        }\n        setlanguage(null)\n        setselectedIndex(index)\n    }\n\n    const languageOptions = ['中文', 'English']\n    return (\n        <div>\n            <Button sx={{ p: 0.5, minWidth: 20 }} onClick={handleLanguageMenu} color=\"inherit\">\n                <img src={TranslateIcon} alt=\"TranslateIcon\" height=\"20\" width=\"20\" />\n                <Hidden smDown>\n                    <Box ml={1}>{currentLanguage || '中文'}</Box>\n                    <ExpandMoreIcon />\n                </Hidden>\n            </Button>\n            <Menu\n                id=\"language\"\n                anchorEl={language}\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n                keepMounted\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                open={languageOpen}\n                onClose={handleLanguageClose}\n            >\n                {languageOptions.map((option, index) => (\n                    <MenuItem\n                        key={option}\n                        data-id={option}\n                        selected={index === selectedIndex}\n                        onClick={(event) => handleLanguage(event, index)}\n                    >\n                        {option}\n                    </MenuItem>\n                ))}\n            </Menu>\n        </div>\n    )\n}\n\nexport default LanguageMenu\n","import React, { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { MenuItem, Menu, Typography, Button, Box } from '@mui/material'\nimport GitHubIcon from '@mui/icons-material/GitHub'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n\nconst ToolMenu = () => {\n    const { t } = useTranslation()\n    const [anchorEl, setAnchorEl] = useState(null)\n    const accountOpen = Boolean(anchorEl)\n\n    const handleMenu = (event) => {\n        setAnchorEl(event.currentTarget)\n    }\n\n    const handleClose = () => {\n        setAnchorEl(null)\n    }\n    return (\n        <div>\n            <Button onClick={handleMenu} sx={{ p: 0.5, minWidth: 20 }} color=\"inherit\">\n                <GitHubIcon style={{ height: 25, fill: 'white' }} />\n                <Box ml={1} sx={{ display: { xs: 'none', sm: 'block' } }}>\n                    Github\n                </Box>\n                <ExpandMoreIcon />\n            </Button>\n            <Menu\n                id=\"tool-menu\"\n                anchorEl={anchorEl}\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n                keepMounted\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                open={accountOpen}\n                onClose={handleClose}\n            >\n                <MenuItem\n                    onClick={(event) => {\n                        event.preventDefault()\n                        window.open('https://github.com/itrustmachines/spo-verification-program')\n                        handleClose()\n                    }}\n                >\n                    <GitHubIcon style={{ marginRight: '10px', fill: '#4b4b4b' }} />\n                    <Typography variant=\"body1\">{t('Verification Program Java Source Code')}</Typography>\n                </MenuItem>\n                <MenuItem\n                    onClick={(event) => {\n                        event.preventDefault()\n                        window.open('https://github.com/ITM-BNS/itm-bns.github.io')\n                        handleClose()\n                    }}\n                >\n                    <GitHubIcon style={{ marginRight: '10px', fill: '#4b4b4b' }} />\n                    <Typography variant=\"body1\">{t('Verification Javascript Source Code')}</Typography>\n                </MenuItem>\n            </Menu>\n        </div>\n    )\n}\n\nexport default ToolMenu\n","export default __webpack_public_path__ + \"static/media/heartbeat.eeffe765.svg\";","import React, { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport moment from 'moment'\nimport { Popover, IconButton, Avatar, Grid, Box, Typography } from '@mui/material'\nimport StatusIcon from '../../img/heartbeat.svg'\n\nconst Status = () => {\n    const { t } = useTranslation()\n\n    const [statusAnchorEl, setstatusAnchorEl] = useState(null)\n    const statusOpen = Boolean(statusAnchorEl)\n\n    const handleStatusMenu = (event) => {\n        setstatusAnchorEl(event.currentTarget)\n    }\n\n    const handleStatusClose = () => {\n        setstatusAnchorEl(null)\n    }\n\n    const status = (\n        <Box m={3}>\n            <Box mb={2} sx={{ minWidth: 300 }}>\n                <Grid container spacing={2}>\n                    <Grid item xs={5}>\n                        <Box>\n                            <Typography variant=\"body1\">{t('Version')} :</Typography>\n                        </Box>\n                        <Box>\n                            <Typography variant=\"body1\">{t('Current Time')} :</Typography>\n                        </Box>\n                    </Grid>\n                    <Grid item xs={7}>\n                        <Box>\n                            <Typography variant=\"body1\">{process.env.REACT_APP_VERSION || 'N/A'}</Typography>\n                        </Box>\n                        <Box>\n                            <Typography variant=\"body1\">{moment().format('YYYY/MM/DD HH:mm:ss')}</Typography>\n                        </Box>\n                    </Grid>\n                </Grid>\n            </Box>\n        </Box>\n    )\n    return (\n        <div>\n            <IconButton color=\"inherit\" onClick={handleStatusMenu} size=\"large\">\n                <Avatar sx={{ backgroundColor: 'common.white', height: { xs: 20, sm: 30 }, width: { xs: 20, sm: 30 } }}>\n                    <img alt=\"statusIcon\" src={StatusIcon} height=\"20\" />\n                </Avatar>\n            </IconButton>\n            <Popover\n                open={statusOpen}\n                anchorEl={statusAnchorEl}\n                onClose={handleStatusClose}\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n            >\n                {status}\n            </Popover>\n        </div>\n    )\n}\n\nexport default Status\n","export default __webpack_public_path__ + \"static/media/home.621df37a.svg\";","export default __webpack_public_path__ + \"static/media/gavel.764d8541.svg\";","export default __webpack_public_path__ + \"static/media/file.2b04efa8.svg\";","export default __webpack_public_path__ + \"static/media/folder.c89726d3.svg\";","import React from 'react'\nimport { Toolbar, Drawer, List, Box } from '@mui/material'\nimport { styled } from '@mui/material/styles'\nimport HomeIcon from '../../img/home.svg'\nimport ProofIcon from '../../img/gavel.svg'\nimport RawDataIcon from '../../img/file.svg'\n// import KeyIcon from '../../img/key.svg'\nimport FolderIcon from '../../img/folder.svg'\nimport SidebarItem from './SidebarItem'\n\nconst drawerWidth = 240\nconst CustomDrawer = styled(Drawer)(() => ({\n    width: drawerWidth,\n    flexShrink: 0,\n    '.MuiDrawer-paper': { width: drawerWidth },\n}))\n\nexport const links = [\n    { id: 0, icon: HomeIcon, text: 'Home', to: '/' },\n    { id: 1, icon: ProofIcon, text: 'Proof Verification', to: '/proofVerification' },\n    { id: 2, icon: RawDataIcon, text: 'Raw Data Verification', to: '/rawDataVerification' },\n    { id: 3, icon: FolderIcon, text: 'File Set Verification', to: '/fileSetVerification' },\n    // { id: 4, icon: KeyIcon, text: 'Recovery Key and Address', to: '/recoveryKeyAddress' },\n]\n\nconst Sidebar = () => {\n    return (\n        <CustomDrawer id=\"sidebar\" variant=\"permanent\" sx={{ display: { xs: 'none', md: 'block' } }}>\n            <Toolbar />\n            <Box sx={{ overflow: 'auto' }}>\n                <List>\n                    <SidebarItem />\n                </List>\n            </Box>\n        </CustomDrawer>\n    )\n}\n\nexport default Sidebar\n","import React, { useEffect, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { Link, useLocation } from 'react-router-dom'\nimport { ListItem, ListItemButton, ListItemText, ListItemIcon } from '@mui/material'\nimport { styled } from '@mui/material/styles'\nimport { links } from './Sidebar'\n\nconst CustomListItemButton = styled(ListItemButton)(({ theme }) => ({\n    '&.Mui-selected': {\n        backgroundColor: theme.palette.action.hover,\n    },\n    '&.Mui-selected:hover': {\n        backgroundColor: theme.palette.action.selected,\n    },\n}))\n\nconst SidebarItem = () => {\n    const { t } = useTranslation()\n    const location = useLocation()\n    const { pathname } = location\n    const [selectedPath, setSelectedPath] = useState('/')\n\n    useEffect(() => {\n        links.forEach((link) => {\n            if (pathname === link.to) {\n                setSelectedPath(link.to)\n            }\n        })\n    }, [pathname])\n\n    const handleListItemClick = (event, path) => {\n        setSelectedPath(path)\n    }\n\n    return (\n        <>\n            {links.map((link) => (\n                <Link key={link.id} to={link.to} style={{ textDecoration: 'none', color: 'black' }}>\n                    <ListItem id={`sidebar-item-${link.id}`} disablePadding>\n                        <CustomListItemButton\n                            selected={selectedPath === link.to}\n                            onClick={(event) => handleListItemClick(event, link.to)}\n                        >\n                            <ListItemIcon>\n                                <img alt={link.text} src={link.icon} height=\"20\" width=\"20\" />\n                            </ListItemIcon>\n                            <ListItemText>{t(link.text)}</ListItemText>\n                        </CustomListItemButton>\n                    </ListItem>\n                </Link>\n            ))}\n        </>\n    )\n}\n\nexport default SidebarItem\n","import React, { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport {\n    IconButton,\n    List,\n    ListItem,\n    ListItemText,\n    ListItemIcon,\n    SwipeableDrawer,\n    Divider,\n    Toolbar,\n    ListItemButton,\n} from '@mui/material'\nimport GitHubIcon from '@mui/icons-material/GitHub'\nimport MenuIcon from '@mui/icons-material/Menu'\nimport SidebarItem from '../sidebar/SidebarItem'\n\nconst MobileMenu = () => {\n    const { t } = useTranslation()\n    const [open, setOpen] = useState(false)\n\n    const handleDrawerOpen = () => {\n        setOpen((prev) => !prev)\n    }\n\n    const handleDrawerClose = () => {\n        setOpen(false)\n    }\n\n    return (\n        <div>\n            <IconButton color=\"inherit\" onClick={handleDrawerOpen} size=\"large\">\n                <MenuIcon />\n            </IconButton>\n            <SwipeableDrawer open={open} onClose={handleDrawerClose} onOpen={handleDrawerOpen}>\n                <Toolbar />\n                <Divider />\n                <List onClick={handleDrawerClose} onKeyDown={handleDrawerClose}>\n                    <SidebarItem />\n                    <ListItem\n                        disablePadding\n                        onClick={() => {\n                            window.open('https://github.com/itrustmachines/spo-verification-program', '_blank')\n                        }}\n                    >\n                        <ListItemButton>\n                            <ListItemIcon>\n                                <GitHubIcon style={{ fill: '#4b4b4b' }} alt=\"gitHubIcon\" height=\"20\" width=\"20\" />\n                            </ListItemIcon>\n                            <ListItemText>{t('Verification Program Java Source Code')}</ListItemText>\n                        </ListItemButton>\n                    </ListItem>\n                    <ListItem\n                        disablePadding\n                        onClick={() => {\n                            window.open('https://github.com/ITM-BNS/itm-bns.github.io', '_blank')\n                        }}\n                    >\n                        <ListItemButton>\n                            <ListItemIcon>\n                                <GitHubIcon style={{ fill: '#4b4b4b' }} alt=\"gitHubIcon\" height=\"20\" width=\"20\" />\n                            </ListItemIcon>\n                            <ListItemText>{t('Verification Javascript Source Code')}</ListItemText>\n                        </ListItemButton>\n                    </ListItem>\n                </List>\n            </SwipeableDrawer>\n        </div>\n    )\n}\n\nexport default MobileMenu\n","export default __webpack_public_path__ + \"static/media/ITM.07703081.svg\";","export default __webpack_public_path__ + \"static/media/icp_logo.a9b0bc60.svg\";","import { createTheme, adaptV4Theme } from '@mui/material/styles'\n\nconst defaultTheme = {\n    overrides: {\n        MuiDrawer: {\n            paperAnchorBottom: {\n                height: '100%',\n            },\n        },\n    },\n    palette: {\n        primary: {\n            light: '#7986CB',\n            main: '#3F51B5',\n            dark: '#303F9F',\n        },\n        secondary: {\n            light: '#FF4081',\n            main: '#F50057',\n            dark: '#C51162',\n        },\n        error: {\n            light: '#E57373',\n            main: '#F44336',\n            dark: '#D32F2F',\n        },\n        warning: {\n            light: '#FFB74D',\n            main: '#FF9800',\n            dark: '#F57C00',\n        },\n        info: {\n            light: '#64B5F6',\n            main: '#2196F3',\n            dark: '#1976D2',\n        },\n        success: {\n            light: '#81C784',\n            main: '#4CAF50',\n            dark: '#388E3C',\n        },\n        text: {\n            primary: 'rgba(0, 0, 0, 0.87)',\n            secondary: 'rgba(0, 0, 0, 0.54)',\n            hint: 'rgba(0, 0, 0, 0.38)',\n        },\n        background: {\n            main: '#3D3F4F',\n            uploader: '#F0F2F8',\n        },\n        fingerPrint: {\n            main: '#FF5757',\n        },\n    },\n    typography: {\n        fontFamily: '\"Noto Sans TC\", sans-serif',\n    },\n    mixins: {\n        toolbar: {\n            minHeight: 64,\n            '@media (min-width:0px)': {\n                minHeight: 56,\n            },\n            '@media (min-width:600px)': {\n                minHeight: 72,\n            },\n        },\n    },\n}\n\nconst icpTheme = {\n    overrides: {\n        MuiDrawer: {\n            paperAnchorBottom: {\n                height: '100%',\n            },\n        },\n    },\n    palette: {\n        primary: {\n            light: '#7986CB',\n            main: '#3F51B5',\n            dark: '#303F9F',\n        },\n        secondary: {\n            light: '#FF4081',\n            main: '#F50057',\n            dark: '#C51162',\n        },\n        error: {\n            light: '#E57373',\n            main: '#F44336',\n            dark: '#D32F2F',\n        },\n        warning: {\n            light: '#FFB74D',\n            main: '#FF9800',\n            dark: '#F57C00',\n        },\n        info: {\n            light: '#64B5F6',\n            main: '#2196F3',\n            dark: '#1976D2',\n        },\n        success: {\n            light: '#81C784',\n            main: '#4CAF50',\n            dark: '#388E3C',\n        },\n        text: {\n            primary: 'rgba(0, 0, 0, 0.87)',\n            secondary: 'rgba(0, 0, 0, 0.54)',\n            hint: 'rgba(0, 0, 0, 0.38)',\n        },\n        background: {\n            main: '#3D3F4F',\n            uploader: '#F0F2F8',\n        },\n        fingerPrint: {\n            main: '#FF5757',\n        },\n    },\n    typography: {\n        fontFamily: '\"Cardo\", serif',\n    },\n    mixins: {\n        toolbar: {\n            minHeight: 64,\n            '@media (min-width:0px)': {\n                minHeight: 56,\n            },\n            '@media (min-width:600px)': {\n                minHeight: 72,\n            },\n        },\n    },\n}\n\nconst CLIENT_TYPE = process.env.REACT_APP_CLIENT_TYPE || 'ITM'\nconst isIcpStyle = CLIENT_TYPE.toLocaleLowerCase() === 'icp'\n\nexport default createTheme(adaptV4Theme(isIcpStyle ? icpTheme : defaultTheme))\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { useMediaQuery, AppBar, Toolbar, Box, Avatar, Button, Typography, Hidden } from '@mui/material'\n// TODO replace img with mui icon\nimport LanguageMenu from './LanguageMenu'\nimport ToolMenu from './ToolMenu'\nimport Status from './Status'\nimport MobileMenu from './MobileMenu'\nimport ITMIcon from '../../img/ITM.svg'\nimport ICPIcon from '../../img/icp_logo.svg'\nimport theme from '../../theme/Theme'\n\nconst CLIENT_TYPE = process.env.REACT_APP_CLIENT_TYPE || 'ITM'\nconst isIcpStyle = CLIENT_TYPE.toLocaleLowerCase() === 'icp'\n\nconst Navbar = () => {\n    const matches = useMediaQuery((theme) => theme.breakpoints.up('sm'))\n\n    const renderLogo = () => {\n        if (isIcpStyle) {\n            return (\n                <img\n                    alt=\"icpLogo\"\n                    src={ICPIcon}\n                    height=\"50\"\n                    style={{ backgroundColor: 'white', borderRadius: '5px' }}\n                />\n            )\n        } else {\n            return <img alt=\"itmLogo\" src={ITMIcon} width={matches ? 65 : 60} />\n        }\n    }\n\n    return (\n        <>\n            <AppBar position=\"fixed\" sx={{ zIndex: theme.zIndex.drawer + 1, backgroundColor: 'background.main' }}>\n                <Toolbar>\n                    <Hidden mdUp>\n                        <MobileMenu />\n                    </Hidden>\n                    <Link to=\"/\" style={{ textDecoration: 'none', color: 'black' }}>\n                        <Button sx={{ textTransform: 'none', color: 'common.white', alignItems: 'center' }}>\n                            {renderLogo()}\n                            <Box mx={2}>\n                                <Typography variant=\"h5\">Verification</Typography>\n                            </Box>\n                        </Button>\n                    </Link>\n                    <Box ml=\"auto\">\n                        <LanguageMenu />\n                    </Box>\n                    <Hidden mdDown>\n                        <ToolMenu />\n                    </Hidden>\n                    <Status />\n                    {!isIcpStyle && (\n                        <Hidden mdDown>\n                            <Avatar sx={{ width: 30, height: 30, backgroundColor: theme.palette.grey[500], ml: 1 }}>\n                                <img src={ITMIcon} alt=\"ITMAvatar\" width=\"22\" />\n                            </Avatar>\n                            <Box ml={1}>\n                                <Typography variant=\"caption\" sx={{ color: '#858796' }}>\n                                    ITM Corp.\n                                </Typography>\n                            </Box>\n                        </Hidden>\n                    )}\n                </Toolbar>\n            </AppBar>\n        </>\n    )\n}\n\nexport default Navbar\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { useTranslation } from 'react-i18next'\nimport { useMediaQuery, Grid, Typography, Card, Box, Divider, IconButton } from '@mui/material'\nimport DoubleArrowIcon from '@mui/icons-material/DoubleArrow'\nimport ProofIcon from '../../img/gavel.svg'\nimport RawDataIcon from '../../img/file.svg'\nimport FolderIcon from '../../img/folder.svg'\nimport theme from '../../theme/Theme'\n\nconst linkStyle = {\n    color: theme.palette.primary.main,\n    textDecoration: 'none',\n    display: 'flex',\n    alignItems: 'center',\n}\n\nconst HomePage = () => {\n    const { t } = useTranslation()\n    const matches = useMediaQuery((theme) => theme.breakpoints.down('sm'))\n\n    return (\n        <>\n            <Typography variant={matches ? 'h5' : 'h4'} sx={{ color: 'common.white' }}>\n                {t('Home')}\n            </Typography>\n            <Box mt={2}>\n                <Grid container spacing={2}>\n                    <Grid item xs={12} lg={6}>\n                        <Card>\n                            <Box m={4} display=\"flex\" alignItems=\"center\">\n                                <Box display=\"flex\" alignItems=\"center\">\n                                    <Box mr={1} display=\"inline\">\n                                        <img alt=\"ProofIcon\" src={ProofIcon} height=\"25\" width=\"25\" />\n                                    </Box>\n                                    <Typography variant=\"h6\" display=\"inline\">\n                                        {t('Proof Verification')}\n                                    </Typography>\n                                </Box>\n                            </Box>\n                            <Divider variant=\"middle\" />\n                            <Box m={2}>\n                                <Link to=\"/proofVerification\" style={linkStyle}>\n                                    <IconButton size=\"large\">\n                                        <DoubleArrowIcon fontSize=\"small\" sx={{ color: 'background.main' }} />\n                                    </IconButton>\n                                    <Typography variant=\"body1\" display=\"inline\">\n                                        {t('Proof Verification')}\n                                    </Typography>\n                                </Link>\n                            </Box>\n                        </Card>\n                    </Grid>\n                    <Grid item xs={12} lg={6}>\n                        <Card>\n                            <Box m={4}>\n                                <Box display=\"flex\" alignItems=\"center\">\n                                    <Box mr={1} display=\"inline\">\n                                        <img alt=\"RawDataIcon\" src={RawDataIcon} height=\"25\" width=\"25\" />\n                                    </Box>\n                                    <Typography variant=\"h6\" display=\"inline\">\n                                        {t('Raw Data Verification')}\n                                    </Typography>\n                                </Box>\n                            </Box>\n                            <Divider variant=\"middle\" />\n                            <Box m={2}>\n                                <Link to=\"/rawDataVerification\" style={linkStyle}>\n                                    <IconButton size=\"large\">\n                                        <DoubleArrowIcon fontSize=\"small\" sx={{ color: 'background.main' }} />\n                                    </IconButton>\n                                    <Typography variant=\"body1\" display=\"inline\">\n                                        {t('Raw Data Verification')}\n                                    </Typography>\n                                </Link>\n                            </Box>\n                        </Card>\n                    </Grid>\n                    <Grid item xs={12} lg={6}>\n                        <Card>\n                            <Box m={4} display=\"flex\" alignItems=\"center\">\n                                <Box display=\"flex\" alignItems=\"center\">\n                                    <Box mr={1} display=\"inline\">\n                                        <img alt=\"FolderIcon\" src={FolderIcon} height=\"25\" width=\"25\" />\n                                    </Box>\n                                    <Typography variant=\"h6\" display=\"inline\">\n                                        {t('File Set Verification')}\n                                    </Typography>\n                                </Box>\n                            </Box>\n                            <Divider variant=\"middle\" />\n                            <Box m={2}>\n                                <Link to=\"/fileSetVerification\" style={linkStyle}>\n                                    <IconButton size=\"large\">\n                                        <DoubleArrowIcon fontSize=\"small\" sx={{ color: 'background.main' }} />\n                                    </IconButton>\n                                    <Typography variant=\"body1\" display=\"inline\">\n                                        {t('File Set Verification')}\n                                    </Typography>\n                                </Link>\n                            </Box>\n                        </Card>\n                    </Grid>\n                </Grid>\n            </Box>\n        </>\n    )\n}\n\nexport default HomePage\n","export default __webpack_public_path__ + \"static/media/fingerprint.64ccd654.svg\";","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useTranslation } from 'react-i18next'\nimport { useMediaQuery, Box, Typography } from '@mui/material'\nimport { Alert } from '@mui/material'\n\nconst UploadedInfoAlert = ({ uploadedFiles, rootFolderName }) => {\n    const { t } = useTranslation()\n    const isXsScreen = useMediaQuery((theme) => theme.breakpoints.down('sm'))\n\n    const renderFileInfo = (files) => {\n        const file = files[0]\n        const fileName = file.path ? file.path : file.name\n\n        return isXsScreen ? fileName : `${fileName} - ${file.size} bytes`\n    }\n\n    const renderFileList = (fileList) => {\n        return `${rootFolderName} (${t('Containing')} ${fileList.length} ${t('files')})`\n    }\n\n    return (\n        <Alert\n            id=\"uploaded-info-alert\"\n            severity=\"info\"\n            sx={{ alignItems: 'center', mt: 1, wordBreak: { xs: 'break-all', sm: 'break-word' } }}\n        >\n            <Box my={isXsScreen ? 0 : 1}>\n                <Typography\n                    id=\"uploaded-proof-info\"\n                    data-testid=\"uploaded-proof-info\"\n                    variant={isXsScreen ? 'body2' : 'body1'}\n                >\n                    {rootFolderName ? renderFileList(uploadedFiles) : renderFileInfo(uploadedFiles)}\n                </Typography>\n            </Box>\n        </Alert>\n    )\n}\n\nUploadedInfoAlert.propTypes = {\n    uploadedFiles: PropTypes.array.isRequired,\n    rootFolderName: PropTypes.string,\n}\n\nexport default UploadedInfoAlert\n","const ExistenceType = {\n    NA: 'NA',\n    EXIST: 'EXIST',\n    NOT_EXIST: 'NOT_EXIST',\n}\n\nexport { ExistenceType }\n","import moment from 'moment'\nimport { ExistenceType } from '../constants/ExistenceType'\n\nconst renderCertificatedName = (certification) => {\n    const { certificatedChineseName, certificatedEnglishName } = certification\n    if (\n        certificatedChineseName &&\n        certificatedChineseName !== '' &&\n        certificatedEnglishName &&\n        certificatedEnglishName !== ''\n    ) {\n        return `${certificatedChineseName} / ${certificatedEnglishName}`\n    } else if (certificatedChineseName && certificatedChineseName !== '') {\n        return certificatedChineseName\n    } else if (certificatedEnglishName && certificatedEnglishName !== '') {\n        return certificatedEnglishName\n    }\n}\n\nconst getTxHashBaseUrl = (evmEnv) => {\n    let txHashBaseUrl = ''\n    if (evmEnv === 'RINKEBY' || evmEnv === 'KOVAN' || evmEnv === 'GOERLI' || evmEnv === 'ROPSTEN') {\n        txHashBaseUrl = `https://${evmEnv}.etherscan.io/tx`\n    } else if (evmEnv === 'MAINNET') {\n        txHashBaseUrl = `https://etherscan.io/tx`\n    } else if (evmEnv === 'AZURE_QUORUM') {\n        txHashBaseUrl = `http://itm-blockchain-explorer.itm.monster/transactions`\n    }\n\n    return txHashBaseUrl\n}\n\nconst renderTime = (value) => {\n    if (value) {\n        return moment(value).format('YYYY/MM/DD HH:mm:ss')\n    } else {\n        return 'N/A'\n    }\n}\n\nconst getContractAddressUrl = (evmEnv, contractAddress) => {\n    let url = ''\n    if (evmEnv === 'RINKEBY' || evmEnv === 'KOVAN' || evmEnv === 'GOERLI' || evmEnv === 'ROPSTEN') {\n        url = `https://${evmEnv}.etherscan.io/address/${contractAddress}`\n    } else if (evmEnv === 'MAINNET') {\n        url = `https://etherscan.io/address/${contractAddress}`\n    } else if (evmEnv === 'AZURE_QUORUM') {\n        url = `http://itm-blockchain-explorer.itm.monster/contracts/${contractAddress}`\n    }\n    return url\n}\n\nconst renderExistence = (existenceType) => {\n    if (existenceType === ExistenceType.EXIST) {\n        return 'O'\n    } else if (existenceType === ExistenceType.NA) {\n        return 'N/A'\n    } else if (existenceType === ExistenceType.NOT_EXIST) {\n        return 'X'\n    }\n}\n\nconst renderCmd = (cmd) => {\n    if (cmd) {\n        const slice = cmd.slice(1).slice(0, -1)\n        const result = `{\\n\\xa0 ${slice.split(',').join(',\\n\\xa0\\xa0')} \\n}`\n        return result\n    } else {\n        return 'N/A'\n    }\n}\n\nconst getSn = (indexValue) => {\n    return Number(indexValue.slice(indexValue.lastIndexOf('_R') + 2))\n}\n\nconst renderAttesterAddress = (data) => {\n    const { attesterAddress, cmd } = data\n    if (attesterAddress && attesterAddress !== '') {\n        return attesterAddress\n    } else if (cmd && cmd !== '') {\n        return JSON.parse(cmd).callerAddress\n    } else {\n        return null\n    }\n}\n\nconst isEmptyString = (value) => {\n    return !value || value === ''\n}\n\nconst isDuringTime = (curTimestamp, startTimestamp, endTimestamp) => {\n    if (curTimestamp >= startTimestamp && curTimestamp <= endTimestamp) {\n        return true\n    }\n    return false\n}\n\nconst toHumanReadableFileSize = (size) => {\n    var i = size == 0 ? 0 : Math.floor(Math.log(size) / Math.log(1024))\n    return (size / Math.pow(1024, i)).toFixed(2) * 1 + ' ' + ['B', 'kB', 'MB', 'GB', 'TB'][i]\n}\n\nexport {\n    renderCertificatedName,\n    getTxHashBaseUrl,\n    renderTime,\n    getContractAddressUrl,\n    renderExistence,\n    renderCmd,\n    getSn,\n    renderAttesterAddress,\n    isEmptyString,\n    isDuringTime,\n    toHumanReadableFileSize,\n}\n","import React, { useState, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport i18next from 'i18next'\nimport { useTranslation } from 'react-i18next'\nimport { useDropzone } from 'react-dropzone'\nimport { useSnackbar } from 'notistack'\nimport { Typography, Box } from '@mui/material'\nimport FingerPrint from '../../../../img/fingerprint.svg'\nimport UploadedInfoAlert from '../../../common/UploadedInfoAlert'\nimport { toHumanReadableFileSize } from '../../../../util/stringUtil'\n\nconst UploadSection = ({ detailData, handleVerify }) => {\n    const { t } = useTranslation()\n    const { enqueueSnackbar } = useSnackbar()\n    const [cursor, setCursor] = useState('')\n    const cursorStyle = {\n        cursor: cursor,\n    }\n\n    const onDrop = useCallback((acceptedFiles) => {\n        if (acceptedFiles.length === 1) {\n            handleVerify(acceptedFiles)\n        } else if (acceptedFiles.length > 1) {\n            enqueueSnackbar(`${t('You can only upload one file')}`, {\n                variant: 'warning',\n            })\n        }\n    }, [])\n\n    const maxSize = Number(process.env.REACT_APP_UPLOAD_MAX_SIZE) * 1024 * 1024\n\n    const onDropRejected = () => {\n        enqueueSnackbar(\n            `${i18next.t('Maximum file upload size is {{maxSize}}', { maxSize: toHumanReadableFileSize(maxSize) })}`,\n            {\n                variant: 'warning',\n            },\n        )\n    }\n\n    const { getRootProps, getInputProps, acceptedFiles } = useDropzone({ onDrop, onDropRejected, maxSize })\n\n    return (\n        <>\n            <Box\n                mt={2}\n                style={cursorStyle}\n                onMouseOver={() => {\n                    setCursor('pointer')\n                }}\n                onMouseLeave={() => {\n                    setCursor('')\n                }}\n            >\n                <div {...getRootProps()}>\n                    <input id=\"proof-uploader\" data-testid=\"proof-uploader\" {...getInputProps()} multiple={false} />\n                    {\n                        <Box\n                            sx={{\n                                height: 250,\n                                backgroundColor: 'background.uploader',\n                                textAlign: 'center',\n                                color: 'text.secondary',\n                                display: 'flex',\n                                flexDirection: 'column',\n                                alignItems: 'center',\n                                justifyContent: 'center',\n                                borderRadius: 1,\n                            }}\n                        >\n                            <Box py={1}>\n                                <img width=\"55\" alt=\"fingerPrint\" src={FingerPrint} />\n                            </Box>\n                            <Typography variant=\"body1\" sx={{ color: 'fingerPrint.main', fontWeight: 'bold' }}>\n                                {t('Choose Your Off-chain Proof to Upload')}\n                            </Typography>\n                        </Box>\n                    }\n                </div>\n            </Box>\n            {detailData && acceptedFiles.length === 1 && (\n                <Box mt={3} mb={3}>\n                    <Typography sx={{ color: 'common.white' }} component={'div'} variant=\"h6\">\n                        {t('Uploaded Off-chain Proof')}\n                    </Typography>\n                    <UploadedInfoAlert uploadedFiles={acceptedFiles} />\n                </Box>\n            )}\n        </>\n    )\n}\n\nUploadSection.propTypes = {\n    detailData: PropTypes.object,\n    handleVerify: PropTypes.func.isRequired,\n}\n\nexport default UploadSection\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport i18next from 'i18next'\nimport { useTranslation } from 'react-i18next'\nimport { useSnackbar } from 'notistack'\nimport { Typography, Box, Button } from '@mui/material'\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload'\nimport UploadedInfoAlert from '../../../common/UploadedInfoAlert'\nimport { toHumanReadableFileSize } from '../../../../util/stringUtil'\n\nconst RwdUploadSection = ({ handleVerify }) => {\n    const { t } = useTranslation()\n    const { enqueueSnackbar } = useSnackbar()\n    const [proofFile, setProofFile] = useState([])\n    const [isVerify, setIsVerify] = useState(false)\n    const maxSize = Number(process.env.REACT_APP_UPLOAD_MAX_SIZE) * 1024 * 1024\n\n    const onProofUpload = (event) => {\n        const uploadProof = event.target.files[0]\n        console.log('uploadProof=', uploadProof)\n\n        if (\n            uploadProof.name.slice(uploadProof.name.lastIndexOf('.')) === '.json' ||\n            uploadProof.name.slice(uploadProof.name.lastIndexOf('.')) === '.itm'\n        ) {\n            if (uploadProof.size <= maxSize) {\n                setProofFile([uploadProof])\n            } else {\n                enqueueSnackbar(\n                    `${i18next.t('Maximum file upload size is {{maxSize}}', {\n                        maxSize: toHumanReadableFileSize(maxSize),\n                    })}`,\n                    {\n                        variant: 'warning',\n                    },\n                )\n            }\n        } else {\n            enqueueSnackbar(`${t('Upload off-chain proof file name extension need to be .json or .itm')}`, {\n                variant: 'warning',\n            })\n        }\n    }\n\n    const onVerifyClick = () => {\n        handleVerify(proofFile)\n        setIsVerify(true)\n    }\n\n    const handleReset = () => {\n        setIsVerify(false)\n        setProofFile([])\n    }\n\n    return (\n        <>\n            <Typography sx={{ color: 'common.white' }} variant=\"body1\">\n                {t('Upload Off-chain Proof')}\n            </Typography>\n            <Button\n                id=\"upload-button\"\n                variant=\"contained\"\n                component=\"label\"\n                color=\"primary\"\n                startIcon={<CloudUploadIcon />}\n                disabled={isVerify}\n                sx={{ mt: 1 }}\n            >\n                {t('Upload')}\n                <input\n                    style={{ display: 'none' }}\n                    id=\"upload-input\"\n                    data-testid=\"upload-input\"\n                    type=\"file\"\n                    onChange={onProofUpload}\n                />\n            </Button>\n            {proofFile[0] && <UploadedInfoAlert uploadedFiles={proofFile} />}\n            <Box mt={2}>\n                <Typography sx={{ color: 'common.white' }} variant=\"body1\">\n                    {t('Verify')}\n                </Typography>\n                <Box display=\"flex\" alignItems=\"center\">\n                    <Button\n                        id=\"verify-btn\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={isVerify ? handleReset : onVerifyClick}\n                        disabled={!proofFile[0]}\n                        sx={{ mt: 1 }}\n                    >\n                        {isVerify ? t('Reupload') : t('Verify')}\n                    </Button>\n                </Box>\n            </Box>\n        </>\n    )\n}\n\nRwdUploadSection.propTypes = {\n    handleVerify: PropTypes.func.isRequired,\n}\n\nexport default RwdUploadSection\n","export default __webpack_public_path__ + \"static/media/remove.1464fcb3.svg\";","export default __webpack_public_path__ + \"static/media/plus.fc0dc662.svg\";","export default __webpack_public_path__ + \"static/media/modify.a7cd9f8b.svg\";","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useTranslation } from 'react-i18next'\nimport { Typography, Box, Tooltip } from '@mui/material'\nimport CheckIcon from '@mui/icons-material/Check'\nimport CloseIcon from '@mui/icons-material/Close'\n// TODO replace img with mui icon\nimport RemoveIcon from '../../img/remove.svg'\nimport AddIcon from '../../img/plus.svg'\nimport Modify from '../../img/modify.svg'\n\nconst VerifyStatus = ({ status, iconOnly }) => {\n    const { t } = useTranslation()\n\n    return (\n        <>\n            {status === 'PASS' &&\n                (iconOnly ? (\n                    <Tooltip title={t('Pass')} placement=\"right\">\n                        <CheckIcon sx={{ color: 'success.main', fontSize: '1.8rem' }} />\n                    </Tooltip>\n                ) : (\n                    <Box display=\"flex\" alignItems=\"center\">\n                        <CheckIcon sx={{ color: 'success.main' }} />\n                        <Typography variant=\"body2\" sx={{ ml: 0.5 }}>\n                            {t('Pass')}\n                        </Typography>\n                    </Box>\n                ))}\n            {status === 'CLEARANCE_RECORD_ERROR' &&\n                (iconOnly ? (\n                    <Tooltip title={t('Clearance record error')} placement=\"right\">\n                        <CloseIcon sx={{ color: 'error.main', fontSize: '1.8rem' }} />\n                    </Tooltip>\n                ) : (\n                    <Box display=\"flex\" alignItems=\"center\">\n                        <CloseIcon sx={{ color: 'error.main' }} />\n                        <Typography variant=\"body2\" sx={{}}>\n                            {t('Clearance record error')}\n                        </Typography>\n                    </Box>\n                ))}\n            {/* TODO check for the status below */}\n            {status === 'REMOVED' && (\n                <Tooltip title={t('Removed')} placement=\"right\">\n                    <img width=\"30\" alt=\"remove\" src={RemoveIcon} />\n                </Tooltip>\n            )}\n            {status === 'ADDED' && (\n                <Tooltip title={t('Added')} placement=\"right\">\n                    <img width=\"30\" alt=\"add\" src={AddIcon} />\n                </Tooltip>\n            )}\n            {status === 'MODIFIED' && (\n                <Tooltip title={t('Modified')} placement=\"right\">\n                    <img height=\"30\" alt=\"result\" src={Modify} />\n                </Tooltip>\n            )}\n        </>\n    )\n}\n\nVerifyStatus.propTypes = {\n    status: PropTypes.string.isRequired,\n    iconOnly: PropTypes.bool.isRequired,\n}\n\nexport default VerifyStatus\n","import React from 'react'\nimport { useTranslation } from 'react-i18next'\nimport PropTypes from 'prop-types'\nimport { v4 as uuidv4 } from 'uuid'\nimport { TableRow, Tooltip, Box, Typography, Hidden, TableCell } from '@mui/material'\nimport { styled } from '@mui/material/styles'\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle'\nimport ErrorCircleIcon from '@mui/icons-material/Error'\nimport { ExistenceType } from '../../../constants/ExistenceType'\nimport { renderTime, renderCertificatedName } from '../../../util/stringUtil'\nimport VerifyStatus from '../VerifyStatus'\n\nconst CustomCell = styled(TableCell)(({ theme }) => ({\n    minWidth: 70,\n    [theme.breakpoints.down('lg')]: {\n        width: 120,\n    },\n    [theme.breakpoints.down('md')]: {\n        minWidth: 45,\n    },\n    [theme.breakpoints.down('sm')]: {\n        width: '80%',\n    },\n}))\n\nconst DataRow = ({ data, renderMoreInfo, renderClearanceOrder, renderShortIndexValue }) => {\n    const { t } = useTranslation()\n\n    const renderLimitLengthValue = (value) => {\n        return (\n            <>\n                <Hidden lgDown>\n                    <CustomCell align=\"left\">{value}</CustomCell>\n                </Hidden>\n                <Hidden only={['xs', 'sm', 'lg', 'xl']}>\n                    <CustomCell align=\"left\">\n                        <Tooltip title={value} placement=\"bottom\">\n                            <span>{`${value.substr(0, 5)}...${value.substr(value.length - 5)}`}</span>\n                        </Tooltip>\n                    </CustomCell>\n                </Hidden>\n                <Hidden only={['md', 'lg', 'xl']}>\n                    <CustomCell align=\"left\">\n                        <Tooltip title={value} placement=\"bottom\">\n                            <span>{`${value.substr(0, 3)}...${value.substr(value.length - 3)}`}</span>\n                        </Tooltip>\n                    </CustomCell>\n                </Hidden>\n            </>\n        )\n    }\n\n    return (\n        <TableRow id=\"verify-list-result-row\" key={uuidv4()}>\n            <CustomCell align=\"left\">\n                <Hidden only={['xs']}>\n                    <Typography variant=\"body2\">\n                        {data.existenceType === ExistenceType.EXIST && renderTime(data.receiptTimestamp)}\n                    </Typography>\n                </Hidden>\n                <Hidden smUp>\n                    <Typography variant=\"body2\">\n                        {data.existenceType === ExistenceType.EXIST && renderTime(data.receiptTimestamp)}\n                    </Typography>\n                    {renderShortIndexValue && (\n                        <Typography variant=\"body2\" sx={{ mt: 1 }}>\n                            {renderClearanceOrder(data)} / {renderShortIndexValue(data.indexValue)}\n                        </Typography>\n                    )}\n                </Hidden>\n            </CustomCell>\n            <Hidden lgDown>\n                <CustomCell align=\"left\">\n                    {data.existenceType === ExistenceType.EXIST && (\n                        <Box display=\"flex\" alignItems=\"center\">\n                            {data.certification ? t('Certified') : t('Not Certified')}\n                            {data.certification ? (\n                                <Tooltip title={renderCertificatedName(data.certification)} placement=\"right\">\n                                    <CheckCircleIcon\n                                        fontSize=\"small\"\n                                        color=\"primary\"\n                                        sx={{ color: 'primary.main', ml: 1 }}\n                                    />\n                                </Tooltip>\n                            ) : (\n                                <ErrorCircleIcon fontSize=\"small\" sx={{ color: 'text.hint', ml: 1 }} />\n                            )}\n                        </Box>\n                    )}\n                </CustomCell>\n            </Hidden>\n            <Hidden only={['xs']}>\n                <CustomCell align=\"left\">{renderClearanceOrder(data)}</CustomCell>\n                {renderLimitLengthValue(data.indexValue)}\n            </Hidden>\n            <CustomCell align=\"center\">\n                <VerifyStatus status={data.proofExistStatus} iconOnly={true} />\n            </CustomCell>\n            <CustomCell align=\"center\">{renderMoreInfo(data)}</CustomCell>\n        </TableRow>\n    )\n}\n\nDataRow.propTypes = {\n    data: PropTypes.object.isRequired,\n    renderMoreInfo: PropTypes.func.isRequired,\n    renderClearanceOrder: PropTypes.func.isRequired,\n    renderShortIndexValue: PropTypes.func,\n}\n\nexport default DataRow\n","import React, { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport PropTypes from 'prop-types'\nimport { v4 as uuidv4 } from 'uuid'\nimport { useMediaQuery, TableRow, Box, Button, Typography, Hidden, Tooltip, TableCell } from '@mui/material'\nimport UnfoldMoreIcon from '@mui/icons-material/UnfoldMore'\nimport UnfoldLessIcon from '@mui/icons-material/UnfoldLess'\nimport VerifyStatus from '../VerifyStatus'\nimport theme from '../../../theme/Theme'\n\nconst CollapseRow = ({ dataArr, renderMoreInfo, renderClearanceOrder, renderShortIndexValue, hideBottomBorder }) => {\n    const [expand, setExpand] = useState(false)\n    const { t } = useTranslation()\n    const isMdDown = useMediaQuery((theme) => theme.breakpoints.down('lg'))\n\n    const handleHiddenRowExpand = () => {\n        setExpand((prev) => !prev)\n    }\n\n    const renderLimitLengthValue = (value) => {\n        if (value === '') {\n            return <TableCell align=\"left\">N/A</TableCell>\n        } else {\n            return (\n                <>\n                    <Hidden lgDown>\n                        <TableCell align=\"left\">{value}</TableCell>\n                    </Hidden>\n                    <Hidden only={['xs', 'sm', 'lg', 'xl']}>\n                        <TableCell align=\"left\">\n                            <Tooltip title={value} placement=\"bottom\">\n                                <span>{`${value.substr(0, 5)}...${value.substr(value.length - 5)}`}</span>\n                            </Tooltip>\n                        </TableCell>\n                    </Hidden>\n                    <Hidden only={['md', 'lg', 'xl']}>\n                        <TableCell align=\"left\">\n                            <Tooltip title={value} placement=\"bottom\">\n                                <span>{`${value.substr(0, 3)}...${value.substr(value.length - 3)}`}</span>\n                            </Tooltip>\n                        </TableCell>\n                    </Hidden>\n                </>\n            )\n        }\n    }\n\n    // FIXME refactor border logic\n    return (\n        <>\n            <TableRow id=\"expand-hidden-row\" key={uuidv4()}>\n                <TableCell\n                    align=\"left\"\n                    colSpan={12}\n                    sx={\n                        hideBottomBorder\n                            ? {\n                                  padding: 0,\n                                  borderBottom: (expand) => (expand ? `1px solid ${theme.palette.grey[300]}` : 'none'),\n                              }\n                            : { p: 0 }\n                    }\n                >\n                    <Box display=\"flex\">\n                        <Button\n                            startIcon={\n                                expand ? <UnfoldLessIcon fontSize=\"small\" /> : <UnfoldMoreIcon fontSize=\"small\" />\n                            }\n                            sx={{\n                                flexGrow: 1,\n                                justifyContent: 'flex-start',\n                                color: 'text.hint',\n                                backgroundColor: theme.palette.grey[100],\n                                '&:hover': { backgroundColor: theme.palette.grey[200] },\n                                textTransform: 'none',\n                            }}\n                            onClick={handleHiddenRowExpand}\n                        >\n                            {expand ? t('Hide verify data hint') : t('Show hidden verify data hint')}\n                        </Button>\n                    </Box>\n                </TableCell>\n            </TableRow>\n            {dataArr &&\n                dataArr.map((data, index) => (\n                    <React.Fragment key={`collapse-row-${index}`}>\n                        {expand && (\n                            <TableRow sx={{ backgroundColor: theme.palette.grey[100] }}>\n                                <TableCell align=\"left\" size=\"small\" colSpan={isMdDown ? 1 : 2}>\n                                    <Typography variant=\"body2\">{t('End of record proof')}</Typography>\n                                    <Hidden smUp>\n                                        {renderShortIndexValue && data.clearanceOrder !== -1 && (\n                                            <Typography variant=\"body2\">\n                                                {renderClearanceOrder(data)} / {renderShortIndexValue(data.indexValue)}\n                                            </Typography>\n                                        )}\n                                    </Hidden>\n                                </TableCell>\n                                <Hidden only={['xs']}>\n                                    <TableCell align=\"left\" size=\"small\">\n                                        {renderClearanceOrder(data)}\n                                    </TableCell>\n                                    {renderLimitLengthValue(data.indexValue)}\n                                </Hidden>\n                                <TableCell align=\"center\" size=\"small\">\n                                    <VerifyStatus status={data.proofExistStatus} iconOnly={true} />\n                                </TableCell>\n                                <TableCell align=\"center\" size=\"small\">\n                                    {renderMoreInfo(data)}\n                                </TableCell>\n                            </TableRow>\n                        )}\n                    </React.Fragment>\n                ))}\n        </>\n    )\n}\n\nCollapseRow.propTypes = {\n    dataArr: PropTypes.array.isRequired,\n    renderMoreInfo: PropTypes.func.isRequired,\n    renderClearanceOrder: PropTypes.func.isRequired,\n    renderShortIndexValue: PropTypes.func,\n    hideBottomBorder: PropTypes.bool,\n}\n\nexport default CollapseRow\n","import { getSn } from './stringUtil'\n\nconst proofDetailSortAscFunction = (value1, value2) => {\n    let result\n    result = value1.clearanceOrder - value2.clearanceOrder\n    if (result !== 0) {\n        return result\n    }\n\n    const sn1 = getSn(value1.indexValue)\n    const sn2 = getSn(value2.indexValue)\n    return sn1 - sn2\n}\n\nconst proofDetailSortDescFunction = (value1, value2) => {\n    let result\n    result = value2.clearanceOrder - value1.clearanceOrder\n    if (result !== 0) {\n        return result\n    }\n\n    const sn1 = getSn(value1.indexValue)\n    const sn2 = getSn(value2.indexValue)\n    return sn2 - sn1\n}\n\nexport { proofDetailSortAscFunction, proofDetailSortDescFunction }\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTranslation } from 'react-i18next'\nimport {\n    Typography,\n    TableContainer,\n    TableHead,\n    Table,\n    TableRow,\n    TableBody,\n    Paper,\n    Tooltip,\n    IconButton,\n    TableCell,\n    Hidden,\n    Box,\n    Modal,\n} from '@mui/material'\nimport { styled } from '@mui/material/styles'\nimport SearchIcon from '@mui/icons-material/Search'\nimport CloseIcon from '@mui/icons-material/Close'\nimport DataRow from '../../common/VerifyListTableRow/DataRow'\nimport CollapseRow from '../../common/VerifyListTableRow/CollapseRow'\nimport { arrangeRowDataList } from '../../../util/verifyListTableDataUtil'\nimport { getTxHashBaseUrl } from '../../../util/stringUtil'\nimport { proofDetailSortAscFunction } from '../../../util/sortUtil'\n\nconst CustomCell = styled(TableCell)(({ theme }) => ({\n    minWidth: 70,\n    [theme.breakpoints.down('lg')]: {\n        width: 120,\n    },\n    [theme.breakpoints.down('md')]: {\n        minWidth: 45,\n    },\n    [theme.breakpoints.down('sm')]: {\n        width: '80%',\n    },\n}))\n\nconst VerifyListModal = ({ detailData, modalOpen, handleMoreInfoModalOpen, handleVerifyListModalClose }) => {\n    const { t } = useTranslation()\n    const txHashBaseUrl = getTxHashBaseUrl(detailData.evmEnv)\n\n    const renderClearanceOrder = (data) => {\n        return data.txHash !== null ? (\n            <Tooltip title={t('proof.verification.detail.help_clearance_order')} placement=\"bottom-start\">\n                <Typography\n                    id=\"row-co-link\"\n                    component=\"a\"\n                    variant=\"body2\"\n                    href={`${txHashBaseUrl}/${data.txHash}`}\n                    sx={{ color: 'primary.main', textDecoration: 'none' }}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    {data.clearanceOrder}\n                </Typography>\n            </Tooltip>\n        ) : (\n            <>{data.clearanceOrder}</>\n        )\n    }\n\n    const renderMoreInfo = (data) => {\n        return (\n            data.proofExistStatus !== 'REMOVED' && (\n                <IconButton onClick={() => handleMoreInfoModalOpen(data)} size=\"large\">\n                    <SearchIcon />\n                </IconButton>\n            )\n        )\n    }\n\n    const renderShortIndexValue = (value) => {\n        return value.substr(value.length - 2)\n    }\n\n    const [rowList, setRowList] = useState([])\n\n    useEffect(() => {\n        if (detailData.proofDetailList && detailData.proofDetailList.length > 0) {\n            detailData.proofDetailList.sort(proofDetailSortAscFunction)\n\n            setRowList(arrangeRowDataList(detailData.proofDetailList))\n        }\n    }, [detailData])\n\n    return (\n        <Modal open={modalOpen} onClose={handleVerifyListModalClose}>\n            <Box\n                sx={{\n                    backgroundColor: 'background.main',\n                    position: 'absolute',\n                    overflowY: 'auto',\n                    boxShadow: 5,\n                    p: 3,\n                    pb: 4,\n                    top: '50%',\n                    left: '50%',\n                    transform: 'translate(-50%, -50%)',\n                    maxHeight: { xs: '85%', md: '75%' },\n                    width: { xs: '80%', md: '60%', lg: '80%' },\n                    maxWidth: 950,\n                }}\n            >\n                <Box mb={2} display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                    <Typography variant=\"h6\" color=\"textPrimary\" sx={{ color: 'common.white' }}>\n                        {t('Blockchain Verify List')}\n                    </Typography>\n                    <IconButton\n                        sx={{ color: 'common.white' }}\n                        aria-label=\"close-modal\"\n                        onClick={handleVerifyListModalClose}\n                        size=\"large\"\n                    >\n                        <CloseIcon />\n                    </IconButton>\n                </Box>\n                <TableContainer component={Paper}>\n                    <Table id=\"verify-list-table\" stickyHeader aria-label=\"sticky table\">\n                        <TableHead>\n                            {\n                                <Hidden only={['xs']}>\n                                    <TableRow id=\"proof-verification-header-row\">\n                                        <TableCell>\n                                            <Typography variant=\"body2\">{t('Attestation Time')}</Typography>\n                                        </TableCell>\n                                        <Hidden lgDown>\n                                            <TableCell>\n                                                <Typography variant=\"body2\" sx={{ mt: 1 }}>\n                                                    {t('Attester Certificated Info')}\n                                                </Typography>\n                                            </TableCell>\n                                        </Hidden>\n                                        <TableCell>\n                                            <Typography variant=\"body2\">{t('Blockchain Detail')}</Typography>\n                                        </TableCell>\n                                        <TableCell>\n                                            <Typography variant=\"body2\">{'Index Value'}</Typography>\n                                        </TableCell>\n                                        <TableCell align=\"center\">\n                                            <Typography variant=\"body2\">{t('Status')}</Typography>\n                                        </TableCell>\n                                        <TableCell align=\"center\">\n                                            <Typography variant=\"body2\">{t('More Info')}</Typography>\n                                        </TableCell>\n                                    </TableRow>\n                                </Hidden>\n                            }\n                            {\n                                <Hidden only={['sm', 'md', 'lg', 'xl']}>\n                                    <TableRow id=\"verify-list-header-row\">\n                                        <CustomCell align=\"left\">\n                                            <Typography variant=\"body2\">{t('Attestation Time')}</Typography>\n                                            <Typography variant=\"body2\" sx={{ mt: 1 }}>\n                                                CO / SN\n                                            </Typography>\n                                        </CustomCell>\n                                        <CustomCell align=\"center\">{t('Status')}</CustomCell>\n                                        <CustomCell align=\"center\">{t('More Info')}</CustomCell>\n                                    </TableRow>\n                                </Hidden>\n                            }\n                        </TableHead>\n                        <TableBody>\n                            {rowList.map(({ collapse, dataList }, index) => {\n                                return (\n                                    <React.Fragment key={`verify-list-row-${index}`}>\n                                        {collapse && (\n                                            <CollapseRow\n                                                dataArr={dataList}\n                                                renderMoreInfo={renderMoreInfo}\n                                                renderClearanceOrder={renderClearanceOrder}\n                                                hideBottomBorder={index === rowList.length - 1}\n                                                renderShortIndexValue={renderShortIndexValue}\n                                            />\n                                        )}\n                                        {!collapse &&\n                                            dataList.map((singleRowData, index) => (\n                                                <DataRow\n                                                    key={`data-row-${index}`}\n                                                    data={singleRowData}\n                                                    renderMoreInfo={renderMoreInfo}\n                                                    renderClearanceOrder={renderClearanceOrder}\n                                                    renderShortIndexValue={renderShortIndexValue}\n                                                />\n                                            ))}\n                                    </React.Fragment>\n                                )\n                            })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>{' '}\n            </Box>\n        </Modal>\n    )\n}\n\nVerifyListModal.propTypes = {\n    detailData: PropTypes.object.isRequired,\n    modalOpen: PropTypes.bool.isRequired,\n    handleMoreInfoModalOpen: PropTypes.func.isRequired,\n    handleVerifyListModalClose: PropTypes.func.isRequired,\n}\n\nexport default VerifyListModal\n","import { ExistenceType } from '../constants/ExistenceType'\n\nexport const arrangeRowDataList = (proofDetailList) => {\n    var rowList = []\n    // each element\n    // {\n    //     collapse: false,\n    //     dataList:[]\n    // }\n    var currentList = []\n    var collapse = false\n    proofDetailList.forEach((data, index) => {\n        if (index === 0) {\n            if (data.existenceType === ExistenceType.EXIST) {\n                collapse = false\n            } else {\n                collapse = true\n            }\n            currentList.push(data)\n        } else {\n            // 若跟前一筆資料一樣，則繼續append\n            if (data.existenceType === proofDetailList[index - 1].existenceType) {\n                currentList.push(data)\n            } else {\n                // 若不一樣，則將currentList新增至rowList，並且重置currentList與collapse狀態\n                rowList.push({\n                    collapse: collapse,\n                    dataList: currentList,\n                })\n                currentList = []\n                currentList.push(data)\n                if (data.existenceType === ExistenceType.EXIST) {\n                    collapse = false\n                } else {\n                    collapse = true\n                }\n            }\n        }\n    })\n    //都跑完之後, 檢查最後的清單剩餘項目\n    rowList.push({\n        collapse: collapse,\n        dataList: currentList,\n    })\n    return rowList\n}\n","import React from 'react'\nimport { useTranslation } from 'react-i18next'\nimport PropTypes from 'prop-types'\nimport { Box, Modal, Typography, Tooltip, IconButton, List, ListItem } from '@mui/material'\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle'\nimport ErrorCircleIcon from '@mui/icons-material/Error'\nimport CloseRoundedIcon from '@mui/icons-material/CloseRounded'\nimport VerifyStatus from '../../common/VerifyStatus'\nimport { ExistenceType } from '../../../constants/ExistenceType'\nimport {\n    renderTime,\n    renderExistence,\n    renderAttesterAddress,\n    renderCmd,\n    renderCertificatedName,\n} from '../../../util/stringUtil'\nimport theme from '../../../theme/Theme'\n\nconst contentTypo = { mt: 1, wordBreak: 'break-all' }\nconst listItem = {\n    borderBottom: `1px solid ${theme.palette.grey[300]}`,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n}\nconst noBorderBottomListItem = {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n}\n\nconst MoreInfoModal = ({ moreInfo, moreInfoModalOpen, onClose }) => {\n    const { t } = useTranslation()\n\n    return (\n        <Modal id=\"more-info-modal\" open={moreInfoModalOpen} onClose={onClose}>\n            <Box\n                sx={{\n                    top: '50%',\n                    left: '50%',\n                    transform: 'translate(-50%, -50%)',\n                    backgroundColor: 'background.main',\n                    position: 'absolute',\n                    overflowY: 'auto',\n                    boxShadow: 5,\n                    p: 3,\n                    pb: 4,\n                    maxHeight: { xs: '80%', md: '75%', lg: '80%' },\n                    width: { xs: '80%', sm: '70%', md: '60%' },\n                    maxWidth: { lg: 900 },\n                }}\n            >\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                    <Typography variant=\"h6\" color=\"textPrimary\" sx={{ color: 'common.white' }}>\n                        {t('More Info')}\n                    </Typography>\n                    <IconButton onClick={onClose} size=\"large\">\n                        <CloseRoundedIcon sx={{ color: 'common.white' }} />\n                    </IconButton>\n                </Box>\n                <List sx={{ backgroundColor: 'common.white', borderRadius: 2, mt: 1 }}>\n                    <ListItem sx={listItem} id=\"blockchain-detail-row\">\n                        <Typography variant=\"body2\">{t('Blockchain Detail')}</Typography>\n                        {moreInfo.txHash !== null ? (\n                            <Tooltip\n                                title={t('proof.verification.detail.help_clearance_order')}\n                                placement=\"bottom-start\"\n                                sx={contentTypo}\n                            >\n                                <Typography\n                                    id=\"more-info-co-link\"\n                                    component=\"a\"\n                                    variant=\"body2\"\n                                    href={`${moreInfo.txHashBaseUrl}/${moreInfo.txHash}`}\n                                    sx={{ color: 'primary.main', textDecoration: 'none' }}\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    {moreInfo.clearanceOrder}\n                                </Typography>\n                            </Tooltip>\n                        ) : (\n                            <Typography variant=\"body2\" sx={contentTypo}>\n                                {moreInfo.clearanceOrder}\n                            </Typography>\n                        )}\n                    </ListItem>\n                    <ListItem sx={listItem} id=\"index-value-row\">\n                        <Typography variant=\"body2\">Index Value</Typography>\n                        <Typography variant=\"body2\" sx={contentTypo}>\n                            {moreInfo.indexValue}\n                        </Typography>\n                    </ListItem>\n                    <ListItem sx={listItem} id=\"existence-row\">\n                        <Typography variant=\"body2\">{t('Existence')}</Typography>\n                        <Typography variant=\"body2\" sx={contentTypo}>\n                            {renderExistence(moreInfo.existenceType)}\n                        </Typography>\n                    </ListItem>\n                    <ListItem\n                        sx={moreInfo.existenceType === ExistenceType.EXIST ? listItem : noBorderBottomListItem}\n                        id=\"verify-status-row\"\n                    >\n                        <Typography variant=\"body2\">{t('Status')}</Typography>\n                        <Box sx={contentTypo}>\n                            <VerifyStatus status={moreInfo.proofExistStatus} iconOnly={false} />\n                        </Box>\n                    </ListItem>\n                    {moreInfo.existenceType === ExistenceType.EXIST && (\n                        <>\n                            <ListItem sx={listItem} id=\"attestation-time-row\">\n                                <Typography variant=\"body2\">{t('Attestation Time')}</Typography>\n                                <Typography variant=\"body2\" sx={contentTypo}>\n                                    {renderTime(moreInfo.receiptTimestamp)}\n                                </Typography>\n                            </ListItem>\n                            {moreInfo.merkleProofRootHash !== null && (\n                                <ListItem sx={listItem} id=\"root-hash-row\">\n                                    <Typography variant=\"body2\">Root Hash</Typography>\n                                    <Typography variant=\"body2\" sx={contentTypo}>\n                                        {moreInfo.merkleProofRootHash}\n                                    </Typography>\n                                </ListItem>\n                            )}\n                            <ListItem sx={listItem} id=\"attester-wallet-address-row\">\n                                <Typography variant=\"body2\">{t('Attester Wallet Address')}</Typography>\n                                <Typography variant=\"body2\" sx={contentTypo}>\n                                    {renderAttesterAddress(moreInfo)}\n                                </Typography>\n                            </ListItem>\n                            <ListItem sx={listItem} id=\"attester-certificated-info-row\">\n                                <Typography variant=\"body2\">{t('Attester Certificated Info')}</Typography>\n                                <Box display=\"flex\" alignItems=\"center\" sx={contentTypo}>\n                                    <Typography variant=\"body2\">\n                                        {moreInfo.certification\n                                            ? renderCertificatedName(moreInfo.certification)\n                                            : t('Not Certified')}\n                                    </Typography>\n                                    {moreInfo.certification ? (\n                                        <CheckCircleIcon fontSize=\"small\" color=\"primary\" sx={{ ml: 1 }} />\n                                    ) : (\n                                        <ErrorCircleIcon fontSize=\"small\" sx={{ color: 'text.hint', ml: 1 }} />\n                                    )}\n                                </Box>\n                            </ListItem>\n                            <ListItem\n                                sx={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}\n                                id=\"attested-fields-row\"\n                            >\n                                <Typography variant=\"body2\">{t('Attested Fields')}</Typography>\n                                <Typography\n                                    variant=\"body2\"\n                                    sx={{ whiteSpace: 'pre-wrap', wordBreak: 'break-all', mt: 1 }}\n                                >\n                                    {renderCmd(moreInfo.cmd)}\n                                </Typography>\n                            </ListItem>\n                        </>\n                    )}\n                </List>\n            </Box>\n        </Modal>\n    )\n}\n\nMoreInfoModal.propTypes = {\n    moreInfo: PropTypes.object.isRequired,\n    moreInfoModalOpen: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n}\n\nexport default MoreInfoModal\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTranslation } from 'react-i18next'\nimport {\n    Box,\n    Typography,\n    Tooltip,\n    TableContainer,\n    Table,\n    TableRow,\n    TableCell,\n    TableBody,\n    Paper,\n    Hidden,\n    IconButton,\n    Collapse,\n    Button,\n} from '@mui/material'\nimport HelpIcon from '@mui/icons-material/Help'\nimport CheckIcon from '@mui/icons-material/Check'\nimport CloseIcon from '@mui/icons-material/Close'\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\nimport VerifyListModal from './VerifyListModal'\nimport MoreInfoModal from './MoreInfoModal'\nimport { getContractAddressUrl, renderTime, getTxHashBaseUrl } from '../../../util/stringUtil'\n\nconst contentTypo = { mt: 1, wordBreak: 'break-all' }\nconst titleCell = { minWidth: '70px' }\nconst contentCell = { wordBreak: 'break-all' }\n\nconst VerifyDetailTable = ({ detailData }) => {\n    const { t } = useTranslation()\n    const [detailExpand, setDetailExpand] = useState(true)\n    const [modalOpen, setModalOpen] = useState(false)\n    const [moreInfo, setMoreInfo] = useState({})\n    const [moreInfoModalOpen, setMoreInfoModalOpen] = useState(false)\n\n    const contractAddressUrl = getContractAddressUrl(detailData.evmEnv, detailData.contractAddress)\n\n    const renderResult = (result, verifyResultDescription) => {\n        if (result === 'PASS') {\n            return (\n                <>\n                    <CheckIcon sx={{ color: 'success.main' }} data-testid=\"CheckIcon\" />\n                    <Typography variant=\"body2\" sx={{ ml: 1 }}>\n                        {t(`${verifyResultDescription}`)}\n                    </Typography>\n                </>\n            )\n        } else {\n            return (\n                <>\n                    <CloseIcon sx={{ color: 'error.main' }} data-testid=\"CloseIcon\" />\n                    <Typography variant=\"body2\" sx={{ ml: 1 }}>\n                        {t(`${verifyResultDescription}`)}\n                    </Typography>\n                </>\n            )\n        }\n    }\n\n    const handleVerifyListModalOpen = () => {\n        setModalOpen(true)\n    }\n\n    const handleVerifyListModalClose = () => {\n        setModalOpen(false)\n    }\n\n    const handleMoreInfoModalOpen = (data) => {\n        setMoreInfoModalOpen(true)\n        const txHashBaseUrl = getTxHashBaseUrl(detailData.evmEnv)\n        setMoreInfo({ ...data, txHashBaseUrl })\n    }\n\n    const handleMoreInfoModalClose = () => {\n        setMoreInfoModalOpen(false)\n    }\n\n    return (\n        <>\n            <Box display=\"flex\" alignItems=\"center\" mb={2}>\n                <Typography variant=\"h6\" color=\"textPrimary\" sx={{ color: 'common.white' }}>\n                    {t('Blockchain Verify Detail')}\n                </Typography>\n                <IconButton\n                    size=\"small\"\n                    sx={{ color: 'common.white' }}\n                    aria-label=\"expand-detail\"\n                    onClick={() => setDetailExpand((prev) => !prev)}\n                >\n                    {detailExpand ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n                </IconButton>\n            </Box>\n            <Collapse data-testid=\"detail-collapse\" in={detailExpand} timeout=\"auto\" unmountOnExit>\n                <Paper>\n                    <TableContainer component={Paper}>\n                        <Table id=\"verify-detail-table\">\n                            <TableBody>\n                                <Hidden only={['xs']}>\n                                    <TableRow id=\"off-chain-proof-row\">\n                                        <TableCell align=\"left\" sx={titleCell}>\n                                            {t('Off-chain Proof')}\n                                        </TableCell>\n                                        <TableCell align=\"left\" sx={contentCell}>\n                                            {detailData.proofFileName}\n                                        </TableCell>\n                                    </TableRow>\n                                    <TableRow id=\"verify-time-row\">\n                                        <TableCell align=\"left\" sx={titleCell}>\n                                            {t('Upload Time')}\n                                        </TableCell>\n                                        <TableCell align=\"left\" sx={contentCell}>\n                                            {renderTime(detailData.uploadTimestamp)}\n                                        </TableCell>\n                                    </TableRow>\n                                    <TableRow id=\"contract-address-row\">\n                                        <TableCell align=\"left\" sx={titleCell}>\n                                            {t('Contract Address')}\n                                        </TableCell>\n                                        <TableCell align=\"left\" sx={contentCell}>\n                                            <Box display=\"flex\" alignItems=\"center\">\n                                                <Typography\n                                                    component=\"a\"\n                                                    variant=\"body2\"\n                                                    href={contractAddressUrl}\n                                                    target=\"_blank\"\n                                                    rel=\"noopener noreferrer\"\n                                                    sx={{\n                                                        color: 'primary.main',\n                                                        textDecoration: 'none',\n                                                        mr: 1,\n                                                        wordBreak: 'break-all',\n                                                    }}\n                                                >\n                                                    {detailData.contractAddress}\n                                                </Typography>\n                                                <Tooltip\n                                                    title={t('proof.verification.detail.help_contract_address')}\n                                                    placement=\"right\"\n                                                    aria-label=\"contractAddress\"\n                                                >\n                                                    <HelpIcon fontSize=\"small\" color=\"primary\" />\n                                                </Tooltip>\n                                            </Box>\n                                        </TableCell>\n                                    </TableRow>\n                                    {detailData.verifyResultDescription !== 'Contract connection error' && (\n                                        <TableRow id=\"existence-status-row\">\n                                            <TableCell align=\"left\" sx={titleCell}>\n                                                {t('Existence Status')}\n                                            </TableCell>\n                                            <TableCell align=\"left\" sx={contentCell}>\n                                                {t('Total')}: {detailData.totalCount},{t('Pass')}:{' '}\n                                                {detailData.successCount},{t('Modified')}: {detailData.modifiedCount}\n                                                {detailData.queryType !== 'LOCATOR' && (\n                                                    <>\n                                                        , {t('Added')}: {detailData.addedCount},{t('Removed')}:{' '}\n                                                        {detailData.removedCount}\n                                                    </>\n                                                )}\n                                            </TableCell>\n                                        </TableRow>\n                                    )}\n                                    <TableRow id=\"verify-result-row\">\n                                        <TableCell align=\"left\" sx={titleCell}>\n                                            {t('Verify Result')}\n                                        </TableCell>\n                                        <TableCell align=\"left\" sx={contentCell}>\n                                            <Box display=\"flex\" alignItems=\"center\">\n                                                {renderResult(\n                                                    detailData.verifyResult,\n                                                    detailData.verifyResultDescription,\n                                                )}\n                                            </Box>\n                                        </TableCell>\n                                    </TableRow>\n                                    {detailData.verifyResultDescription !== 'Contract connection error' &&\n                                        detailData.proofDetailList.length !== 0 && (\n                                            <TableRow id=\"blockchain-verify-list-row\">\n                                                <TableCell align=\"left\" sx={titleCell}>\n                                                    {t('Blockchain Verify List')}\n                                                </TableCell>\n                                                <TableCell align=\"left\" sx={contentCell}>\n                                                    <Box display=\"flex\" alignItems=\"center\">\n                                                        <Button\n                                                            variant=\"contained\"\n                                                            color=\"primary\"\n                                                            size=\"small\"\n                                                            onClick={handleVerifyListModalOpen}\n                                                        >\n                                                            {t('View')}\n                                                        </Button>\n                                                    </Box>\n                                                </TableCell>\n                                            </TableRow>\n                                        )}\n                                </Hidden>\n                                <Hidden only={['sm', 'md', 'lg', 'xl']}>\n                                    <TableRow id=\"proof-token-row\">\n                                        <TableCell>\n                                            <Typography variant=\"body2\">{t('Off-chain Proof')}</Typography>\n                                            <Typography variant=\"body2\" sx={contentTypo}>\n                                                {detailData.proofFileName}\n                                            </Typography>\n                                        </TableCell>\n                                    </TableRow>\n                                    <TableRow id=\"verify-time-row\">\n                                        <TableCell>\n                                            <Typography variant=\"body2\">{t('Upload Time')}</Typography>\n                                            <Typography variant=\"body2\" sx={contentTypo}>\n                                                {renderTime(detailData.uploadTimestamp)}\n                                            </Typography>\n                                        </TableCell>\n                                    </TableRow>\n                                    <TableRow id=\"contract-address-row\">\n                                        <TableCell>\n                                            <Typography variant=\"body2\">{t('Contract Address')}</Typography>\n                                            <Box display=\"flex\" alignItems=\"center\" sx={contentTypo}>\n                                                <Typography\n                                                    component=\"a\"\n                                                    variant=\"body2\"\n                                                    href={contractAddressUrl}\n                                                    target=\"_blank\"\n                                                    rel=\"noopener noreferrer\"\n                                                    sx={{\n                                                        color: 'primary.main',\n                                                        textDecoration: 'none',\n                                                        mr: 1,\n                                                        wordBreak: 'break-all',\n                                                    }}\n                                                >\n                                                    {detailData.contractAddress}\n                                                </Typography>\n                                                <Tooltip\n                                                    title={t('proof.verification.detail.help_contract_address')}\n                                                    placement=\"right\"\n                                                    aria-label=\"contractAddress\"\n                                                >\n                                                    <HelpIcon fontSize=\"small\" color=\"primary\" />\n                                                </Tooltip>\n                                            </Box>\n                                        </TableCell>\n                                    </TableRow>\n                                    {detailData.verifyResultDescription !== 'Contract connection error' && (\n                                        <TableRow id=\"existence-status-row\">\n                                            <TableCell>\n                                                <Typography variant=\"body2\">{t('Existence Status')}</Typography>\n                                                <Typography variant=\"body2\" sx={contentTypo}>\n                                                    {t('Total')}: {detailData.totalCount},{t('Pass')}:{' '}\n                                                    {detailData.successCount},{t('Modified')}:{' '}\n                                                    {detailData.modifiedCount}\n                                                    {detailData.queryType !== 'LOCATOR' && (\n                                                        <>\n                                                            , {t('Added')}: {detailData.addedCount},{t('Removed')}:{' '}\n                                                            {detailData.removedCount}\n                                                        </>\n                                                    )}\n                                                </Typography>\n                                            </TableCell>\n                                        </TableRow>\n                                    )}\n                                    <TableRow id=\"verify-result-row\">\n                                        <TableCell>\n                                            <Typography variant=\"body2\">{t('Verify Result')}</Typography>\n                                            <Box display=\"flex\" alignItems=\"center\" sx={contentTypo}>\n                                                {renderResult(\n                                                    detailData.verifyResult,\n                                                    detailData.verifyResultDescription,\n                                                )}\n                                            </Box>\n                                        </TableCell>\n                                    </TableRow>\n                                    {detailData.verifyResultDescription !== 'Contract connection error' &&\n                                        detailData.proofDetailList.length !== 0 && (\n                                            <TableRow id=\"blockchain-verify-list-row\">\n                                                <TableCell>\n                                                    <Typography variant=\"body2\">\n                                                        {t('Blockchain Verify List')}\n                                                    </Typography>\n                                                    <Box display=\"flex\" alignItems=\"center\" sx={contentTypo}>\n                                                        <Button\n                                                            variant=\"contained\"\n                                                            color=\"primary\"\n                                                            size=\"small\"\n                                                            onClick={handleVerifyListModalOpen}\n                                                        >\n                                                            {t('View')}\n                                                        </Button>\n                                                    </Box>\n                                                </TableCell>\n                                            </TableRow>\n                                        )}\n                                </Hidden>\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </Paper>\n            </Collapse>\n            <VerifyListModal\n                detailData={detailData}\n                modalOpen={modalOpen}\n                handleVerifyListModalClose={handleVerifyListModalClose}\n                handleMoreInfoModalOpen={handleMoreInfoModalOpen}\n            />\n            <MoreInfoModal\n                moreInfo={moreInfo}\n                moreInfoModalOpen={moreInfoModalOpen}\n                onClose={handleMoreInfoModalClose}\n            />\n        </>\n    )\n}\n\nVerifyDetailTable.propTypes = {\n    detailData: PropTypes.object.isRequired,\n}\n\nexport default VerifyDetailTable\n","export default {\n    VERIFY_OK: 'Verify success',\n    COVERT_FILE_TO_VERIFICATION_PROOF_FAIL: 'Convert file to verificationProof fail',\n    VERIFICATION_PROOF_CONTENT_NULL_ERROR: 'VerificationProof content null error',\n    VERIFY_VERIFICATION_PROOF_ERROR: 'Verify verificationProof error',\n    FILE_NAME_OR_CONTENT_ERROR: 'Verify raw data file name or content error',\n    VERIFICATION_PROOF_SIGNATURE_ERROR: 'VerificationProof signature error',\n    CONTRACT_CONNECTION_ERROR: 'Contract connection error',\n}\n","export default [\n    {\n        constant: false,\n        inputs: [\n            {\n                name: '_indexValue',\n                type: 'string',\n            },\n            {\n                name: '_clearanceOrder',\n                type: 'string',\n            },\n            {\n                name: '_secondPart',\n                type: 'string',\n            },\n            {\n                name: '_receiptSignature',\n                type: 'bytes32[]',\n            },\n            {\n                name: '_merkleProofClearanceOrderAndIndexValue',\n                type: 'bytes32[]',\n            },\n            {\n                name: '_slice',\n                type: 'bytes32[]',\n            },\n            {\n                name: '_pbPairIndex',\n                type: 'bytes8[]',\n            },\n            {\n                name: '_pbPairKey',\n                type: 'bytes32[]',\n            },\n            {\n                name: '_pbPairValue',\n                type: 'bytes32[]',\n            },\n            {\n                name: '_merkleProofSignature',\n                type: 'bytes32[]',\n            },\n        ],\n        name: 'objection',\n        outputs: [\n            {\n                name: '',\n                type: 'bool',\n            },\n        ],\n        payable: true,\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'spoServerWalletAddress',\n        outputs: [\n            {\n                name: '',\n                type: 'address',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'maxTxCount',\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: '_clearanceOrder',\n                type: 'uint256',\n            },\n            {\n                name: '_rootHash',\n                type: 'bytes32',\n            },\n            {\n                name: '_txCount',\n                type: 'uint256',\n            },\n            {\n                name: '_description',\n                type: 'string',\n            },\n        ],\n        name: 'writeClearanceRecord',\n        outputs: [],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                name: '_indexValue',\n                type: 'string',\n            },\n            {\n                name: '_clearanceOrder',\n                type: 'string',\n            },\n            {\n                name: '_secondPart',\n                type: 'string',\n            },\n        ],\n        name: 'getReceiptDigest',\n        outputs: [\n            {\n                name: '',\n                type: 'string',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'version',\n        outputs: [\n            {\n                name: '',\n                type: 'string',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'clearanceOrder',\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'currentTxCount',\n        outputs: [\n            {\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        name: 'clearanceRecords',\n        outputs: [\n            {\n                name: 'clearanceOrder',\n                type: 'uint256',\n            },\n            {\n                name: 'rootHash',\n                type: 'bytes32',\n            },\n            {\n                name: 'createTime',\n                type: 'uint256',\n            },\n            {\n                name: 'chainHash',\n                type: 'bytes32',\n            },\n            {\n                name: 'description',\n                type: 'string',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: 'itmWalletAddress',\n        outputs: [\n            {\n                name: '',\n                type: 'address',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: true,\n        inputs: [\n            {\n                name: '',\n                type: 'uint256',\n            },\n        ],\n        name: 'objectionRecords',\n        outputs: [\n            {\n                name: 'id',\n                type: 'uint256',\n            },\n            {\n                name: 'objectionStatus',\n                type: 'uint8',\n            },\n            {\n                name: 'clearanceOrder',\n                type: 'uint256',\n            },\n            {\n                name: 'indexValue',\n                type: 'string',\n            },\n            {\n                name: 'createTime',\n                type: 'uint256',\n            },\n            {\n                name: 'sender',\n                type: 'address',\n            },\n            {\n                name: 'receiptHash',\n                type: 'bytes32',\n            },\n        ],\n        payable: false,\n        stateMutability: 'view',\n        type: 'function',\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: '_spoServerWalletAddress',\n                type: 'address',\n            },\n        ],\n        name: 'setSpoServerWalletAddress',\n        outputs: [],\n        payable: true,\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        constant: false,\n        inputs: [\n            {\n                name: '_addTxCount',\n                type: 'uint256',\n            },\n        ],\n        name: 'addMaxTxCount',\n        outputs: [],\n        payable: true,\n        stateMutability: 'payable',\n        type: 'function',\n    },\n    {\n        inputs: [\n            {\n                name: '_itmWalletAddress',\n                type: 'address',\n            },\n            {\n                name: '_spoServerWalletAddress',\n                type: 'address',\n            },\n            {\n                name: '_maxTxCount',\n                type: 'uint256',\n            },\n        ],\n        payable: false,\n        stateMutability: 'nonpayable',\n        type: 'constructor',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                name: 'clearanceOrder',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                name: 'rootHash',\n                type: 'bytes32',\n            },\n            {\n                indexed: false,\n                name: 'createTime',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                name: 'chainHash',\n                type: 'bytes32',\n            },\n            {\n                indexed: false,\n                name: 'description',\n                type: 'string',\n            },\n        ],\n        name: 'NewClearanceRecord',\n        type: 'event',\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                name: 'maxTxCount',\n                type: 'uint256',\n            },\n            {\n                indexed: false,\n                name: 'currentTxCount',\n                type: 'uint256',\n            },\n        ],\n        name: 'NewMaxTxCount',\n        type: 'event',\n    },\n]\n","import ABI from '../../constants/LedgerBoosterABI'\nimport Web3 from 'web3'\n\n/**\n * @function : loadContract\n *\n * @description : Get the contract by calling Web3 API\n *\n * @note :\n *\n * @param {String} contractAddress : proof contract address\n * @param {String} nodeUrl : nodeUrl\n *\n * @returns : contract\n */\nconst loadContract = (contractAddress, nodeUrl) => {\n    const web3 = new Web3(new Web3.providers.HttpProvider(nodeUrl))\n\n    try {\n        return new web3.eth.Contract(ABI, contractAddress)\n    } catch (err) {\n        console.log('loadContract() error', err)\n        // TODO error handle\n    }\n    //return new window.web3.eth.Contract(ABI, contractAddress);\n}\n\n/**\n * @function : obtainClearanceRecordFromContract\n *\n * @description : Get the clearance record from contract by calling Web3 API\n *\n * @note : Remember to use MetaMask to connect to blockchain. Comment out enableEthService()\n *\n * @param {String} contractAddress : proof contract address\n * @param {Number} infuraProjectId : latest clearance order\n * @param {String} nodeUrl : nodeUrl\n *\n * @returns : clearanceRecord\n */\nconst obtainClearanceRecordFromContract = async (contractAddress, clearanceOrder, nodeUrl) => {\n    //enableEthService(); // MetaMask\n    var clearanceRecord\n    try {\n        const spoContract = loadContract(contractAddress, nodeUrl)\n        clearanceRecord = await spoContract.methods.clearanceRecords(clearanceOrder).call()\n    } catch (err) {\n        console.log('obtainClearanceRecordFromContract() error', err)\n        //TODO error handle\n    }\n\n    return {\n        clearanceOrder: Number(clearanceRecord.clearanceOrder),\n        rootHash: clearanceRecord.rootHash.replace('0x', ''),\n        createTime: clearanceRecord.createTime,\n        chainHash: clearanceRecord.chainHash.replace('0x', ''),\n        description: clearanceRecord.description,\n    }\n}\n\nexport { obtainClearanceRecordFromContract, loadContract }\n","import { sha256 } from 'js-sha256'\nimport cryptoJSsha256 from 'crypto-js/sha256'\nimport cryptoJS from 'crypto-js'\n\nconst sha256HexString = (hexString) => {\n    return cryptoJSsha256(cryptoJS.enc.Hex.parse(hexString)).toString()\n}\n\nconst sha256ToHex = (toSha256Data) => {\n    const resultString = sha256.hex(toSha256Data)\n    return resultString\n}\n\nconst sha256toInt8Arr = (toSha256Data) => {\n    const result = new Int8Array(sha256.arrayBuffer(toSha256Data))\n    return result\n}\n\nconst hexToBytes = (hex) => {\n    if (!hex) {\n        return null\n    }\n    for (var bytes = [], c = 0; c < hex.length; c += 2) {\n        bytes.push(parseInt(hex.substr(c, 2), 16))\n    }\n    const result = new Int8Array(bytes)\n    return result\n}\n\nexport { sha256HexString, sha256ToHex, sha256toInt8Arr, hexToBytes }\n","import { sha256ToHex } from './hashUtil'\n\nconst readFileContent = (file) => {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader()\n        reader.onload = function (e) {\n            resolve(e.target.result)\n        }\n        reader.onerror = function (e) {\n            reject(e)\n        }\n        reader.readAsText(file)\n    })\n}\n\nconst loadVerificationProofFileToJson = async (file) => {\n    const fileContent = await readFileContent(file)\n    const verificationProof = JSON.parse(fileContent)\n    return verificationProof\n}\n\nconst readFileContentAsArrayBuffer = (file) => {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader()\n        reader.onload = function (e) {\n            resolve(e.target.result)\n        }\n        reader.onerror = function (e) {\n            reject(e)\n        }\n        reader.readAsArrayBuffer(file)\n    })\n}\n\nconst getFileHash = async (file) => {\n    const fileContentArrayBuffer = await readFileContentAsArrayBuffer(file)\n    const fileHash = sha256ToHex(fileContentArrayBuffer)\n    return fileHash\n}\n\nexport { loadVerificationProofFileToJson, getFileHash }\n","const QueryType = {\n    LOCATOR: 'LOCATOR',\n    CLEARANCE_ORDER: 'CLEARANCE_ORDER',\n    TIMESTAMP: 'TIMESTAMP',\n    CLEARANCE_ORDER_AND_SN: 'CLEARANCE_ORDER_AND_SN',\n    ERROR: 'ERROR',\n}\n\nexport { QueryType }\n","import { QueryType } from '../../constants/QueryType'\nconst parse = (queryString) => {\n    var query = {}\n\n    if (queryString.startsWith('Locators')) {\n        query.type = QueryType.LOCATOR\n    } else {\n        if (queryString.includes(',FromTS=') && queryString.includes(',ToTS=')) {\n            query.type = QueryType.TIMESTAMP\n        } else if (queryString.includes(',FromSN=') && queryString.includes(',ToSN=')) {\n            query.type = QueryType.CLEARANCE_ORDER_AND_SN\n        } else {\n            query.type = QueryType.CLEARANCE_ORDER\n        }\n\n        const keyValuePairs = queryString.split(',')\n\n        for (const pair of keyValuePairs) {\n            const splitString = pair.split('=')\n\n            if (splitString[0] === 'IV_Key') {\n                query.indexValueKey = splitString[1]\n            } else if (splitString[0] === 'FromTS') {\n                query.fromTS = Number(splitString[1])\n            } else if (splitString[0] === 'ToTS') {\n                query.toTS = Number(splitString[1])\n            } else if (splitString[0] === 'FromCO') {\n                query.fromCO = Number(splitString[1])\n            } else if (splitString[0] === 'ToCO') {\n                query.toCO = Number(splitString[1])\n            } else if (splitString[0] === 'FromSN') {\n                query.fromSN = Number(splitString[1])\n            } else if (splitString[0] === 'ToSN') {\n                query.toSN = Number(splitString[1])\n            }\n        }\n    }\n\n    console.log('parse () query = ' + query)\n    return query\n}\n\nexport { parse }\n","const VerifyVerificationProofStatus = {\n    ALL_PASS: 'ALL_PASS',\n    SIG_ERROR: 'SIG_ERROR',\n    CONTRACT_CONNECTION_ERR: 'CONTRACT_CONNECTION_ERR',\n}\n\nexport { VerifyVerificationProofStatus }\n","import web3 from 'web3'\nimport { VerifyVerificationProofStatus } from '../../constants/VerifyVerificationProofStatus'\n\nconst buildProofSignaturePassReport = (serverWalletAddress, sigServer, signData, proofSignaturePass) => {\n    console.log(\n        `buildProofSignaturePassReport() serverWalletAddress = ${serverWalletAddress}, sigServer = ${sigServer}, signData= ${signData}, proofSignaturePass = ${proofSignaturePass}`,\n    )\n    const report = `[Step 1] verify signature of  SPO (sigServer), \\n\\n\\tserverWalletAddress=${serverWalletAddress}, \\n\\tSPOSignature R=${sigServer.r}, \\n\\tS=${sigServer.s}, \\n\\tV=${sigServer.v}, \\n\\tsigned data=${signData}, \\n\\tpass=${proofSignaturePass}\\n`\n    console.log('buildProofSignaturePassReport() reportSize = ' + report.length)\n    return report\n}\n\nconst buildVerifyLastClearanceRecordReport = (lastRecord, verifyResult) => {\n    console.log(\n        `buildVerifyLastClearanceRecordReport() start, lastRecord = ${lastRecord}, verifyResult = ${verifyResult}`,\n    )\n    const report = `[Step 2-1] verify last clearance record, \\n\\n\\tTo find the transaction in Blockchain, transaction hash=${lastRecord.txHash}\\n\\n\\tclearanceOrder=${lastRecord.clearanceOrder}\\n\\trootHash=${lastRecord.rootHash}\\n\\tchainHash=${lastRecord.chainHash}\\n\\tdescription=${lastRecord.description}\\n\\tpass=${verifyResult}\\n\\n`\n    console.log('buildVerifyLastClearanceRecordReport() end, reportSize = ' + report.length)\n    return report\n}\n\nconst buildVerifyClearanceRecordReport = (currentRecord, concatByteArray, calculateChainHash, verifyResult) => {\n    console.log(\n        `buildVerifyClearanceRecordReport() start, currentRecord = ${currentRecord}, concatByteArray = ${concatByteArray}, calculateChainHash = ${calculateChainHash}, verifyResult = ${verifyResult}`,\n    )\n    const report = `[Step 2-2] verify clearance record, \\n\\n\\tclearanceOrder=${\n        currentRecord.clearanceOrder\n    }\\n\\trootHash=${currentRecord.rootHash}\\n\\tchainHash=${currentRecord.chainHash}\\n\\tdescription=${\n        currentRecord.description\n    }\\n\\tconcat previous clearance record result=${web3.utils.bytesToHex(\n        Uint8Array.from(concatByteArray),\n    )}\\n\\tcalculate concat clearance record with sha3, result=${web3.utils.bytesToHex(\n        Uint8Array.from(calculateChainHash),\n    )}\\n\\tpass=${verifyResult}\\n`\n    console.log('buildVerifyClearanceRecordReport() end, reportSize = ' + report.length)\n    return report\n}\n\nconst buildVerifyExistenceSingleCODescriptionReport = (verifiedClearanceRecordInfo, existenceProofList) => {\n    console.log(\n        `buildVerifyExistenceSingleCODescriptionReport() start, verifiedClearanceRecordInfo=${verifiedClearanceRecordInfo}, existenceProofListSize=${existenceProofList.length}`,\n    )\n    var report\n    if (verifiedClearanceRecordInfo !== null) {\n        report = `[Step 3-1] Verify single clearance order of merkle proof in proof file, clearance order=${verifiedClearanceRecordInfo.clearanceRecord.clearanceOrder}\\n`\n    } else {\n        report = `[Step 3-1] There's no corresponding verified clearance record info, \\nverification proof may be edit!\\n`\n    }\n    report.concat(\n        `[Step 3-2] There are ${existenceProofList.length} existence proof/not existence proof in this clearance order\\n`,\n    )\n\n    console.log('buildVerifyExistenceSingleCODescriptionReport() end, reportSize = ' + report.length)\n    return report\n}\n\nconst buildGeneralReport = (fileName, proof, verificationProofStatus) => {\n    console.log(\n        `buildGeneralReport() start, fileName = ${fileName}, proof = ${proof}, verificationProofStatus = ${verificationProofStatus}`,\n    )\n    const report = `General report of ${fileName}\\nBlockchain: ${proof.env}\\n# of clearance orders = ${\n        proof.clearanceRecords.length\n    }\\n# of Merkle proof = ${proof.existenceProofs.length}\\nPass = ${\n        VerifyVerificationProofStatus.ALL_PASS === verificationProofStatus\n    }\\n`\n    console.log('buildGeneralReport() end, reportStringSize = ' + report.length)\n    return report\n}\n\nexport {\n    buildProofSignaturePassReport,\n    buildVerifyLastClearanceRecordReport,\n    buildVerifyClearanceRecordReport,\n    buildVerifyExistenceSingleCODescriptionReport,\n    buildGeneralReport,\n}\n","import { sha256ToHex } from './hashUtil'\n\nconst concatSigServer = (sigServer) => {\n    return sigServer.r + sigServer.s + sigServer.v\n}\n\nconst buildReceiptToDigestContent = (receipt) => {\n    const receiptSignData = buildReceiptToSignData(receipt)\n    const digestContent = receiptSignData + concatSigServer(receipt.sigServer)\n    return digestContent\n}\n\nconst buildReceiptToSignData = (receipt) => {\n    const iv = receipt.indexValue\n    const co = receipt.clearanceOrder\n\n    var toSha256Data =\n        receipt.callerAddress +\n        receipt.timestamp +\n        receipt.cmd +\n        receipt.metadata +\n        receipt.timestampSPO +\n        receipt.result\n\n    if (receipt.sigClient === null) {\n        toSha256Data = toSha256Data + 'null'\n    } else {\n        if (receipt.sigClient.r === null) {\n            toSha256Data = toSha256Data + 'null'\n        } else {\n            toSha256Data = toSha256Data + receipt.sigClient.r\n        }\n\n        if (receipt.sigClient.s === null) {\n            toSha256Data = toSha256Data + 'null'\n        } else {\n            toSha256Data = toSha256Data + receipt.sigClient.s\n        }\n\n        if (receipt.sigClient.v === null) {\n            toSha256Data = toSha256Data + 'null'\n        } else {\n            toSha256Data = toSha256Data + receipt.sigClient.v\n        }\n    }\n    const sha256Result = sha256ToHex(toSha256Data)\n    return iv + co + sha256Result\n}\n\nconst buildMerkleProofToSignData = (merkleProof) => {\n    var pbPairToString = ''\n    if (merkleProof.pbPair === null) {\n        pbPairToString = 'null'\n    } else {\n        for (let i = 0; i < merkleProof.pbPair.length; i++) {\n            const { index, keyHash, value } = merkleProof.pbPair[i]\n            pbPairToString += index + keyHash + value\n        }\n    }\n    const result = merkleProof.slice + pbPairToString + merkleProof.clearanceOrder\n    return result\n}\n\nconst buildMerkleProofToConCatSignData = (merkleProof) => {\n    var pbPairToString = ''\n    for (let i = 0; i < merkleProof.pbPair.length; i++) {\n        const { index, keyHash, value } = merkleProof.pbPair[i]\n        pbPairToString += index + keyHash + value\n    }\n    const result =\n        merkleProof.slice + pbPairToString + merkleProof.clearanceOrder + concatSigServer(merkleProof.sigServer)\n    return result\n}\n\nconst buildExistenceProofToSignData = (existenceProof) => {\n    const { clearanceOrder, indexValue, exist, merkleProof, receipt } = existenceProof\n    const receiptDigestContent = receipt === null ? 'null' : buildReceiptToDigestContent(receipt)\n    const merkleProofToConCatSignData = merkleProof === null ? 'null' : buildMerkleProofToConCatSignData(merkleProof)\n\n    const existenceProofToSignData =\n        clearanceOrder + indexValue + exist + merkleProofToConCatSignData + receiptDigestContent\n    return existenceProofToSignData\n}\n\nconst buildClearanceRecordToSignData = (record) => {\n    const { clearanceOrder, rootHash, chainHash, description, createTime, txHash } = record\n    const clearanceRecordToSignData = clearanceOrder + rootHash + chainHash + description + createTime + txHash\n    return clearanceRecordToSignData\n}\n\nconst buildProofMessage = (proof) => {\n    const existenceProofToSignData = proof.existenceProofs.reduce(\n        (previous, current) => previous + buildExistenceProofToSignData(current),\n        '',\n    )\n    const clearanceRecordToSignData = proof.clearanceRecords.reduce(\n        (previous, current) => previous + buildClearanceRecordToSignData(current),\n        '',\n    )\n    return (\n        proof.version +\n        proof.query +\n        proof.timestamp +\n        proof.contractAddress +\n        proof.serverWalletAddress +\n        proof.env +\n        proof.nodeConnectionString +\n        existenceProofToSignData +\n        clearanceRecordToSignData\n    )\n}\n\nconst buildPbPairToString = (pbPair) => {\n    const index = pbPair.index !== null ? pbPair.index : 'null'\n    const keyHash = pbPair.keyHash !== null ? pbPair.keyHash : 'null'\n    const value = pbPair.value !== null ? pbPair.value : 'null'\n\n    const message = `PBPair.PBPairValue(index=${index}, keyHash=${keyHash}, value=${value})`\n    console.log('buildPbPairToString() message = ', message)\n    return message\n}\n\nconst buildSpoSignatureToString = (signature) => {\n    const r = signature.r !== null ? signature.r : 'null'\n    const s = signature.s !== null ? signature.s : 'null'\n    const v = signature.v !== null ? signature.v : 'null'\n\n    const message = `SpoSignature(r=${r}, s=${s}, v=${v})`\n    console.log('buildSpoSignatureToString() message = ', message)\n    return message\n}\n\nconst buildMerkleProofToString = (merkleProof) => {\n    var message = 'MerkleProof('\n    const slice = merkleProof.slice !== null ? merkleProof.slice : 'null'\n    message = message.concat(`slice=${slice}, `)\n\n    if (merkleProof.pbPair !== null) {\n        message = message.concat(`pbPair=[`)\n\n        if (merkleProof.pbPair.length === 1) {\n            message = message.concat(buildPbPairToString(merkleProof.pbPair[0]))\n        } else {\n            var i = 1\n            for (var pair of merkleProof.pbPair) {\n                message = message.concat(buildPbPairToString(pair))\n\n                if (i === merkleProof.pbPair.length) {\n                    message = message.concat('')\n                } else {\n                    message = message.concat(', ')\n                }\n                i++\n            }\n        }\n        message = message.concat(`], `)\n    } else {\n        message = message.concat('pbPair=null, ')\n    }\n\n    const clearanceOrder = merkleProof.clearanceOrder !== null ? merkleProof.clearanceOrder : 'null'\n    message = message.concat(`clearanceOrder=${clearanceOrder}, `)\n\n    const sigServer = merkleProof.sigServer !== null ? buildSpoSignatureToString(merkleProof.sigServer) : 'null'\n    message = message.concat(`sigServer=${sigServer})`)\n\n    console.log('buildMerkleProofToString() message = ', message)\n    return message\n}\n\nconst buildReceiptToString = (receipt) => {\n    const id = receipt.id !== null ? receipt.id : 'null'\n    const callerAddress = receipt.callerAddress !== null ? receipt.callerAddress : 'null'\n    const timestamp = receipt.timestamp !== null ? receipt.timestamp : 'null'\n    const cmd = receipt.cmd !== null ? receipt.cmd : 'null'\n    const indexValue = receipt.indexValue !== null ? receipt.indexValue : 'null'\n    const metadata = receipt.metadata !== null ? receipt.metadata : 'null'\n    const clearanceOrder = receipt.clearanceOrder !== null ? receipt.clearanceOrder : 'null'\n    const sigClient = receipt.sigClient !== null ? buildSpoSignatureToString(receipt.sigClient) : 'null'\n    const timestampSPO = receipt.timestampSPO !== null ? receipt.timestampSPO : 'null'\n    const result = receipt.result !== null ? receipt.result : 'null'\n    const sigServer = receipt.sigServer !== null ? buildSpoSignatureToString(receipt.sigServer) : 'null'\n\n    const message = `Receipt(id=${id}, callerAddress=${callerAddress}, timestamp=${timestamp}, cmd=${cmd}, indexValue=${indexValue}, metadata=${metadata}, clearanceOrder=${clearanceOrder}, sigClient=${sigClient}, timestampSPO=${timestampSPO}, result=${result}, sigServer=${sigServer})`\n    console.log('buildReceiptToString() message = ', message)\n    return message\n}\n\nconst buildExistenceProofToString = (existenceProof) => {\n    const clearanceOrder = existenceProof.clearanceOrder !== null ? existenceProof.clearanceOrder : 'null'\n    const indexValue = existenceProof.indexValue !== null ? existenceProof.indexValue : 'null'\n    const exist = existenceProof.exist !== null ? existenceProof.exist : 'null'\n    const merkleProof =\n        existenceProof.merkleProof !== null ? buildMerkleProofToString(existenceProof.merkleProof) : 'null'\n    const receipt = existenceProof.receipt !== null ? buildReceiptToString(existenceProof.receipt) : 'null'\n\n    const message = `ExistenceProof(clearanceOrder=${clearanceOrder}, indexValue=${indexValue}, exist=${exist}, merkleProof=${merkleProof}, receipt=${receipt})`\n    console.log('buildExistenceProofToString() message = ', message)\n    return message\n}\n\nconst buildClearanceRecordToString = (clearanceRecord) => {\n    const id = clearanceRecord.id !== null ? clearanceRecord.id : 'null'\n    const clearanceOrder = clearanceRecord.clearanceOrder !== null ? clearanceRecord.clearanceOrder : 'null'\n    const rootHash = clearanceRecord.rootHash !== null ? clearanceRecord.rootHash : 'null'\n    const chainHash = clearanceRecord.chainHash !== null ? clearanceRecord.chainHash : 'null'\n    const description = clearanceRecord.description !== null ? clearanceRecord.description : 'null'\n    const createTime = clearanceRecord.createTime !== null ? clearanceRecord.createTime : 'null'\n    const txHash = clearanceRecord.txHash !== null ? clearanceRecord.txHash : 'null'\n\n    const message = `ClearanceRecord(id=${id}, clearanceOrder=${clearanceOrder}, rootHash=${rootHash}, chainHash=${chainHash}, description=${description}, createTime=${createTime}, txHash=${txHash})`\n    console.log('buildClearanceRecordToString() message = ', message)\n    return message\n}\n\nconst buildProofMessageFail = (proof) => {\n    var message =\n        proof.version +\n        proof.query +\n        proof.timestamp +\n        proof.contractAddress +\n        proof.serverWalletAddress +\n        proof.env +\n        proof.nodeConnectionString\n    message = message.concat('[')\n\n    var i = 1\n    for (var existenceProof of proof.existenceProofs) {\n        message = message.concat(buildExistenceProofToString(existenceProof))\n\n        if (i === proof.existenceProofs.length) {\n            message = message.concat('')\n        } else {\n            message = message.concat(', ')\n        }\n\n        i++\n    }\n\n    message = message.concat(']')\n    message = message.concat('[')\n    i = 1\n    for (var clearanceRecord of proof.clearanceRecords) {\n        message = message.concat(buildClearanceRecordToString(clearanceRecord))\n\n        if (i === proof.clearanceRecords.length) {\n            message = message.concat('')\n        } else {\n            message = message.concat(', ')\n        }\n\n        i++\n    }\n\n    message = message.concat(']')\n    console.log('buildProofMessageFail() message = ', message)\n    return message\n}\n\nconst clearanceRecordsEqual = (firstCr, secondCr) => {\n    console.log('clearanceRecordsEqual(), firtsCr = ', firstCr, ' secondCr = ', secondCr)\n    var result = false\n    if (\n        firstCr.rootHash === secondCr.rootHash &&\n        firstCr.clearanceOrder === secondCr.clearanceOrder &&\n        firstCr.chainHash === secondCr.chainHash\n    ) {\n        result = true\n    }\n    console.log('clearanceRecordsEqual(), result = ', result)\n    return result\n}\n\nexport {\n    concatSigServer,\n    buildReceiptToDigestContent,\n    buildReceiptToSignData,\n    buildMerkleProofToSignData,\n    buildExistenceProofToSignData,\n    buildProofMessage,\n    buildProofMessageFail,\n    buildClearanceRecordToSignData,\n    clearanceRecordsEqual,\n}\n","import { hexToBytes } from '../util/hashUtil'\nimport { buildVerifyLastClearanceRecordReport, buildVerifyClearanceRecordReport } from '../util/verifyReportUtil'\nimport web3 from 'web3'\nimport { clearanceRecordsEqual } from '../util/messageBuilderUtil'\n\nconst buildVerifiedClearanceRecordInfoMap = (crList, latestCR, report) => {\n    console.log('buildVerifiedClearanceRecordMap() crList = ' + crList + ', latestCR = ' + latestCR)\n    var verifiedClearanceRecordInfoMap = {}\n    const clearanceRecordMap = buildClearanceRecordMapFilterByLatestCO(crList, latestCR)\n    console.log('buildVerifiedClearanceRecordInfoMap () clearanceRecordMap = ', clearanceRecordMap)\n    var pass = false\n    var currentCo = latestCR.clearanceOrder\n    var currentRecord = clearanceRecordMap[currentCo]\n\n    if (clearanceRecordsEqual(currentRecord, latestCR)) {\n        pass = true\n    } else {\n        console.log('buildVerifiedClearanceRecordMap() lastCRInClearanceRecordList error')\n        currentRecord = latestCR\n    }\n\n    delete clearanceRecordMap[currentCo]\n\n    verifiedClearanceRecordInfoMap[currentCo] = { pass: pass, clearanceRecord: currentRecord }\n    report.verifyLastClearanceRecordReport = buildVerifyLastClearanceRecordReport(currentRecord, pass)\n\n    if (crList.length > 1) {\n        var reportList = []\n        currentCo = currentCo - 1\n\n        while (Object.keys(clearanceRecordMap).length !== 0) {\n            currentRecord = clearanceRecordMap[currentCo]\n            const previousRecord = clearanceRecordMap[currentCo - 1]\n\n            if (\n                currentRecord !== null &&\n                previousRecord !== null &&\n                currentRecord !== undefined &&\n                previousRecord !== undefined\n            ) {\n                const verifyChainHashResult = verifyChainHash(currentRecord, previousRecord)\n                reportList.push(verifyChainHashResult.report)\n                pass = verifyChainHashResult.pass\n            } else {\n                pass = currentRecord !== null\n            }\n            if (currentRecord !== null) {\n                delete clearanceRecordMap[currentCo]\n            }\n            verifiedClearanceRecordInfoMap[currentCo] = { pass: pass, clearanceRecord: currentRecord }\n            currentCo = currentCo - 1\n        }\n        report.verifyClearanceRecordReportList = reportList\n    }\n\n    console.log('buildPassClearanceRecord() verifiedClearanceRecordInfoMap = ' + verifiedClearanceRecordInfoMap)\n    return verifiedClearanceRecordInfoMap\n}\n\nconst verifyChainHash = (currentRecord, previousRecord) => {\n    console.log('verifyChainHash() currentRecord = ' + currentRecord + ', previousRecord = ' + previousRecord)\n\n    var rootHashByteArray = hexToBytes(currentRecord.rootHash)\n    var clearanceOrderByteArray = web3.utils.hexToBytes(\n        web3.utils.padLeft(web3.utils.numberToHex(Number(currentRecord.clearanceOrder)), 64),\n    )\n    var previousRecordByteArray = hexToBytes(previousRecord.chainHash)\n    var concatByteArray = new Int8Array(\n        rootHashByteArray.length + clearanceOrderByteArray.length + previousRecordByteArray.length,\n    )\n    concatByteArray.set(rootHashByteArray)\n    concatByteArray.set(clearanceOrderByteArray, rootHashByteArray.length)\n    concatByteArray.set(previousRecordByteArray, rootHashByteArray.length + clearanceOrderByteArray.length)\n    const chainHash = web3.utils.keccak256(web3.utils.bytesToHex(Uint8Array.from(concatByteArray))).replace('0x', '')\n    const pass = currentRecord.chainHash === chainHash\n    const report = buildVerifyClearanceRecordReport(currentRecord, concatByteArray, hexToBytes(chainHash), pass)\n    const result = {\n        pass: pass,\n        report: report,\n    }\n\n    console.log('verifyChainHash() end, result = ' + result)\n    return result\n}\n\nconst buildClearanceRecordMapFilterByLatestCO = (clearanceRecordList, latestCR) => {\n    console.log('buildClearanceRecordMap() clearanceRecordListSize = ' + clearanceRecordList.length)\n    const clearanceRecords = clearanceRecordList.filter(\n        (clearanceRecord) => clearanceRecord.clearanceOrder <= latestCR.clearanceOrder,\n    )\n\n    var clearanceRecordMap = {}\n\n    for (const clearanceRecord of clearanceRecords) {\n        var clearanceOrder = clearanceRecord.clearanceOrder\n        clearanceRecordMap[Number(clearanceOrder)] = clearanceRecord\n    }\n\n    console.log('buildClearanceRecordMap() clearanceRecordMapKeySet = ' + Object.keys(clearanceRecordMap).length)\n    return clearanceRecordMap\n}\n\nexport { buildVerifiedClearanceRecordInfoMap, buildClearanceRecordMapFilterByLatestCO }\n","import { hexToBytes } from '../util/hashUtil'\nimport web3 from 'web3'\nimport { buildVerifyClearanceRecordReport, buildVerifyLastClearanceRecordReport } from '../util/verifyReportUtil'\nimport { clearanceRecordsEqual } from '../util/messageBuilderUtil'\n\nconst buildVerifiedClearanceRecordInfoMap_2_3_0 = (crList, latestCR, report) => {\n    console.log('buildVerifiedClearanceRecordMap()_2_3_0 crList = ', crList + ', latestCR = ', latestCR)\n    var verifiedClearanceRecordInfoMap = {}\n    const clearanceRecordMap = buildClearanceRecordMapFilterByLatestCO(crList, latestCR)\n    console.log('buildVerifiedClearanceRecordInfoMap () clearanceRecordMap = ', clearanceRecordMap)\n    var pass = false\n    var currentCo = latestCR.clearanceOrder\n    var currentRecord = clearanceRecordMap[currentCo]\n\n    if (clearanceRecordsEqual(currentRecord, latestCR)) {\n        pass = true\n    } else {\n        console.log('buildVerifiedClearanceRecordMap()_2_3_0 lastCRInClearanceRecordList error')\n        currentRecord = latestCR\n    }\n\n    delete clearanceRecordMap[currentCo]\n\n    verifiedClearanceRecordInfoMap[currentCo] = { pass: pass, clearanceRecord: currentRecord }\n    report.verifyLastClearanceRecordReport = buildVerifyLastClearanceRecordReport(currentRecord, pass)\n\n    if (crList.length > 1) {\n        var reportList = []\n        while (Object.keys(clearanceRecordMap).length !== 0) {\n            var previousCo = currentCo - 1\n            const previousRecord = clearanceRecordMap[previousCo]\n\n            if (\n                currentRecord !== null &&\n                previousRecord !== null &&\n                currentRecord !== undefined &&\n                previousRecord !== undefined\n            ) {\n                const verifyChainHashResult = verifyChainHash(currentRecord, previousRecord)\n                reportList.push(verifyChainHashResult.report)\n                pass = verifyChainHashResult.pass\n            } else {\n                pass = currentRecord !== null\n            }\n            if (currentRecord !== null) {\n                delete clearanceRecordMap[currentCo]\n            }\n            verifiedClearanceRecordInfoMap[previousCo] = { pass: pass, clearanceRecord: previousRecord }\n            currentCo = currentCo - 1\n            currentRecord = previousRecord\n        }\n        console.log('buildVerifiedClearanceRecordMap()_2_3_0 reportListSize = ', reportList.length)\n        report.verifyClearanceRecordReportList = reportList\n    }\n\n    console.log(\n        'buildVerifiedClearanceRecordInfoMap()_2_3_0 verifiedClearanceRecordInfoMap = ',\n        verifiedClearanceRecordInfoMap,\n    )\n    return verifiedClearanceRecordInfoMap\n}\n\nconst verifyChainHash = (currentRecord, previousRecord) => {\n    console.log('verifyChainHash() currentRecord = ', currentRecord, ', previousRecord = ', previousRecord)\n    var rootHashByteArray = hexToBytes(previousRecord.rootHash)\n    var clearanceOrderByteArray = web3.utils.hexToBytes(\n        web3.utils.padLeft(web3.utils.numberToHex(Number(previousRecord.clearanceOrder)), 64),\n    )\n    var previousRecordByteArray = hexToBytes(previousRecord.chainHash)\n    var concatByteArray = new Int8Array(\n        rootHashByteArray.length + clearanceOrderByteArray.length + previousRecordByteArray.length,\n    )\n    concatByteArray.set(rootHashByteArray)\n    concatByteArray.set(clearanceOrderByteArray, rootHashByteArray.length)\n    concatByteArray.set(previousRecordByteArray, rootHashByteArray.length + clearanceOrderByteArray.length)\n    const chainHash = web3.utils.keccak256(web3.utils.bytesToHex(Uint8Array.from(concatByteArray))).replace('0x', '')\n    const pass = currentRecord.chainHash === chainHash\n    const report = buildVerifyClearanceRecordReport(currentRecord, concatByteArray, hexToBytes(chainHash), pass)\n    const result = {\n        pass: pass,\n        report: report,\n    }\n\n    console.log('verifyChainHash() end, result = ', result)\n    return result\n}\n\nconst buildClearanceRecordMapFilterByLatestCO = (clearanceRecordList, latestCR) => {\n    console.log('buildClearanceRecordMap() clearanceRecordListSize = ' + clearanceRecordList.length)\n    const clearanceRecords = clearanceRecordList.filter(\n        (clearanceRecord) => clearanceRecord.clearanceOrder <= latestCR.clearanceOrder,\n    )\n    var clearanceRecordMap = {}\n\n    for (const clearanceRecord of clearanceRecords) {\n        var clearanceOrder = clearanceRecord.clearanceOrder\n        clearanceRecordMap[Number(clearanceOrder)] = clearanceRecord\n    }\n\n    console.log('buildClearanceRecordMap() clearanceRecordMapKeySet = ' + Object.keys(clearanceRecordMap))\n    return clearanceRecordMap\n}\n\nexport { buildVerifiedClearanceRecordInfoMap_2_3_0 }\n","const ProofExistStatus = {\n    PASS: 'PASS',\n    MODIFIED: 'MODIFIED',\n    REMOVED: 'REMOVED',\n    ADDED: 'ADDED',\n    CLEARANCE_RECORD_ERROR: 'CLEARANCE_RECORD_ERROR',\n}\n\nexport { ProofExistStatus }\n","const VerifyNotExistProofStatus = {\n    OK_INDEX_VALUE_NOT_FOUND: 'OK_INDEX_VALUE_NOT_FOUND',\n    OK_CLEARANCE_NOT_BETWEEN_SEARCH_TIME: 'OK_CLEARANCE_NOT_BETWEEN_SEARCH_TIME',\n    OK_RECEIPT_AND_MERKLE_PROOF_SHOULD_BE_END_OF_PROOF: 'OK_RECEIPT_AND_MERKLE_PROOF_SHOULD_BE_END_OF_PROOF',\n    ERROR_INDEX_VALUE_IN_PAIR: 'ERROR_INDEX_VALUE_IN_PAIR',\n    ERROR_ROOT_HASH_ERROR: 'ERROR_ROOT_HASH_ERROR',\n    ERROR_SLICE_ERROR: 'ERROR_SLICE_ERROR',\n    ERROR_SIGNATURE: 'ERROR_SIGNATURE',\n    CLEARANCE_RECORD_ERROR: 'CLEARANCE_RECORD_ERROR',\n}\n\nexport { VerifyNotExistProofStatus }\n","const StatusConstantsString = {\n    OK: 'ok',\n    ERROR: 'error',\n    WARN: 'warn',\n    NOT_FOUND: 'not found',\n    TX_COUNT_ERROR: 'TX_COUNT_ERROR',\n}\n\nexport { StatusConstantsString }\n","import { recoverAddress, recoverEthereumAddress } from './ethUtil'\nimport {\n    buildMerkleProofToSignData,\n    buildProofMessage,\n    buildProofMessageFail,\n    buildReceiptToSignData,\n} from './messageBuilderUtil'\n\n/**\n *\n * @param {toVerifyMessageString} message\n * @param {SPO Signature Object, containing r,s,v, all without '0x'} sigServer\n * @param {SPO serverWalletAddress} serverWalletAddress\n */\nconst verifySPOSignature = (message, sigServer, serverWalletAddress) => {\n    if (\n        message !== null &&\n        sigServer !== null &&\n        serverWalletAddress !== null &&\n        sigServer.r !== null &&\n        sigServer.s !== null &&\n        sigServer.v !== null\n    ) {\n        var result = verifyEthereumSignature(message, sigServer, serverWalletAddress)\n\n        if (!result) {\n            const recoveredAddress = recoverAddress(message, '0x' + sigServer.r, '0x' + sigServer.s, '0x' + sigServer.v) // sha3()\n            console.log('verifySPOSignature()', { recoveredAddress, serverWalletAddress })\n            result =\n                recoveredAddress.toString().toLocaleLowerCase() === serverWalletAddress.toString().toLocaleLowerCase()\n        }\n\n        console.log('verifySPOSignature() result=', result)\n        return result\n    } else {\n        return false\n    }\n}\n\nconst verifyEthereumSignature = (message, sigServer, serverWalletAddress) => {\n    console.log('verifyEthereumSignature() sigServer=', sigServer, 'serverWalletAddess=', serverWalletAddress)\n    if (\n        message !== null &&\n        sigServer !== null &&\n        serverWalletAddress !== null &&\n        sigServer.r !== null &&\n        sigServer.s !== null &&\n        sigServer.v !== null\n    ) {\n        const recoveredAddress = recoverEthereumAddress(\n            message,\n            '0x' + sigServer.r,\n            '0x' + sigServer.s,\n            '0x' + sigServer.v,\n        ) // prefixMessage\n        console.log('verifyEthereumSignature()', { recoveredAddress, serverWalletAddress })\n        const result =\n            recoveredAddress.toString().toLocaleLowerCase() === serverWalletAddress.toString().toLocaleLowerCase()\n        console.log('verifyEthereumSignature() result=', result)\n        return result\n    } else {\n        return false\n    }\n}\n\nconst verifyProofSignature = (verificationProof, first) => {\n    var proofMessage\n\n    if (first) {\n        proofMessage = buildProofMessage(verificationProof)\n    } else {\n        proofMessage = buildProofMessageFail(verificationProof)\n    }\n\n    const { sigServer, serverWalletAddress } = verificationProof\n    const result = verifySPOSignature(proofMessage, sigServer, serverWalletAddress)\n    console.log('verifyProofSignature() proofMessage=,', proofMessage, 'result=', result)\n    return result\n}\n\nconst verifyReceiptSignature = (receipt, serverWalletAddress) => {\n    const receiptMessage = buildReceiptToSignData(receipt)\n    const { sigServer } = receipt\n    const result = verifySPOSignature(receiptMessage, sigServer, serverWalletAddress)\n    return result\n}\n\nconst verifyMerkleProofSignature = (merkleProof, serverWalletAddess) => {\n    const merkleProofMessage = buildMerkleProofToSignData(merkleProof)\n    const { sigServer } = merkleProof\n    return verifySPOSignature(merkleProofMessage, sigServer, serverWalletAddess)\n}\n\nexport { verifyProofSignature, verifyReceiptSignature, verifyMerkleProofSignature }\n","import Web3 from 'web3'\n\nconst enableEthService = () => {\n    if (window.ethereum !== undefined) {\n        window.web3 = new Web3(window.ethereum)\n\n        window.ethereum.enable().catch((error) => {\n            console.log('enableEthService() error', error)\n            return false\n        })\n        return true\n    }\n    return false\n}\n\nconst toSha3String = (message) => {\n    //enableEthService();\n    return Web3.utils.sha3(message)\n    //return window.web3.utils.sha3(message)\n}\n\nconst recoverAddress = (message, signatureR, signatureS, signatureV) => {\n    var Accounts = require('web3-eth-accounts')\n    var accounts = new Accounts()\n    const keccak256 = require('keccak256')\n    var recoverAddress\n    try {\n        recoverAddress = accounts.recover({\n            messageHash: '0x' + keccak256(message).toString('hex'),\n            r: signatureR,\n            s: signatureS,\n            v: signatureV,\n        })\n    } catch (error) {\n        recoverAddress = ''\n    }\n\n    return recoverAddress\n    /*\n    return window.web3.eth.accounts.recover({\n        messageHash: hashedMessage,\n        r: signatureR,\n        s: signatureS,\n        v: signatureV,\n    })\n    */\n}\n\nconst recoverEthereumAddress = (message, signatureR, signatureS, signatureV) => {\n    var Accounts = require('web3-eth-accounts')\n    var accounts = new Accounts()\n    //const web3 = new Web3();\n    const hashedMessage = accounts.hashMessage(message)\n    var recoverAddress\n    try {\n        //recoverAddress = web3.eth.accounts.recover(message, signatureV, signatureR, signatureS, false);\n        recoverAddress = accounts.recover({\n            messageHash: hashedMessage,\n            r: signatureR,\n            s: signatureS,\n            v: signatureV,\n        })\n    } catch (error) {\n        recoverAddress = ''\n    }\n\n    return recoverAddress\n    /*\n    return window.web3.eth.accounts.recover({\n        messageHash: hashedMessage,\n        r: signatureR,\n        s: signatureS,\n        v: signatureV,\n    })\n    */\n}\n\nexport { enableEthService, toSha3String, recoverAddress, recoverEthereumAddress }\n","import { hexToBytes, sha256HexString, sha256ToHex, sha256toInt8Arr } from './hashUtil'\nimport { buildReceiptToDigestContent } from './messageBuilderUtil'\n\nconst getLeafNode = (index, interNodes) => {\n    const sliceListSize = interNodes.length\n    var leafNode\n    if (index % 2 === 0 || sliceListSize === 1) {\n        leafNode = interNodes[0]\n    } else {\n        leafNode = interNodes[1]\n    }\n    // console.log('getLeafNode() leafNode=', leafNode)\n    return leafNode\n}\n\nconst isLeafNode = (slice, pbPair) => {\n    const tokens = slice.split('.')\n    // console.log('isLeafNode() tokens=', tokens)\n    const sliceIndex = tokens[0]\n    // console.log('isLeafNode() sliceIndex=', sliceIndex)\n\n    const interNodes = tokens.slice(1)\n    // console.log('isLeafNode() interNodes=', interNodes)\n\n    const leafNode = getLeafNode(sliceIndex, interNodes)\n    console.log('leafNode=', leafNode.toString().toLowerCase())\n\n    // const valueList = pbPair.map((pair) => {\n    //     return hexToBytes(pair.value)\n    // })\n\n    // console.log('valueList=', valueList)\n    // const pbPairHashValue = sha256ByteArrayToHex(valueList)\n\n    var valueString = ''\n    pbPair.map((pbPairValue) => {\n        valueString += pbPairValue.value\n    })\n\n    const pbPairHashValue = sha256HexString(valueString)\n\n    console.log('pbPairHashValue=', pbPairHashValue.toString().toLowerCase())\n\n    return leafNode.toString().toLowerCase() === pbPairHashValue.toString().toLowerCase()\n}\n\nconst arrayEqual = (arr1, arr2) => {\n    // console.log('arrayEqual() arr1=', arr1, 'arr2=', arr2)\n    if ((!arr1 && arr2) || (arr1 && !arr2)) {\n        return false\n    }\n\n    if (arr1.length !== arr2.length) {\n        return false\n    }\n\n    for (var i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false\n        }\n    }\n\n    return true\n}\n\nconst isReceiptInPbPair = (receipt, pbPair) => {\n    const indexValueHash = sha256ToHex(receipt.indexValue)\n    // console.log('isReceiptInPbPair() indexValueHash=', indexValueHash)\n\n    const receiptDigestContent = buildReceiptToDigestContent(receipt)\n    const receiptDigestValue = sha256toInt8Arr(receiptDigestContent)\n    // console.log('isReceiptInPbPair() receiptDigestValue=', receiptDigestValue)\n\n    var result = false\n    for (let i = 0; i < pbPair.length; i++) {\n        if (String(indexValueHash).toLowerCase() === String(pbPair[i].keyHash).toLowerCase()) {\n            // console.log('found receipt location')\n            result = arrayEqual(hexToBytes(pbPair[i].value), receiptDigestValue)\n            break\n        }\n    }\n    return result\n}\n\nconst evalRootHashFromSlice = (sliceString) => {\n    const tokens = sliceString.split('.')\n    var index = Number(tokens[0])\n    var treeHeight = Math.floor(tokens.length / 2)\n    var pass = true\n\n    for (let i = 1; index > 1; i += 2, index = Math.floor(index / 2), treeHeight--) {\n        var parentIndex = i + 2 + ((Math.floor(index / 2) === 1 ? 0 : Math.floor(index / 2)) % 2)\n        var parentDigestToHex = sha256HexString(tokens[i] + tokens[i + 1])\n\n        if (parentDigestToHex !== tokens[parentIndex]) {\n            pass = false\n        }\n    }\n\n    const merkleTreeReport = {\n        slice: sliceString,\n        maxLevel: (tokens.length + 1) / 2 - 1,\n    }\n    const verifySliceReport = {\n        pass: pass,\n        merkleTreeReport: merkleTreeReport,\n    }\n    return verifySliceReport\n}\n\nconst getRootHashFromSlice = (sliceString) => {\n    if (!sliceString) {\n        return null\n    }\n\n    const tokens = sliceString.split('.')\n    var index = Number(tokens[0])\n    var parentIndex = 1\n    var parentDigestHex = tokens[1]\n\n    for (let i = 1; index > 1; i += 2, index = Math.floor(index / 2)) {\n        if (i === parentIndex) {\n            parentDigestHex = sha256HexString(parentDigestHex + tokens[i + 1])\n        } else {\n            parentDigestHex = sha256HexString(tokens[i] + parentDigestHex)\n        }\n\n        parentIndex = i + 2 + ((Math.floor(index / 2) === 1 ? 0 : Math.floor(index / 2)) % 2)\n    }\n\n    return parentDigestHex\n}\n\nconst isLeafNodeWithReport = (slice, pbPair) => {\n    const tokens = slice.split('.')\n    const sliceIndex = tokens[0]\n    const interNodes = tokens.slice(1)\n    const leafNode = getLeafNode(sliceIndex, interNodes)\n\n    var valueString = ''\n    pbPair.map((pbPairValue) => {\n        valueString += pbPairValue.value\n    })\n\n    const pbPairHashValue = sha256HexString(valueString)\n    const pass = leafNode.toString().toLowerCase() === pbPairHashValue.toString().toLowerCase()\n    const report = {\n        pass: pass,\n        indexPosition: sliceIndex,\n        pbPairHashValue: pbPairHashValue,\n    }\n\n    return report\n}\n\nexport { isLeafNode, isLeafNodeWithReport, isReceiptInPbPair, evalRootHashFromSlice, getRootHashFromSlice }\n","import { verifyReceiptSignature, verifyMerkleProofSignature } from '../util/signatureUtil'\nimport { isLeafNode, isReceiptInPbPair, evalRootHashFromSlice, getRootHashFromSlice } from '../util/sliceValidationUtil'\nimport { ExistenceType } from '../../constants/ExistenceType'\nimport { ProofExistStatus } from '../../constants/ProofExistStatus'\nimport { nullException } from '../util/nullException'\n\nconst verifyPbPair = (receipt, merkleProof) => {\n    // 1. check is leaf node or not\n    const leafNodeVerifyResult = isLeafNode(merkleProof.slice, merkleProof.pbPair)\n\n    // 2. verify pbPair key value with receipt digest\n    const receiptInPbPairVerifyResult = isReceiptInPbPair(receipt, merkleProof.pbPair)\n\n    const verifyPbPar = {\n        pbPairReport: '',\n        inPbPair: leafNodeVerifyResult && receiptInPbPairVerifyResult,\n    }\n    return verifyPbPar\n}\n\nconst verifyClearanceOrder = (receiptCO, merkleProofCO, clearanceRecordCO) => {\n    return merkleProofCO === clearanceRecordCO && receiptCO === merkleProofCO\n}\n\nconst verifyMerkleProofSlice = (merkleProof) => {\n    const verifyMerkleProofSliceResult = {\n        pass: evalRootHashFromSlice(merkleProof.slice),\n        merkleTreeReport: '',\n    }\n    return verifyMerkleProofSliceResult\n}\n\nconst verifyRootHash = (merkleProof, clearanceRecord) => {\n    const rootHashFromSlice = getRootHashFromSlice(merkleProof.slice)\n    const verifyRootHashResult = rootHashFromSlice && rootHashFromSlice === clearanceRecord.rootHash\n    return verifyRootHashResult\n}\n\nconst verify = (receipt, merkleProof, serverWalletAddress, clearanceRecord) => {\n    console.log(\n        'verify() receipt = ' + receipt + ', merkleProof = ' + merkleProof + ', clearanceRecord = ' + clearanceRecord,\n    )\n\n    if (receipt === null) {\n        throw nullException('receipt is null')\n    } else if (merkleProof === null) {\n        throw nullException('merkleProof is null')\n    } else if (serverWalletAddress === null) {\n        throw nullException('serverWalletAddress is null')\n    } else if (clearanceRecord === null) {\n        throw nullException('clearanceRecord is null')\n    }\n\n    const rootHash = getRootHashFromSlice(merkleProof.slice)\n    const timestamp = Date.now()\n\n    var result = {\n        existenceType: ExistenceType.EXIST,\n        pass: false,\n        status: 'error',\n        txHash: clearanceRecord.txHash,\n        timestamp: timestamp,\n        ledgerInputTimestamp: receipt.timestamp,\n        receiptTimestamp: receipt.timestampSPO,\n        clearanceOrder: receipt.clearanceOrder,\n        indexValue: receipt.indexValue,\n        cmd: receipt.cmd,\n        proofExistStatus: ProofExistStatus.MODIFIED,\n        contractRootHash: clearanceRecord.rootHash,\n        merkleProofRootHash: rootHash,\n        description: 'verify fail',\n        merkleProofSignatureOk: false,\n        receiptSignatureOk: false,\n        pbPairOk: false,\n        clearanceOrderOk: false,\n        sliceOk: false,\n        clearanceRecordRootHashOk: false,\n    }\n\n    console.log('verify() initiate verify result = ', result)\n    const isReceiptSignatureOk = verifyReceiptSignature(receipt, serverWalletAddress)\n\n    if (!isReceiptSignatureOk) {\n        console.log('verify() result = ', result)\n        return result\n    } else {\n        result.receiptSignatureOk = true\n        const isMerkleProofSignatureOk = verifyMerkleProofSignature(merkleProof, serverWalletAddress)\n        if (!isMerkleProofSignatureOk) {\n            console.log('verify() result = ', result)\n            return result\n        } else {\n            result.merkleProofSignatureOk = true\n            const isClearanceOrderCorrect = verifyClearanceOrder(\n                receipt.clearanceOrder,\n                merkleProof.clearanceOrder,\n                clearanceRecord.clearanceOrder,\n            )\n            if (!isClearanceOrderCorrect) {\n                console.log('verify() result = ', result)\n                return result\n            } else {\n                result.clearanceOrderOk = true\n                const verifyPbPairReport = verifyPbPair(receipt, merkleProof)\n                result.pbPairReport = verifyPbPairReport.pbPairReport\n                const isPbPairOk = verifyPbPairReport.inPbPair\n\n                if (!isPbPairOk) {\n                    console.log('verify() result = ', result)\n                    return result\n                } else {\n                    result.pbPairOk = true\n                    const verifySliceReport = verifyMerkleProofSlice(merkleProof)\n                    result.merkleTreeReport = verifySliceReport.merkleTreeReport\n                    const isSliceOk = verifySliceReport.pass\n                    if (!isSliceOk) {\n                        console.log('verify() result = ', result)\n                        return result\n                    } else {\n                        result.sliceOk = true\n                        const isRootHashCorrect = verifyRootHash(merkleProof, clearanceRecord)\n                        if (!isRootHashCorrect) {\n                            console.log('verify() result = ', result)\n                            return result\n                        } else {\n                            result.clearanceRecordRootHashOk = true\n                            result.pass = true\n                            result.status = 'ok'\n                            result.proofExistStatus = ProofExistStatus.PASS\n                            result.description = 'ok'\n                            console.log('verify() result = ', result)\n                            return result\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport { verify }\n","import { ProofExistStatus } from '../../constants/ProofExistStatus'\nimport { VerifyNotExistProofStatus } from '../../constants/VerifyNotExistProofStatus'\nimport { StatusConstantsString } from '../../constants/StatusConstantsString'\nimport { ExistenceType } from '../../constants/ExistenceType'\nimport { QueryType } from '../../constants/QueryType'\nimport { isRootHashEqual } from '../util/clearanceRecordVerifyUtil'\nimport { verifyMerkleProofSignature } from '../util/signatureUtil'\nimport { isLeafNodeWithReport, evalRootHashFromSlice, getRootHashFromSlice } from '../util/sliceValidationUtil'\nimport { sha256ToHex } from '../util/hashUtil'\nimport { verify } from './verifyReceiptAndMerkleProofService'\nimport { nullException } from '../util/nullException'\n\nconst collectExistenceProofByClearanceOrder = (clearanceOrder, proof) => {\n    console.log(\n        'collectExistenceProofByClearanceOrder() clearanceOrder ',\n        clearanceOrder,\n        ', verificationProof = ',\n        proof,\n    )\n    var existenceProofList = proof.existenceProofs\n        .filter((existenceProof) => existenceProof.clearanceOrder === clearanceOrder)\n        .sort(\n            (a, b) =>\n                getIndexValuePropertiesFromIndexValue(a.indexValue).sn -\n                getIndexValuePropertiesFromIndexValue(b.indexValue).sn,\n        )\n    console.log('collectExistenceProofByClearanceOrder() existenceProofList ', existenceProofList)\n    return existenceProofList\n}\n\nconst verifyExistenceProofWithNotExist = (existenceProofListInSameCO, serverWalletAddress, clearanceRecord, query) => {\n    console.log(\n        'verifyExistenceProofWithNotExist() existenceProofListSize = ' +\n            existenceProofListInSameCO.length +\n            ', serverWalletAddress = ' +\n            serverWalletAddress +\n            ', clearanceRecord = ' +\n            clearanceRecord,\n    )\n    var proofResultList = []\n    var pass = true\n    var successCount = 0\n    var modifiedCount = 0\n    var removedCount = 0\n    var addedCount = 0\n\n    const notExistProofList = findNotExistProofList(existenceProofListInSameCO)\n    console.log('verifyExistenceProofWithNotExist() notExistProofListSize = ' + notExistProofList.length)\n    const successNotExistProofInfo = verifyNotExistProofList(\n        notExistProofList,\n        serverWalletAddress,\n        clearanceRecord,\n        query,\n    )\n    console.log('verifyExistenceProofWithNotExist() successNotExistProofInfo = ' + successNotExistProofInfo)\n    const firstSuccessNotExistProofSn = getSnFromNotExistProofSuccessInfo(successNotExistProofInfo)\n    var currentSN = getCurrentSnFromQuery(clearanceRecord, query)\n\n    for (var i = 0; i < existenceProofListInSameCO.length; i++) {\n        var currentProof = existenceProofListInSameCO[i]\n        var indexValueProperties = getIndexValuePropertiesFromIndexValue(currentProof.indexValue)\n\n        if (currentSN < indexValueProperties.sn && indexValueProperties.sn < firstSuccessNotExistProofSn) {\n            const removedProofResultList = buildRemovedProofResultList(\n                clearanceRecord.clearanceOrder,\n                query.indexValueKey,\n                currentSN,\n                indexValueProperties.sn - 1,\n            )\n            console.log(\n                'verifyExistenceProofWithNotExist () removedProofResultListSize = ',\n                removedProofResultList.length,\n            )\n            removedCount = removedCount + removedProofResultList.length\n            currentSN = indexValueProperties.sn\n            for (var j = 0; j < removedProofResultList.length; j++) {\n                proofResultList.push(removedProofResultList[j])\n            }\n        }\n\n        var result\n\n        if (currentSN === indexValueProperties.sn && indexValueProperties.sn < firstSuccessNotExistProofSn) {\n            console.log('First if', currentProof)\n            result = verifyReceiptAndMerkleProof(currentProof, serverWalletAddress, clearanceRecord)\n        } else if (\n            currentSN === firstSuccessNotExistProofSn &&\n            successNotExistProofInfo.notExistProof === currentProof\n        ) {\n            console.log('Second if', currentProof)\n            result = successNotExistProofInfo.verifyResult\n        } else {\n            console.log('Third if', currentProof)\n            result = verifyNotExistProof(currentProof, serverWalletAddress, clearanceRecord, query.fromCO, query.toCO)\n            result.proofExistStatus = ProofExistStatus.ADDED\n        }\n        pass = pass && result.pass\n\n        console.log('verifyExistenceProofWithNotExist() pass = ' + pass + ', result = ' + result.pass)\n        if (ProofExistStatus.PASS === result.proofExistStatus) {\n            successCount++\n        } else if (ProofExistStatus.MODIFIED === result.proofExistStatus) {\n            modifiedCount++\n        } else {\n            addedCount++\n        }\n        proofResultList.push(result)\n\n        if (\n            i + 1 < existenceProofListInSameCO.length &&\n            !isNextExistenceProofHaveSameCOIV(currentProof, existenceProofListInSameCO[i + 1])\n        ) {\n            currentSN++\n        }\n    }\n\n    const count = {\n        totalCount: existenceProofListInSameCO.length,\n        successCount: successCount,\n        addedCount: addedCount,\n        modifiedCount: modifiedCount,\n        removedCount: removedCount,\n    }\n\n    const verifyProofListResult = {\n        pass: pass,\n        count: count,\n        proofResultList: proofResultList,\n    }\n\n    console.log('verifyExistenceProofWithNotExist() verifyExistenceProofResult = ', verifyProofListResult)\n    return verifyProofListResult\n}\n\nconst verifyOnlyExistenceProof = (existenceProofListInSameCO, clearanceRecord, serverWalletAddress) => {\n    console.log(\n        'verifyOnlyExistenceProof() existenceProofListSize = ',\n        existenceProofListInSameCO.length,\n        ', clearanceRecord = ',\n        clearanceRecord,\n    )\n\n    var pass = true\n    var successCount = 0\n    var modifiedCount = 0\n    var existProofResultList = []\n\n    for (var existenceProof of existenceProofListInSameCO) {\n        var result = verifyReceiptAndMerkleProof(existenceProof, serverWalletAddress, clearanceRecord)\n        pass = pass && result.pass\n        existProofResultList.push(result)\n\n        if (ProofExistStatus.PASS === result.proofExistStatus) {\n            successCount++\n        } else if (ProofExistStatus.MODIFIED === result.proofExistStatus) {\n            modifiedCount++\n        }\n    }\n\n    const count = {\n        totalCount: existenceProofListInSameCO.length,\n        successCount: successCount,\n        addedCount: 0,\n        modifiedCount: modifiedCount,\n        removedCount: 0,\n    }\n\n    const existenceProofResult = {\n        pass: pass,\n        count: count,\n        proofResultList: existProofResultList,\n    }\n\n    console.log('verifyOnlyExistenceProof() existenceProofResult = ', existenceProofResult)\n    return existenceProofResult\n}\n\nconst getIndexValuePropertiesFromIndexValue = (indexValue) => {\n    const pattern = '(.+)_R(\\\\d+)$'\n    const matcher = indexValue.match(pattern)\n    var indexValueKey\n    var sn\n    var result = null\n\n    if (matcher.length > 0) {\n        indexValueKey = matcher[1]\n        sn = parseInt(matcher[2], 10)\n    } else {\n        console.error('parse IndexValueProperties error: indexValue = ' + indexValue)\n    }\n\n    result = {\n        indexValueKey: indexValueKey,\n        sn: sn,\n    }\n\n    return result\n}\n\nconst findNotExistProofList = (existenceProofList) => {\n    console.log('findNotExistProofList() existenceProofListSize = ', existenceProofList.length)\n    const notExistProofList = existenceProofList.filter((existenceProof) => !existenceProof.exist)\n    console.log('findNotExistProofList() notExistProofList = ', notExistProofList)\n    return notExistProofList\n}\n\nconst verifyNotExistProofList = (notExistProofList, serverWalletAddress, clearanceRecord, query) => {\n    console.log(\n        'verifyNotExistProofList() notExistProofListSize = ',\n        notExistProofList.length,\n        ', serverWalletAddress = ',\n        serverWalletAddress,\n        ', ClearanceRecord = ',\n        clearanceRecord,\n        ', query = ',\n        query,\n    )\n    var result = null\n\n    for (var notExistProof of notExistProofList) {\n        const verifyResult = verifyNotExistProof(\n            notExistProof,\n            serverWalletAddress,\n            clearanceRecord,\n            query.fromCO,\n            query.toCO,\n        )\n        if (verifyResult.pass) {\n            result = {\n                notExistProof: notExistProof,\n                verifyResult: verifyResult,\n            }\n            break\n        }\n    }\n\n    console.log('verifyNotExistProofList() end, result = ', result)\n    return result\n}\n\nconst getSnFromNotExistProofSuccessInfo = (info) => {\n    console.log('getSnFromNotExistProofSuccessInfo() info = ', info)\n    var sn = null\n\n    if (info === null || info.notExistProof === null) {\n        sn = Number.MAX_SAFE_INTEGER\n    } else {\n        var properties = getIndexValuePropertiesFromIndexValue(info.notExistProof.indexValue)\n        sn = properties.sn\n    }\n    console.log('getSnFromNotExistProofSuccessInfo() sn = ', sn)\n    return sn\n}\n\nconst getCurrentSnFromQuery = (clearanceRecord, query) => {\n    console.log('getCurrentSnFromQuery() clearanceRecord = ', clearanceRecord + ', query =', query)\n\n    var sn = 0\n    if (QueryType.CLEARANCE_ORDER_AND_SN === query.type) {\n        if (clearanceRecord.clearanceOrder === query.fromCO) {\n            sn = query.fromSN\n        }\n    }\n    console.log('getCurrentSnFromQuery() sn = ', sn)\n    return sn\n}\n\nconst buildRemovedProofResultList = (clearanceOrder, indexValueKey, fromSn, toSn) => {\n    console.log(\n        'buildRemovedProofResultList() clearanceOrder=,',\n        clearanceOrder,\n        ', indexValueKey=',\n        indexValueKey,\n        ', fromSn=',\n        fromSn,\n        ', toSn=',\n        toSn,\n    )\n    var resultList = []\n\n    for (var i = fromSn; i <= toSn; i++) {\n        const result = {\n            clearanceOrder: clearanceOrder,\n            indexValue: indexValueKey + '_R' + i,\n            pass: false,\n            proofExistStatus: ProofExistStatus.REMOVED,\n            existenceType: ExistenceType.EXIST,\n        }\n        resultList.push(result)\n    }\n\n    console.log('buildRemovedProofResultList() resultListSize = ', resultList.length)\n    return resultList\n}\n\nconst verifyNotExistProof = (proof, serverWalletAddress, contractClearanceRecord, fromCO, toCO) => {\n    const isMerkleProofSignature = verifyMerkleProofSignature(proof.merkleProof, serverWalletAddress)\n    const verifyNotExistReport = verifyNotExistMerkleProofAndReceipt(\n        proof,\n        fromCO,\n        toCO,\n        contractClearanceRecord,\n        serverWalletAddress,\n    )\n    var verifyNotExistProofStatus\n\n    if (isMerkleProofSignature) {\n        verifyNotExistProofStatus = verifyNotExistReport.verifyNotExistProofStatus\n    } else {\n        verifyNotExistProofStatus = VerifyNotExistProofStatus.ERROR_SIGNATURE\n    }\n\n    var pass = !proof.exist\n    if (\n        VerifyNotExistProofStatus.OK_CLEARANCE_NOT_BETWEEN_SEARCH_TIME !== verifyNotExistProofStatus &&\n        VerifyNotExistProofStatus.OK_INDEX_VALUE_NOT_FOUND !== verifyNotExistProofStatus &&\n        VerifyNotExistProofStatus.OK_RECEIPT_AND_MERKLE_PROOF_SHOULD_BE_END_OF_PROOF !== verifyNotExistProofStatus\n    ) {\n        pass = false\n    }\n\n    var merkleProofRootHash = null\n    if (proof.merkleProof !== null) {\n        merkleProofRootHash = getRootHashFromSlice(proof.merkleProof.slice)\n    }\n\n    const result = {\n        pass: pass,\n        proofExistStatus: pass ? ProofExistStatus.PASS : ProofExistStatus.MODIFIED,\n        status: pass ? StatusConstantsString.OK : StatusConstantsString.ERROR,\n        existenceType: ExistenceType.NOT_EXIST,\n        clearanceOrder: proof.clearanceOrder,\n        indexValue: proof.indexValue,\n        verifyNotExistProofResult: verifyNotExistProofStatus,\n        merkleProofSignatureOk: isMerkleProofSignature,\n        merkleProofRootHash: merkleProofRootHash,\n        contractRootHash: contractClearanceRecord.rootHash,\n        txHash: contractClearanceRecord.txHash,\n        pbPairReport: verifyNotExistReport.pbPairReport,\n        merkleTreeReport: verifyNotExistReport.merkleTreeReport,\n    }\n\n    return result\n}\n\nconst verifyReceiptAndMerkleProof = (existenceProof, serverWalletAddress, clearanceRecord) => {\n    console.log('verify() existenceProof = ', existenceProof, ', clearanceRecord = ', clearanceRecord)\n    if (existenceProof === null) {\n        throw nullException('existenceProof is null')\n    } else if (serverWalletAddress === null) {\n        throw nullException('serverWallet is null')\n    } else if (clearanceRecord === null) {\n        throw nullException('clearanceRecord is null')\n    }\n    const receipt = existenceProof.receipt\n    const result = verify(receipt, existenceProof.merkleProof, serverWalletAddress, clearanceRecord)\n    const clearanceOrderAndIndexValueOk =\n        existenceProof.clearanceOrder === (receipt === null ? null : receipt.clearanceOrder) &&\n        existenceProof.indexValue === (receipt === null ? null : receipt.indexValue)\n    result.pass = result.pass && existenceProof.exist && clearanceOrderAndIndexValueOk\n    result.proofExistStatus = result.pass ? ProofExistStatus.PASS : ProofExistStatus.MODIFIED\n    result.clearanceOrder = existenceProof.clearanceOrder\n    result.indexValue = existenceProof.indexValue\n    console.log('verify() result = ', result)\n    return result\n}\n\nconst isNextExistenceProofHaveSameCOIV = (currentProof, nextProof) => {\n    console.log('isNextExistenceProofHaveSameCOIV() currentProof = ', currentProof + ', nextProof = ', nextProof)\n    var result = false\n    if (\n        currentProof.indexValue.toLowerCase() === nextProof.indexValue.toLowerCase() &&\n        currentProof.clearanceOrder === nextProof.clearanceOrder\n    ) {\n        result = true\n    }\n\n    console.log('isNextExistenceProofHaveSameCOIV() result = ', result)\n    return result\n}\n\nconst verifyNotExistMerkleProofAndReceipt = (proof, fromCO, toCO, cr, serverWalletAddress) => {\n    console.log(\n        'verifyNotExistMerkleProofAndReceipt() proof = ',\n        proof + ', fromCO = ',\n        fromCO + ', toCO = ',\n        toCO + ', cr = ',\n        cr,\n        ', serverWalletAddress = ',\n        serverWalletAddress,\n    )\n\n    const merkleProof = proof.merkleProof\n    const indexValue = proof.indexValue\n    const receipt = proof.receipt\n\n    const verifyPbPairReport = verifyNotExistPbPair(merkleProof, indexValue)\n    const verifySliceReport = evalRootHashFromSlice(merkleProof.slice)\n    const rootHashEqual = isRootHashEqual(cr, getRootHashFromSlice(merkleProof.slice))\n\n    var status = null\n    if (verifyPbPairReport.inPbPair) {\n        if (receipt !== null) {\n            if (proof.clearanceOrder > toCO || proof.clearanceOrder < fromCO) {\n                status = VerifyNotExistProofStatus.OK_CLEARANCE_NOT_BETWEEN_SEARCH_TIME\n            } else {\n                if (!verify(receipt, merkleProof, serverWalletAddress, cr).pass) {\n                    status = VerifyNotExistProofStatus.ERROR_INDEX_VALUE_IN_PAIR\n                } else {\n                    status = VerifyNotExistProofStatus.OK_RECEIPT_AND_MERKLE_PROOF_SHOULD_BE_END_OF_PROOF\n                }\n            }\n        } else {\n            status = VerifyNotExistProofStatus.ERROR_INDEX_VALUE_IN_PAIR\n        }\n    } else {\n        status = VerifyNotExistProofStatus.OK_INDEX_VALUE_NOT_FOUND\n    }\n    if (rootHashEqual === false) {\n        status = VerifyNotExistProofStatus.ERROR_ROOT_HASH_ERROR\n    }\n    if (verifySliceReport.pass === false) {\n        status = VerifyNotExistProofStatus.ERROR_SLICE_ERROR\n    }\n\n    const verifyNotExistReport = {\n        pbPairReport: verifyPbPairReport.pbPairReport,\n        merkleTreeReport: verifySliceReport.merkleTreeReport,\n        verifyNotExistProofStatus: status,\n    }\n\n    console.log('verifyNotExistMerkleProofAndReceipt() verifyNotExistReport = ', verifyNotExistReport)\n    return verifyNotExistReport\n}\n\nconst verifyNotExistPbPair = (merkleProof, indexValue) => {\n    console.log('verifyNotExistPbPair() merkleProof = ', merkleProof, ', indexValue = ', indexValue)\n    var isInPbPair = false\n\n    for (var pbPairValue of merkleProof.pbPair) {\n        const indexValueHash = sha256ToHex(indexValue)\n        const key = pbPairValue.keyHash\n        isInPbPair = indexValueHash.toLowerCase() === key.toLowerCase()\n        if (isInPbPair) {\n            break\n        }\n    }\n    const verifyLeafNodeReport = isLeafNodeWithReport(merkleProof.slice, merkleProof.pbPair)\n\n    const pbPairReport = {\n        containDataCount: merkleProof.pbPair.length,\n        leafNodeHashValue: verifyLeafNodeReport.pbPairHashValue,\n        indexPosition: verifyLeafNodeReport.indexPosition,\n        pbPair: merkleProof.pbPair,\n    }\n\n    const verifyPbPairReport = {\n        inPbPair: isInPbPair,\n        pbPairReport: pbPairReport,\n    }\n\n    console.log('verifyNotExistPbPair() verifyPbPairReport = ', verifyPbPairReport)\n    return verifyPbPairReport\n}\n\nconst getNextExistenceProof = (index, existenceProofList) => {\n    console.log('getNextExistenceProof() index = ', index, ', existenceProofListSize = ', existenceProofList.length)\n    var result = null\n    var nextIndex = index + 1\n    if (nextIndex < existenceProofList.length) {\n        result = existenceProofList[nextIndex]\n    }\n    console.log('getNextExistenceProof() result = ', result)\n    return result\n}\n\nexport {\n    collectExistenceProofByClearanceOrder,\n    getIndexValuePropertiesFromIndexValue,\n    buildRemovedProofResultList,\n    verifyExistenceProofWithNotExist,\n    verifyOnlyExistenceProof,\n    findNotExistProofList,\n    verifyNotExistProofList,\n    isNextExistenceProofHaveSameCOIV,\n    getNextExistenceProof,\n    getSnFromNotExistProofSuccessInfo,\n    verifyReceiptAndMerkleProof,\n}\n","const isRootHashEqual = (record, rootHash) => {\n    console.log(`isRootHashEqual() CR = ${record}, rootHash=${rootHash}`)\n    var pass = false\n\n    if (record !== null) {\n        pass = record.rootHash === rootHash\n    }\n\n    console.log('isRootHashEqual() pass = ' + pass)\n    return pass\n}\n\nexport { isRootHashEqual }\n","import { parse } from '../util/queryStringParser'\nimport { buildVerifiedClearanceRecordInfoMap } from './verifyClearanceRecordServiceAdapter'\nimport { buildVerifiedClearanceRecordInfoMap_2_3_0 } from './verifyClearanceRecordServiceAdapter_2_3_0'\nimport {\n    collectExistenceProofByClearanceOrder,\n    verifyExistenceProofWithNotExist,\n    verifyOnlyExistenceProof,\n} from './verifyProofListService'\nimport { VerifyVerificationProofStatus } from '../../constants/VerifyVerificationProofStatus'\nimport { verifyProofSignature } from '../util/signatureUtil'\nimport { buildProofMessage, buildProofMessageFail } from '../util/messageBuilderUtil'\nimport { buildProofSignaturePassReport } from '../util/verifyReportUtil'\nimport { QueryType } from '../../constants/QueryType'\nimport { getRootHashFromSlice } from '../util/sliceValidationUtil'\nimport { StatusConstantsString } from '../../constants/StatusConstantsString'\nimport { ExistenceType } from '../../constants/ExistenceType'\nimport { ProofExistStatus } from '../../constants/ProofExistStatus'\nimport { VerifyNotExistProofStatus } from '../../constants/VerifyNotExistProofStatus'\nimport { loadContract } from './clearanceRecordService'\n// import { enableEthService } from '../util/ethUtil'\n\n/**\n * @function : verifyExistenceProof\n *\n * @description : Verify existence proof\n *\n * @param {verificationProof} proof : verification proof in JSON format\n * @param {String} latestCR : latest clearance record\n * @param {String} nodeUrl : nodeUrl\n *\n * @returns : result\n */\nconst verifyExistenceProof = async (proof, latestCR, nodeUrl) => {\n    //console.log('verifyExistenceProof() proof = ', proof, ' latestClearanceRecord = ', latestCR, ' nodeUrl = ', nodeUrl );\n    var report = {\n        verifyReportType: undefined,\n        generalReport: undefined,\n        verifyExceptionReport: undefined,\n        verifyProofSigReport: undefined,\n        verifyLastClearanceRecordReport: undefined,\n        verifyClearanceRecordReportList: undefined,\n        verifyExistenceProofList: undefined,\n    }\n    report.verifyExistenceProofList = []\n    const query = parse(proof.query)\n    const proofSignaturePass = isProofSignaturePass(proof, report)\n    const contractVersion = await obtainVersionFromContract(proof.contractAddress, nodeUrl)\n    var verifiedCrMap\n\n    if (contractVersion.startsWith('2.3.0')) {\n        verifiedCrMap = buildVerifiedClearanceRecordInfoMap_2_3_0(proof.clearanceRecords, latestCR, report)\n    } else {\n        verifiedCrMap = buildVerifiedClearanceRecordInfoMap(proof.clearanceRecords, latestCR, report)\n    }\n\n    const crPass = isCrListPass(verifiedCrMap)\n    var existProofResults = []\n    var errorCoList = []\n    var count = {\n        totalCount: 0,\n        successCount: 0,\n        modifiedCount: 0,\n        removedCount: 0,\n        addedCount: 0,\n    }\n    var pass = proofSignaturePass && crPass\n    const clearanceOrderList = collectProofClearanceOrderReversedList(proof.existenceProofs)\n    for (var clearanceOrder of clearanceOrderList) {\n        const verifiedClearanceRecordInfo = verifiedCrMap[clearanceOrder]\n        const existenceProofList = collectExistenceProofByClearanceOrder(clearanceOrder, proof)\n        const verifySingleCOExistenceProofInput = {\n            query: query,\n            serverWalletAddress: proof.serverWalletAddress,\n            isLatestCO: latestCR.clearanceOrder === clearanceOrder,\n            verifiedClearanceRecordInfo: verifiedClearanceRecordInfo,\n            existenceProofList: existenceProofList,\n        }\n        const result = verifySingleCOExistenceProof(verifySingleCOExistenceProofInput)\n        addCount(count, result.count)\n        pass = pass && result.pass\n        addAllIfNotNull(existProofResults, result.existenceProofResultList)\n\n        if (result.coError) {\n            errorCoList.push(clearanceOrder)\n        }\n    }\n\n    const result = {\n        query: proof.query,\n        queryType: query.type,\n        totalCount: count.totalCount,\n        successCount: count.successCount,\n        modifiedCount: count.modifiedCount,\n        removedCount: count.removedCount,\n        addedCount: count.addedCount,\n        status: pass ? VerifyVerificationProofStatus.ALL_PASS : VerifyVerificationProofStatus.SIG_ERROR,\n        verifyReceiptResult: existProofResults,\n        errorClearanceOrderInClearanceRecordList: errorCoList,\n        verifyReport: report,\n    }\n\n    //console.log('verifyExistenceProof() result = ', result );\n    return result\n}\n\n/**\n * @function : isProofSignaturePass\n *\n * @description : check whether the proof signature is pass\n *\n * @param {verificationProof} proof : verification proof in JSON format\n * @param {report} report : store verify information message\n *\n * @returns : boolean\n */\nconst isProofSignaturePass = (proof, report) => {\n    var first = true\n    var proofSignaturePass = verifyProofSignature(proof, first)\n    var signData = buildProofMessage(proof)\n    report.verifyProofSigReport = buildProofSignaturePassReport(\n        proof.serverWalletAddress,\n        proof.sigServer,\n        signData,\n        proofSignaturePass,\n    )\n\n    if (!proofSignaturePass) {\n        first = false\n        signData = buildProofMessageFail(proof)\n        proofSignaturePass = verifyProofSignature(proof, first)\n        console.log('buildProofMessageFail new signData=', signData)\n        if (proofSignaturePass) {\n            report.verifyProofSigReport = buildProofSignaturePassReport(\n                proof.serverWalletAddress,\n                proof.sigServer,\n                signData,\n                proofSignaturePass,\n            )\n        }\n    }\n    console.log('isProofSignaturePass() proofSignaturePass = ', proofSignaturePass)\n    return proofSignaturePass\n}\n\n/**\n * @function : obtainVersionFromContract\n *\n * @description : Get contract version by calling Web3 API\n *\n * @note : Remember to use MetaMask to connect to blockchain. Comment out enableEthService()\n *\n * @param {String} contractAddress : contract address\n * @param {String} nodeUrl :  nodeUrl\n *\n * @returns : contract version\n */\nconst obtainVersionFromContract = async (contractAddress, nodeUrl) => {\n    //console.log('obtainVersionFromContract() contraceAddress = ' + contractAddress);\n    //enableEthService();\n    const spoContract = loadContract(contractAddress, nodeUrl)\n    const contractVersion = await spoContract.methods.version().call()\n    return contractVersion\n}\n\n/**\n * @function : isCrListPass\n *\n * @description : check whether the verified clearance record list is all pass.\n *\n * @param crMap : verified clearance record info object\n *\n * @returns : boolean\n */\nconst isCrListPass = (crMap) => {\n    //console.log('isCrListPass() crMap = ', crMap);\n    const falseInfo = Object.values(crMap).filter((cr) => !cr.pass)\n    var result = true\n    if (falseInfo.length > 0) {\n        result = false\n    }\n    //console.log('isCrListPass() result =', result);\n    return result\n}\n\n/**\n * @function : collectProofClearanceOrderReversedList\n *\n * @description : check whether the verified clearance record list is all pass.\n *\n * @note :\n *\n * @param existenceProofList :  List of existence proof\n *\n * @returns : boolean\n */\n\nconst collectProofClearanceOrderReversedList = (existenceProofList) => {\n    console.log('collectProofClearanceOrderReversedList() existenceProof = ', existenceProofList)\n    const clearanceOrderList = Array.from(\n        new Set(existenceProofList.map((existenceProof) => existenceProof.clearanceOrder).reverse()),\n    )\n    console.log('collectProofClearanceOrderReversedList() clearanceOrderList = ', clearanceOrderList)\n    return clearanceOrderList\n}\n\nconst addCount = (count, resultCount) => {\n    count.totalCount = count.totalCount + resultCount.totalCount\n    count.successCount = count.successCount + resultCount.successCount\n    count.modifiedCount = count.modifiedCount + resultCount.modifiedCount\n    count.removedCount = count.removedCount + resultCount.removedCount\n    count.addedCount = count.addedCount + resultCount.addedCount\n}\n\nconst verifySingleCOExistenceProof = (input) => {\n    console.log('verifySingleCOExistenceProof() input = ', input)\n    var pass = false\n    var coError = false\n    var count = {\n        totalCount: 0,\n        successCount: 0,\n        modifiedCount: 0,\n        removedCount: 0,\n        addedCount: 0,\n    }\n    var resultList = []\n    const verifiedClearanceRecordInfo = input.verifiedClearanceRecordInfo\n    if (\n        (verifiedClearanceRecordInfo !== undefined &&\n            verifiedClearanceRecordInfo !== null &&\n            verifiedClearanceRecordInfo.pass) ||\n        input.isLatestCO\n    ) {\n        const contractClearanceRecord = verifiedClearanceRecordInfo.clearanceRecord\n        var verifyProofListResult\n\n        if (input.query.type !== QueryType.LOCATOR) {\n            verifyProofListResult = verifyExistenceProofWithNotExist(\n                input.existenceProofList,\n                input.serverWalletAddress,\n                contractClearanceRecord,\n                input.query,\n            )\n        } else {\n            verifyProofListResult = verifyOnlyExistenceProof(\n                input.existenceProofList,\n                contractClearanceRecord,\n                input.serverWalletAddress,\n            )\n        }\n        addCount(count, verifyProofListResult.count)\n        pass = verifyProofListResult.pass\n        addAllIfNotNull(resultList, verifyProofListResult.proofResultList)\n    }\n\n    if (\n        verifiedClearanceRecordInfo === undefined ||\n        verifiedClearanceRecordInfo === null ||\n        !verifiedClearanceRecordInfo.pass\n    ) {\n        coError = true\n        if (!input.isLatestCO) {\n            const failResult = buildClearanceRecordFailResult(input.existenceProofList, verifiedClearanceRecordInfo)\n            const verifyProofCount = {\n                totalCount: failResult.length,\n                successCount: 0,\n                modifiedCount: failResult.length,\n                removedCount: 0,\n                addedCount: 0,\n            }\n            addCount(count, verifyProofCount)\n            resultList.push.apply(resultList, failResult)\n        }\n    }\n\n    const result = {\n        count: count,\n        pass: pass,\n        existenceProofResultList: resultList,\n        coError: coError,\n    }\n\n    console.log('verifySingleCOExistenceProof() result = ', result)\n    return result\n}\n\nconst failResult = (proof, verifiedClearanceRecordInfo) => {\n    const receipt = proof.receipt\n    const rootHash = getRootHashFromSlice(proof.merkleProof.slice)\n    const clearanceRecordRootHash =\n        verifiedClearanceRecordInfo === null || verifiedClearanceRecordInfo === undefined\n            ? null\n            : verifiedClearanceRecordInfo.clearanceRecord.rootHash\n    const result = {\n        status: StatusConstantsString.ERROR,\n        existenceType: ExistenceType.NA,\n        proofExistStatus: ProofExistStatus.CLEARANCE_RECORD_ERROR,\n        pass: false,\n        indexValue: proof.indexValue,\n        clearanceOrder: proof.clearanceOrder,\n        verifyNotExistProofResult: VerifyNotExistProofStatus.CLEARANCE_RECORD_ERROR,\n        receiptTimestamp: receipt !== null ? receipt.timestampSPO : null,\n        ledgerInputTimestamp: receipt !== null ? receipt.timestamp : null,\n        merkleProofSignatureOk: false,\n        clearanceOrderOk: false,\n        clearanceRecordRootHashOk: false,\n        receiptSignatureOk: false,\n        pbPairOk: false,\n        sliceOk: false,\n        description: StatusConstantsString.ERROR,\n        timestamp: Date.now(),\n        cmd: receipt !== null ? receipt.cmd : null,\n        merkleProofRootHash: rootHash,\n        contractRootHash: clearanceRecordRootHash,\n    }\n\n    return result\n}\n\nconst buildClearanceRecordFailResult = (existenceProofs, verifiedClearanceRecordInfo) => {\n    console.log('buildClearanceRecordFailResult() existenceProofs = ', existenceProofs)\n    const crFailResult = existenceProofs.map((existenceProof) =>\n        failResult(existenceProof, verifiedClearanceRecordInfo),\n    )\n    console.log('buildClearanceRecordFailResult() crFailResult = ', crFailResult)\n    return crFailResult\n}\n\nconst addAllIfNotNull = (list, source) => {\n    if (source !== null) {\n        list.push.apply(list, source)\n    }\n}\n\nexport { verifyExistenceProof, collectProofClearanceOrderReversedList, isCrListPass, isProofSignaturePass }\n","export default {\n    PASS: 'PASS',\n    FAIL: 'FAIL',\n    PROOF_ERROR: 'PROOF_ERROR',\n}\n","import { obtainClearanceRecordFromContract } from './clearanceRecordService'\nimport { getFileHash } from '../util/fileUtil'\nimport { toNodeUrl } from '../util/InfuraNodeUrlConfig'\nimport { verifyExistenceProof } from './verifyVerificationProofService'\nimport { VerifyVerificationProofStatus } from '../../constants/VerifyVerificationProofStatus'\nimport VerifyResult from '../../constants/VerifyResult'\n\n/**\n * @function : verifyProof\n *\n * @description : call verify to start verify the proof\n *\n * @note : 1. Remove infureProjectId before release to public and add it to parameters\n *         2. For security, only use MetaMask to connect to blockchain\n *\n * @param proof : verification proof in JSON format\n *\n * @returns : boolean\n */\nconst verifyProof = async (proof) => {\n    const infuraProjectId = 'ac507600c7294ae38575a7f029ef7b55'\n    const result = await verify(proof, infuraProjectId)\n    console.log('verifyProof()', { result })\n    if (result.status === VerifyVerificationProofStatus.ALL_PASS) {\n        return true\n    } else {\n        return false\n    }\n}\n\n/**\n * @function : verify\n *\n * @description : call verifyExistenceProof to start verify the Proof\n *\n * @param {verificationProof} proof : verification proof in JSON format\n * @param {String} infuraProjectId : infuraProjectId\n *\n * @returns : result object\n */\nconst verify = async (proof, infuraProjectId) => {\n    //console.log('verifyService verify() proof = ' + proof + ' infuraProjectId = ' + infuraProjectId );\n\n    const nodeUrl = getNodeUrl(proof, infuraProjectId)\n    const latestCO = findLatestCO(proof)\n    const latestCR = await obtainClearanceRecordFromContract(proof.contractAddress, latestCO, nodeUrl)\n    const result = await verifyExistenceProof(proof, latestCR, nodeUrl)\n\n    console.log('verifyService verify() result = ', result)\n    return result\n}\n\n/**\n * @function : getNodeUrl\n *\n * @description : Get the nodeUrl from infureProjectId which depending on proof enviroment.\n *\n * @param {verificationProof} proof : verification proof in JSON format\n * @param {String} infuraProjectId : infuraProjectId\n *\n * @returns : nodeUrl\n */\nconst getNodeUrl = (proof, infuraProjectId) => {\n    var nodeUrl = infuraProjectId\n    switch (proof.env) {\n        case 'MAINNET':\n        case 'KOVAN':\n        case 'GOERLI':\n        case 'RINKEBY':\n        case 'ROPSTEN':\n            nodeUrl = toNodeUrl(proof.env, infuraProjectId)\n            break\n        case 'AZURE_QUORUM':\n        case 'PRIVATE_GETH':\n            nodeUrl = proof.nodeConnectionString\n            break\n        default:\n            console.error(`verify() error, env=${proof.env} error`)\n            break\n    }\n    console.log('verifyService getNodeUrl() nodeUrl = ' + nodeUrl)\n    return nodeUrl\n}\n\n/**\n * @function : findLatestCO\n *\n * @description : find the latest clearance order from proof\n *\n * @param {verificationProof} proof : verification proof in JSON format\n *\n * @returns : latestCO\n */\nconst findLatestCO = (proof) => {\n    var latestCO = -1\n    for (var clearanceRecord of proof.clearanceRecords) {\n        if (clearanceRecord.clearanceOrder > latestCO) {\n            latestCO = clearanceRecord.clearanceOrder\n        }\n    }\n    return latestCO\n}\n\nconst verifyFileInfoWithCmd = (fileName, fileHash, cmdObject, isCheckFileName) => {\n    const attestationFileName = cmdObject.fileName\n    const attestationFileHash = cmdObject.fileHash\n    var result = {\n        verifyFileName: fileName,\n        attestationFileName,\n        pass: false,\n        fileNamePass: VerifyResult.FAIL,\n        fileHashPass: VerifyResult.FAIL,\n    }\n    var isAllPass = true\n    var isFileNamePass = true\n    var isFileHashPass = true\n\n    if (isCheckFileName) {\n        isFileNamePass = attestationFileName === fileName\n    }\n\n    isFileHashPass = attestationFileHash === fileHash\n    isAllPass = isFileNamePass && isFileHashPass\n\n    result = {\n        ...result,\n        pass: isAllPass,\n        fileNamePass: isFileNamePass ? VerifyResult.PASS : VerifyResult.FAIL,\n        fileHashPass: isFileHashPass ? VerifyResult.PASS : VerifyResult.FAIL,\n    }\n\n    return result\n}\n\n/**\n *\n * @param {file} file\n * @param {verificationProof} verificationProof\n * @returns fileNameResult, fileContentResult: an object containing verify result\n */\nconst verifyRawDataWithFile = async (file, verificationProof) => {\n    console.log('verifyRawData() file=', file.name)\n    const fileHash = await getFileHash(file)\n    const fileName = file.name\n    const cmd = JSON.parse(verificationProof.existenceProofs[0].receipt.cmd)\n\n    var verifyFileNameResult = false\n    var verifyFileContentResult = false\n    if (fileHash.toLowerCase() === cmd.fileHash.toLowerCase()) {\n        verifyFileContentResult = true\n    }\n\n    if (fileName === cmd.fileName) {\n        verifyFileNameResult = true\n    }\n\n    var verifyResult = {\n        fileNameResult: verifyFileNameResult,\n        fileContentResult: verifyFileContentResult,\n    }\n    return verifyResult\n}\n\n/**\n *\n * @param {string} fileName\n * @param {string} fileHash\n * @param {object} verificationProof will only use the first existence proof receipt to verify raw data file\n * @param {boolean} isCheckFileName whether verify file name or not\n * @returns {object} object containing verify result and some detail, such as the cmd and co iv of the receipt used for verifying.\n */\nconst verifyRawDataWithFileNameAndHash = (fileName, fileHash, verificationProof, isCheckFileName) => {\n    const proofUsed = verificationProof.existenceProofs[0]\n    const receipt = proofUsed.receipt\n    const cmd = receipt.cmd\n    const cmdObject = JSON.parse(cmd)\n    var verifyFileWithCmdResult = {\n        verifyFileName: '',\n        attestationFileName: '',\n        pass: false,\n        fileNamePass: '',\n        fileHashPass: '',\n    }\n    verifyFileWithCmdResult = verifyFileInfoWithCmd(fileName, fileHash, cmdObject, isCheckFileName)\n    return verifyFileWithCmdResult\n}\n\nexport { verify, verifyProof, verifyRawDataWithFile, verifyRawDataWithFileNameAndHash, findLatestCO, getNodeUrl }\n","const toNodeUrl = (env, infuraProjectId) => {\n    return 'https://' + env.toLowerCase() + '.infura.io/v3/' + infuraProjectId\n}\n\nconst toProjectId = (nodeUrl) => {\n    const pattern = '(https?):\\\\/\\\\/[-a-zA-Z0-9+&@#\\\\/%?=~_|!:,.;]*[-a-zA-Z0-9+]'\n    const matchArray = nodeUrl.match(pattern)\n    var resultUrl = nodeUrl\n    if (matchArray.length > 0) {\n        resultUrl = matchArray[0]\n    }\n\n    return resultUrl.substring(resultUrl.lastIndexOf('/') + 1)\n}\nexport { toNodeUrl, toProjectId }\n","const EthereumEnv = {\n    MAINNET: 'MAINNET',\n    ROPSTEN: 'ROPSTEN',\n    RINKEBY: 'RINKEBY',\n    KOVAN: 'KOVAN',\n    GOERLI: 'GOERLI',\n    AZURE_QUORUM: 'AZURE_QUORUM',\n    PRIVATE_GETH: 'PRIVATE_GETH',\n    ERROR_ENV: 'ERROR_ENV',\n}\n\nexport { EthereumEnv }\n","export const ExplorerType = {\n    ETHERSCAN: 'etherscan',\n    BLOCKSCOUT: 'blockscout',\n    EPIRUS: 'epirus',\n}\n","import { EthereumEnv } from '../../constants/EthereumEnv'\nimport { ExplorerType } from '../../constants/ExplorerType'\n\nexport const obtainExplorerType = (env) => {\n    var explorerType\n    if (env === EthereumEnv.AZURE_QUORUM) {\n        explorerType = ExplorerType.EPIRUS\n    } else if (env === EthereumEnv.PRIVATE_GETH) {\n        explorerType = ExplorerType.BLOCKSCOUT\n    } else {\n        explorerType = ExplorerType.ETHERSCAN\n    }\n    return explorerType\n}\n","import VerifyResult from '../../constants/VerifyResult'\nimport VerifyResultDescription from '../../constants/VerifyResultDescription'\nimport { VerifyVerificationProofStatus } from '../../constants/VerifyVerificationProofStatus'\n\nexport const getVerifyResult = (status) => {\n    return status === VerifyVerificationProofStatus.ALL_PASS ? VerifyResult.PASS : VerifyResult.FAIL\n}\n\nexport const getVerifyResultDescription = (status) => {\n    var description = ''\n    switch (status) {\n        case VerifyVerificationProofStatus.ALL_PASS:\n            description = VerifyResultDescription.VERIFY_OK\n            break\n        case VerifyVerificationProofStatus.SIG_ERROR:\n            description = VerifyResultDescription.VERIFICATION_PROOF_SIGNATURE_ERROR\n            break\n        case VerifyVerificationProofStatus.CONTRACT_CONNECTION_ERROR:\n            description = VerifyResultDescription.CONTRACT_CONNECTION_ERROR\n            break\n        default:\n            description = VerifyResultDescription.VERIFY_VERIFICATION_PROOF_ERROR\n    }\n    return description\n}\n\nexport const buildVerifyProofDetailList = async (proofResult) => {\n    const { verifyReceiptResult } = proofResult\n    return verifyReceiptResult.map((result) => {\n        const {\n            indexValue,\n            clearanceOrder,\n            ledgerInputTimestamp,\n            receiptTimestamp,\n            merkleProofRootHash,\n            contractRootHash,\n            existenceType,\n            proofExistStatus,\n            cmd,\n            pass,\n            txHash,\n            certification,\n        } = result\n        return {\n            indexValue,\n            clearanceOrder,\n            ledgerInputTimestamp: ledgerInputTimestamp || null,\n            receiptTimestamp: receiptTimestamp || null,\n            merkleProofRootHash,\n            contractRootHash,\n            existenceType,\n            proofExistStatus,\n            cmd,\n            pass,\n            txHash,\n            certification: certification || null,\n        }\n    })\n}\n\nexport const isVerificationContentContainsNull = (proof) => {\n    var result = true\n    if (proof === null) {\n        result = true\n    } else if (\n        proof.env &&\n        proof.clearanceRecords &&\n        proof.contractAddress &&\n        proof.serverWalletAddress &&\n        proof.existenceProofs\n    ) {\n        result = false\n    }\n    console.log('isVerificationContentContainsNull() result=', result)\n    return result\n}\n","import VerifyResultDescription from '../../constants/VerifyResultDescription'\nimport { verify } from '../service/verifyService'\nimport { obtainExplorerType } from '../util/blockChainExplorerUrlUtil'\nimport { loadVerificationProofFileToJson } from '../util/fileUtil'\nimport {\n    buildVerifyProofDetailList,\n    getVerifyResult,\n    getVerifyResultDescription,\n    isVerificationContentContainsNull,\n} from '../util/verificationUtil'\nimport { getCertification } from '../service/certificationService'\n\nconst INFURA_PROJECT_ID = process.env.REACT_APP_INFURA_PROJECT_ID\n\nconst verifyProof = async (file) => {\n    console.log('verifyProof() start', { file })\n    const verifyTimestamp = Date.now()\n    const proofFileName = file.name\n    var verificationProofFromFile = null\n    var responseResult = {\n        status: 'error',\n        verifyResultDescription: VerifyResultDescription.VERIFY_VERIFICATION_PROOF_ERROR,\n        proofFileName: 'N/A',\n        verifyResult: '',\n        query: '',\n        queryType: '',\n        evmEnv: '',\n        explorerType: '',\n        uploadTimestamp: 0,\n        contractAddress: '',\n        totalCount: 0,\n        successCount: 0,\n        modifiedCount: 0,\n        removedCount: 0,\n        addedCount: 0,\n        errorClearanceOrderInClearanceRecordList: [],\n        proofDetailList: [],\n    }\n    try {\n        verificationProofFromFile = await loadVerificationProofFileToJson(file)\n    } catch (error) {\n        console.log('parse proof file fail')\n    }\n    if (!verificationProofFromFile) {\n        responseResult = {\n            status: 'error',\n            description: VerifyResultDescription.COVERT_FILE_TO_VERIFICATION_PROOF_FAIL,\n            proofFileName,\n        }\n    } else if (isVerificationContentContainsNull(verificationProofFromFile)) {\n        responseResult = {\n            status: 'error',\n            description: VerifyResultDescription.VERIFICATION_PROOF_CONTENT_NULL_ERROR,\n            proofFileName,\n        }\n    } else {\n        const proofVerifyResult = await verify(verificationProofFromFile, INFURA_PROJECT_ID)\n        await getCertification(proofVerifyResult, verificationProofFromFile)\n\n        responseResult = await buildResponseResult(\n            proofFileName,\n            verificationProofFromFile,\n            proofVerifyResult,\n            verifyTimestamp,\n        )\n    }\n    console.log('verifyProof() end', { responseResult })\n    return responseResult\n}\n\nconst buildResponseResult = async (proofFileName, verificationProof, proofVerifyResult, verifyTimestamp) => {\n    var result = null\n    const {\n        status,\n        query,\n        queryType,\n        totalCount,\n        successCount,\n        modifiedCount,\n        removedCount,\n        addedCount,\n        errorClearanceOrderInClearanceRecordList,\n    } = proofVerifyResult\n    result = {\n        status: 'ok',\n        verifyResultDescription: getVerifyResultDescription(status),\n        verifyResult: getVerifyResult(status),\n        proofFileName: proofFileName,\n        uploadTimestamp: verifyTimestamp,\n        query,\n        queryType,\n        evmEnv: verificationProof.env,\n        explorerType: obtainExplorerType(verificationProof.env),\n        contractAddress: verificationProof.contractAddress,\n        totalCount,\n        successCount,\n        modifiedCount,\n        removedCount,\n        addedCount,\n        errorClearanceOrderInClearanceRecordList,\n        proofDetailList: await buildVerifyProofDetailList(proofVerifyResult),\n    }\n    return result\n}\n\nexport { verifyProof }\n","import React, { useState, useEffect } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport moment from 'moment'\nimport { useSnackbar } from 'notistack'\nimport { useMediaQuery, Typography, Backdrop, CircularProgress, Box, Hidden } from '@mui/material'\nimport UploadSection from './UploadSection/UploadSection'\nimport RwdUploadSection from './UploadSection/RwdUploadSection'\nimport VerifyDetailTable from './VerifyDetailTable'\nimport { verifyProof } from '../../../function/api/verifyProofApi'\nimport theme from '../../../theme/Theme'\n\nconst ProofVerificationPage = () => {\n    const matches = useMediaQuery((theme) => theme.breakpoints.down('sm'))\n    const { enqueueSnackbar } = useSnackbar()\n    const { t } = useTranslation()\n    const [open, setopen] = useState(false)\n    const [detailData, setDetailData] = useState(null)\n\n    useEffect(() => {\n        setDetailData(null)\n    }, [])\n\n    const handleVerify = async (acceptedFiles) => {\n        const uploadTimestamp = Number(moment(moment.now()).format('x'))\n        acceptedFiles.forEach(async (file) => {\n            setopen(true)\n            verifyProof(file)\n                .then((result) => {\n                    console.log('handleVerify() verifyProof', { result })\n                    if (result.status === 'ok') {\n                        result.uploadTimestamp = uploadTimestamp\n                        setDetailData(result)\n                        enqueueSnackbar(`${t('Upload successful')}`, {\n                            variant: 'success',\n                        })\n                    } else if (\n                        result.status !== 'ok' &&\n                        result.description &&\n                        result.description.toLocaleLowerCase().includes('convert', 'fail')\n                    ) {\n                        enqueueSnackbar(`${t('Fail to upload, proof file content is not JSON format')}`, {\n                            variant: 'error',\n                        })\n                    } else {\n                        enqueueSnackbar(`${t('Upload fail')}`, {\n                            variant: 'error',\n                        })\n                    }\n                    setopen(false)\n                })\n                .catch((error) => {\n                    console.log('verifyProof error=', error)\n                    setopen(false)\n                    enqueueSnackbar(`${t('Upload fail')}`, {\n                        variant: 'error',\n                    })\n                })\n        })\n    }\n\n    return (\n        <>\n            <Typography variant={matches ? 'h5' : 'h4'} sx={{ color: 'common.white' }}>\n                {t('Proof Verification')}\n            </Typography>\n            <Box sx={{ my: { xs: 3, sm: 0 } }}>\n                <Hidden only={['xs']}>\n                    <UploadSection detailData={detailData} handleVerify={handleVerify} />\n                </Hidden>\n                <Hidden only={['sm', 'md', 'lg', 'xl']}>\n                    <RwdUploadSection handleVerify={handleVerify} />\n                </Hidden>\n            </Box>\n            {detailData && <VerifyDetailTable detailData={detailData} />}\n            <Backdrop open={open} sx={{ zIndex: theme.zIndex.drawer + 1, color: 'common.white' }}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        </>\n    )\n}\n\nexport default ProofVerificationPage\n","const VerificationType = {\n    proofVerification: 'proofVerification',\n    rawDataVerification: 'rawDataVerification',\n    fileSetVerification: 'fileSetVerification',\n}\n\nexport { VerificationType }\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTranslation } from 'react-i18next'\nimport { useLocation } from 'react-router-dom'\nimport { Stepper, Step, StepLabel } from '@mui/material'\nimport { VerificationType } from '../../../constants/VerificationType'\nimport theme from '../../../theme/Theme'\n\nconst VerifyStepper = ({ activeStep }) => {\n    const { t } = useTranslation()\n    const location = useLocation()\n    const pathname = location.pathname.substring(1)\n\n    const rawDataSteps = ['Upload File to Verify', 'Upload Off-chain Proof', 'Verify']\n    const fileSetSteps = ['Upload Folder to Verify', 'Upload Off-chain Proof', 'Verify']\n\n    const rawDataType = { id: 'raw-data', steps: rawDataSteps }\n    const fileSetType = { id: 'file-set', steps: fileSetSteps }\n\n    const [stepper, setStepper] = useState(rawDataType)\n\n    useEffect(() => {\n        if (pathname === VerificationType.rawDataVerification) {\n            setStepper(rawDataType)\n        } else if (pathname === VerificationType.fileSetVerification) {\n            setStepper(fileSetType)\n        }\n    }, [pathname])\n\n    return (\n        <Stepper\n            id={`${stepper.id}-verification-stepper`}\n            data-testid=\"stepper\"\n            activeStep={activeStep}\n            sx={{\n                borderRadius: `${theme.shape.borderRadius}px ${theme.shape.borderRadius}px 0 0`,\n                p: 3,\n                backgroundColor: 'common.white',\n            }}\n        >\n            {stepper.steps.map((label, index) => {\n                const stepProps = {}\n                const labelProps = {}\n                return (\n                    <Step id={`${stepper.id}-verification-step-${index}`} key={label} data-testid=\"step\" {...stepProps}>\n                        <StepLabel {...labelProps}>{t(label)}</StepLabel>\n                    </Step>\n                )\n            })}\n        </Stepper>\n    )\n}\n\nVerifyStepper.propTypes = {\n    activeStep: PropTypes.number.isRequired,\n}\n\nexport default VerifyStepper\n","export default __webpack_public_path__ + \"static/media/fileUpload.c06ed6af.svg\";","import React, { useState, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useDropzone } from 'react-dropzone'\nimport i18next from 'i18next'\nimport { useTranslation } from 'react-i18next'\nimport { useSnackbar } from 'notistack'\nimport sha256 from 'crypto-js/sha256'\nimport CryptoJS from 'crypto-js'\nimport { Box, Typography } from '@mui/material'\nimport Alert from '@mui/material/Alert'\nimport FileUpload from '../../../../img/fileUpload.svg'\nimport theme from '../../../../theme/Theme'\nimport { toHumanReadableFileSize } from '../../../../util/stringUtil'\n\nconst UploadBinaryData = ({ handleFileDataChange, handleFileHashChange, handleFileNameChange, handleNext }) => {\n    const { t } = useTranslation()\n    const { enqueueSnackbar } = useSnackbar()\n    const [cursor, setCursor] = useState('')\n    const cursorStyle = {\n        cursor: cursor,\n    }\n\n    const onDrop = useCallback((acceptedFiles) => {\n        if (acceptedFiles.length === 1) {\n            handleFileDataChange(acceptedFiles)\n            const file = acceptedFiles[0]\n            const reader = new FileReader()\n            reader.onload = function (e) {\n                const wordArray = CryptoJS.lib.WordArray.create(e.target.result)\n                const hash = sha256(wordArray).toString()\n                handleFileHashChange(hash)\n            }\n            handleFileNameChange(file.name)\n            reader.readAsArrayBuffer(file)\n            handleNext()\n        } else if (acceptedFiles.length > 1) {\n            enqueueSnackbar(`${t('You can only upload one file')}`, {\n                variant: 'warning',\n            })\n        }\n    }, [])\n\n    const maxSize = Number(process.env.REACT_APP_UPLOAD_MAX_SIZE) * 1024 * 1024\n\n    const onDropRejected = () => {\n        enqueueSnackbar(\n            `${i18next.t('Maximum file upload size is {{maxSize}}', {\n                maxSize: toHumanReadableFileSize(maxSize),\n            })}`,\n            {\n                variant: 'warning',\n            },\n        )\n    }\n\n    const { getRootProps, getInputProps, acceptedFiles } = useDropzone({ onDrop, onDropRejected, maxSize })\n\n    return (\n        <>\n            <Box\n                style={cursorStyle}\n                onMouseOver={() => {\n                    setCursor('pointer')\n                }}\n                onMouseLeave={() => {\n                    setCursor('')\n                }}\n            >\n                <div {...getRootProps()}>\n                    <input\n                        id=\"binary-data-uploader\"\n                        data-testid=\"binary-data-uploader\"\n                        {...getInputProps()}\n                        multiple={false}\n                    />\n                    <Box\n                        sx={{\n                            height: '220px',\n                            backgroundColor: 'background.uploader',\n                            textAlign: 'center',\n                            color: 'text.secondary',\n                            display: 'flex',\n                            flexDirection: 'column',\n                            alignItems: 'center',\n                            justifyContent: 'center',\n                            borderRadius: `0 0 ${theme.shape.borderRadius}px ${theme.shape.borderRadius}px`,\n                        }}\n                    >\n                        <Box py={1.5}>\n                            <img width=\"45\" alt=\"fileUpload\" src={FileUpload} />\n                        </Box>\n                        <Typography variant=\"body1\" sx={{ color: 'background.main', fontWeight: 'bold' }}>\n                            {t('Choose a File to Verify')}\n                        </Typography>\n                    </Box>\n                </div>\n            </Box>\n            <Box mt={2}>\n                <Alert severity=\"warning\">{t('upload.binary.data.alert_upload_hash_info')}</Alert>\n            </Box>\n            {acceptedFiles.length === 1 && (\n                <Box mt={2} mb={3}>\n                    <Typography sx={{ color: 'common.white' }} component={'div'} variant=\"h6\">\n                        {t('Upload File to Verify')}\n                    </Typography>\n                    <Typography\n                        id=\"uploaded-file-info\"\n                        sx={{ color: 'common.white' }}\n                        component={'div'}\n                        variant=\"body1\"\n                    >\n                        {acceptedFiles.map((file, index) => {\n                            return (\n                                <p key={index}>\n                                    {file.path} - {file.size} bytes\n                                </p>\n                            )\n                        })}\n                    </Typography>\n                </Box>\n            )}\n        </>\n    )\n}\n\nUploadBinaryData.propTypes = {\n    handleFileDataChange: PropTypes.func.isRequired,\n    handleFileHashChange: PropTypes.func.isRequired,\n    handleFileNameChange: PropTypes.func.isRequired,\n    handleNext: PropTypes.func.isRequired,\n}\n\nexport default UploadBinaryData\n","import React, { useState, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport i18next from 'i18next'\nimport { useTranslation } from 'react-i18next'\nimport { useDropzone } from 'react-dropzone'\nimport { useSnackbar } from 'notistack'\nimport { Box, Typography } from '@mui/material'\nimport FingerPrint from '../../img/fingerprint.svg'\nimport UploadedInfoAlert from './UploadedInfoAlert'\nimport { VerificationType } from '../../constants/VerificationType'\nimport { useLocation } from 'react-router-dom'\nimport theme from '../../theme/Theme'\nimport { toHumanReadableFileSize } from '../../util/stringUtil'\n\nconst UploadVerificationProof = ({ uploadedFiles, handleProofDataChange, handleNext, rootFolderName }) => {\n    const { t } = useTranslation()\n    const { enqueueSnackbar } = useSnackbar()\n    const location = useLocation()\n    const pathname = location.pathname.substring(1)\n    const [cursor, setCursor] = useState('')\n    const cursorStyle = {\n        cursor: cursor,\n    }\n\n    const onDrop = useCallback((acceptedFiles) => {\n        if (acceptedFiles.length === 1) {\n            if (\n                acceptedFiles[0].name.slice(acceptedFiles[0].name.lastIndexOf('.')) === '.json' ||\n                acceptedFiles[0].name.slice(acceptedFiles[0].name.lastIndexOf('.')) === '.itm'\n            ) {\n                handleProofDataChange(acceptedFiles)\n                handleNext()\n            } else {\n                enqueueSnackbar(`${t('Upload off-chain proof file name extension need to be .json or .itm')}`, {\n                    variant: 'warning',\n                })\n            }\n        } else if (acceptedFiles.length > 1) {\n            enqueueSnackbar(`${t('You can only upload one file')}`, {\n                variant: 'warning',\n            })\n        }\n    }, [])\n\n    const maxSize = Number(process.env.REACT_APP_UPLOAD_MAX_SIZE) * 1024 * 1024\n\n    const onDropRejected = () => {\n        enqueueSnackbar(\n            `${i18next.t('Maximum file upload size is {{maxSize}}', { maxSize: toHumanReadableFileSize(maxSize) })}`,\n            {\n                variant: 'warning',\n            },\n        )\n    }\n\n    const { getRootProps, getInputProps } = useDropzone({ onDrop, onDropRejected, maxSize })\n\n    return (\n        <>\n            <Box\n                style={cursorStyle}\n                onMouseOver={() => {\n                    setCursor('pointer')\n                }}\n                onMouseLeave={() => {\n                    setCursor('')\n                }}\n            >\n                <div {...getRootProps({ className: 'dropzone' })}>\n                    <input\n                        id=\"verification-proof-uploader\"\n                        data-testid=\"proof-uploader\"\n                        {...getInputProps()}\n                        multiple={false}\n                    />\n                    <Box\n                        sx={{\n                            height: 220,\n                            backgroundColor: 'background.uploader',\n                            textAlign: 'center',\n                            color: 'text.secondary',\n                            display: 'flex',\n                            flexDirection: 'column',\n                            alignItems: 'center',\n                            justifyContent: 'center',\n                            borderRadius: `0 0 ${theme.shape.borderRadius}px ${theme.shape.borderRadius}px`,\n                        }}\n                    >\n                        <Box py={1.5}>\n                            <img width=\"55\" alt=\"fingerPrint\" src={FingerPrint} />\n                        </Box>\n                        <Typography variant=\"body1\" sx={{ color: 'fingerPrint.main', fontWeight: 'bold' }}>\n                            {t('Choose Your Off-chain Proof to Upload')}\n                        </Typography>\n                    </Box>\n                </div>\n            </Box>\n            <Box my={2}>\n                {pathname === VerificationType.rawDataVerification && (\n                    <>\n                        <Typography sx={{ color: 'common.white' }} component={'div'} variant=\"h6\">\n                            {t('Uploaded File to Verify')}\n                        </Typography>\n                        <UploadedInfoAlert uploadedFiles={uploadedFiles} />\n                    </>\n                )}\n                {pathname === VerificationType.fileSetVerification && (\n                    <>\n                        <Typography sx={{ color: 'common.white' }} component={'div'} variant=\"h6\">\n                            {t('Folder to Verify')}\n                        </Typography>\n                        <UploadedInfoAlert uploadedFiles={uploadedFiles} rootFolderName={rootFolderName} />\n                    </>\n                )}\n            </Box>\n        </>\n    )\n}\n\nUploadVerificationProof.propTypes = {\n    uploadedFiles: PropTypes.array.isRequired,\n    handleProofDataChange: PropTypes.func.isRequired,\n    handleNext: PropTypes.func.isRequired,\n    rootFolderName: PropTypes.string,\n}\n\nexport default UploadVerificationProof\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useTranslation } from 'react-i18next'\nimport { FormControlLabel, Checkbox, Typography, Box } from '@mui/material'\nimport { styled } from '@mui/material/styles'\n\nconst WhiteCheckbox = styled(Checkbox)(({ theme }) => ({\n    color: theme.palette.common.white,\n    '&.Mui-checked': {\n        color: theme.palette.common.white,\n    },\n}))\n\nconst VerifyFileNameCheckbox = ({ isVerifyFileName, handleCheckboxChange }) => {\n    const { t } = useTranslation()\n\n    return (\n        <Box mt={1}>\n            <FormControlLabel\n                control={\n                    <WhiteCheckbox checked={isVerifyFileName} onChange={handleCheckboxChange} name=\"whiteCheckbox\" />\n                }\n                label={<Typography sx={{ color: 'common.white' }}>{t('Verify file name')}</Typography>}\n            />\n        </Box>\n    )\n}\n\nVerifyFileNameCheckbox.propTypes = {\n    isVerifyFileName: PropTypes.bool.isRequired,\n    handleCheckboxChange: PropTypes.func.isRequired,\n}\n\nexport default VerifyFileNameCheckbox\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useTranslation } from 'react-i18next'\nimport { useLocation } from 'react-router-dom'\nimport { Typography, Box } from '@mui/material'\nimport UploadedInfoAlert from './UploadedInfoAlert'\nimport VerifyFileNameCheckbox from '../page/RawDataVerification/UploadSection/VerifyFileNameCheckbox'\nimport { VerificationType } from '../../constants/VerificationType'\n\nconst UploadedInfoSection = ({\n    uploadedFiles,\n    verificationProof,\n    isVerifyFileName,\n    handleCheckboxChange,\n    rootFolderName,\n}) => {\n    const { t } = useTranslation()\n    const location = useLocation()\n    const pathname = location.pathname.substring(1)\n\n    return (\n        <>\n            <Box my={2}>\n                <Typography sx={{ color: 'common.white' }} component={'div'} variant=\"h6\">\n                    {pathname === VerificationType.rawDataVerification && t('Uploaded File to Verify')}\n                    {pathname === VerificationType.fileSetVerification && t('Folder to Verify')}\n                </Typography>\n                <UploadedInfoAlert uploadedFiles={uploadedFiles} rootFolderName={rootFolderName} />\n            </Box>\n            <Typography sx={{ color: 'common.white' }} component={'div'} variant=\"h6\">\n                {t('Uploaded Off-chain Proof')}\n            </Typography>\n            <UploadedInfoAlert uploadedFiles={verificationProof} />\n            {pathname === VerificationType.rawDataVerification && (\n                <VerifyFileNameCheckbox\n                    isVerifyFileName={isVerifyFileName}\n                    handleCheckboxChange={handleCheckboxChange}\n                />\n            )}\n        </>\n    )\n}\n\nUploadedInfoSection.propTypes = {\n    uploadedFiles: PropTypes.array.isRequired,\n    verificationProof: PropTypes.array.isRequired,\n    isVerifyFileName: PropTypes.bool,\n    handleCheckboxChange: PropTypes.func,\n    rootFolderName: PropTypes.string,\n}\n\nexport default UploadedInfoSection\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useTranslation } from 'react-i18next'\nimport { Box, Button } from '@mui/material'\n\nconst StepperButton = ({ activeStep, onBackButtonClick, handleVerify, handleReset }) => {\n    const { t } = useTranslation()\n\n    return (\n        <Box mt={2}>\n            {(activeStep === 1 || activeStep === 2) && (\n                <Button id=\"back-button\" variant=\"contained\" onClick={onBackButtonClick} sx={{ mr: 1 }}>\n                    {t('Back')}\n                </Button>\n            )}\n            {activeStep === 2 && (\n                <Button id=\"verify-btn\" variant=\"contained\" color=\"primary\" onClick={handleVerify}>\n                    {t('Verify')}\n                </Button>\n            )}\n            {activeStep === 3 && (\n                <Button id=\"reupload-btn\" variant=\"contained\" color=\"primary\" onClick={handleReset}>\n                    {t('Reupload')}\n                </Button>\n            )}\n        </Box>\n    )\n}\n\nStepperButton.propTypes = {\n    activeStep: PropTypes.number.isRequired,\n    onBackButtonClick: PropTypes.func.isRequired,\n    handleVerify: PropTypes.func.isRequired,\n    handleReset: PropTypes.func.isRequired,\n}\n\nexport default StepperButton\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useTranslation } from 'react-i18next'\nimport { Typography, Box, Button } from '@mui/material'\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload'\nimport UploadedInfoAlert from '../../../common/UploadedInfoAlert'\nimport VerifyFileNameCheckbox from './VerifyFileNameCheckbox'\n\nconst RwdUploadSection = ({\n    activeStep,\n    binaryData,\n    verificationProof,\n    onFileUpload,\n    onProofUpload,\n    isVerifyFileName,\n    handleCheckboxChange,\n    handleReset,\n    handleVerify,\n}) => {\n    const { t } = useTranslation()\n\n    return (\n        <Box my={3}>\n            <Typography sx={{ color: 'common.white' }} variant=\"body1\">\n                {t('Upload File to Verify')}\n            </Typography>\n            <Button\n                variant=\"contained\"\n                component=\"label\"\n                color=\"primary\"\n                startIcon={<CloudUploadIcon />}\n                disabled={activeStep === 3}\n                sx={{ mt: 1 }}\n            >\n                {t('Upload File')}\n                <input style={{ display: 'none' }} id=\"upload-files-button\" type=\"file\" onChange={onFileUpload} />\n            </Button>\n            {binaryData[0] && (\n                <Box mt={1}>\n                    <UploadedInfoAlert uploadedFiles={binaryData} />\n                </Box>\n            )}\n            <Box mt={2}>\n                <Typography sx={{ color: 'common.white' }} variant=\"body1\">\n                    {t('Upload Off-chain Proof')}\n                </Typography>\n                <Button\n                    variant=\"contained\"\n                    component=\"label\"\n                    color=\"primary\"\n                    startIcon={<CloudUploadIcon />}\n                    disabled={activeStep === 3 || activeStep === 0}\n                    sx={{ mt: 1 }}\n                >\n                    {t('Upload')}\n                    <input style={{ display: 'none' }} id=\"upload-proof-button\" type=\"file\" onChange={onProofUpload} />\n                </Button>\n                {verificationProof[0] && (\n                    <Box mt={1}>\n                        <UploadedInfoAlert uploadedFiles={verificationProof} />\n                    </Box>\n                )}\n            </Box>\n            {activeStep === 2 && (\n                <VerifyFileNameCheckbox\n                    isVerifyFileName={isVerifyFileName}\n                    handleCheckboxChange={handleCheckboxChange}\n                />\n            )}\n            <Box mt={2}>\n                <Typography sx={{ color: 'common.white' }} variant=\"body1\">\n                    {t('Verify')}\n                </Typography>\n                <Box display=\"flex\" alignItems=\"center\">\n                    <Button\n                        id=\"verify-btn\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={activeStep === 3 ? handleReset : handleVerify}\n                        disabled={!(binaryData[0] && verificationProof[0])}\n                        sx={{ mt: 1 }}\n                    >\n                        {activeStep === 3 ? t('Reupload') : t('Verify')}\n                    </Button>\n                </Box>\n            </Box>\n        </Box>\n    )\n}\n\nRwdUploadSection.propTypes = {\n    activeStep: PropTypes.number.isRequired,\n    binaryData: PropTypes.array.isRequired,\n    verificationProof: PropTypes.array.isRequired,\n    onFileUpload: PropTypes.func.isRequired,\n    onProofUpload: PropTypes.func.isRequired,\n    isVerifyFileName: PropTypes.bool.isRequired,\n    handleCheckboxChange: PropTypes.func.isRequired,\n    handleReset: PropTypes.func.isRequired,\n    handleVerify: PropTypes.func.isRequired,\n}\n\nexport default RwdUploadSection\n","import VerifyResultDescription from '../../constants/VerifyResultDescription'\nimport { getCertification } from '../service/certificationService'\nimport { verify, verifyRawDataWithFileNameAndHash } from '../service/verifyService'\nimport { obtainExplorerType } from '../util/blockChainExplorerUrlUtil'\nimport { loadVerificationProofFileToJson } from '../util/fileUtil'\nimport {\n    getVerifyResult,\n    getVerifyResultDescription,\n    isVerificationContentContainsNull,\n} from '../util/verificationUtil'\nimport VerifyResult from '../../constants/VerifyResult'\n\nconst INFURA_PROJECT_ID = process.env.REACT_APP_INFURA_PROJECT_ID\n\nconst verifyRawDataWithVerificationProof = async (rawDataFileName, rawDataFileHash, proofFile, isCheckFileName) => {\n    console.log('verifyRawDataWithVerificationProof() start', {\n        rawDataFileName,\n        rawDataFileHash,\n        proofFile,\n        isCheckFileName,\n    })\n    const verifyTimestamp = Date.now()\n\n    var responseResult = {\n        status: '',\n        verifyResultDescription: '',\n        verifyFileName: '',\n        proofFileName: '',\n        verifyResult: '',\n        evmEnv: '',\n        explorerType: '',\n        contractAddress: '',\n        uploadTimestamp: 0,\n        indexValue: '',\n        clearanceOrder: 0,\n        ledgerInputTimestamp: 0,\n        receiptTimestamp: 0,\n        merkleProofRootHash: '',\n        contractRootHash: '',\n        proofExistStatus: '',\n        txHash: '',\n        certification: null,\n        cmd: '',\n        attestationFileName: '',\n        fileNameVerifyResult: '',\n        fileContentVerifyResult: '',\n    }\n    var verificationProof\n    const proofFileName = proofFile.name\n    try {\n        verificationProof = await loadVerificationProofFileToJson(proofFile)\n    } catch (error) {\n        console.log('parse proof file fail')\n    }\n    if (!verificationProof) {\n        responseResult = {\n            status: 'error',\n            description: VerifyResultDescription.COVERT_FILE_TO_VERIFICATION_PROOF_FAIL,\n            verifyResultDescription: VerifyResultDescription.COVERT_FILE_TO_VERIFICATION_PROOF_FAIL,\n            proofFileName,\n        }\n    } else if (isVerificationContentContainsNull(verificationProof)) {\n        responseResult = {\n            status: 'error',\n            description: VerifyResultDescription.VERIFICATION_PROOF_CONTENT_NULL_ERROR,\n            verifyResultDescription: VerifyResultDescription.VERIFICATION_PROOF_CONTENT_NULL_ERROR,\n            proofFileName,\n        }\n    } else {\n        const verifyProofResult = await verify(verificationProof, INFURA_PROJECT_ID)\n        const verifyFileResult = await verifyRawDataWithFileNameAndHash(\n            rawDataFileName,\n            rawDataFileHash,\n            verificationProof,\n            isCheckFileName,\n        )\n        await getCertification(verifyProofResult, verificationProof)\n\n        responseResult = await buildRawDataResponseResult(\n            verificationProof,\n            proofFileName,\n            verifyFileResult,\n            verifyProofResult,\n            verifyTimestamp,\n        )\n    }\n    console.log('verifyRawDataWithVerificationProof() end', { responseResult })\n    return responseResult\n}\n\nconst buildRawDataResponseResult = async (\n    verificationProof,\n    proofFileName,\n    verifyFileResult,\n    verifyProofResult,\n    verifyTimestamp,\n) => {\n    console.log('buildRawDataResponseResult() start', {\n        verificationProof,\n        verifyFileResult,\n        verifyProofResult,\n        verifyTimestamp,\n    })\n    const verifyReceiptResult = verifyProofResult.verifyReceiptResult[0]\n    const isProofVerifyPass = getVerifyResult(verifyProofResult.status) === VerifyResult.PASS\n    var verifyResult\n    var description\n    var fileNameVerifyResult\n    var fileContentVerifyResult\n    if (!isProofVerifyPass) {\n        // First get the description from this proof verify result\n        description = getVerifyResultDescription(verifyProofResult.status)\n        // Build proof error result\n        verifyResult = VerifyResult.PROOF_ERROR\n        fileNameVerifyResult = VerifyResult.PROOF_ERROR\n        fileContentVerifyResult = VerifyResult.PROOF_ERROR\n    } else {\n        fileNameVerifyResult = verifyFileResult.fileNamePass\n        fileContentVerifyResult = verifyFileResult.fileHashPass\n        if (verifyFileResult.pass) {\n            verifyResult = VerifyResult.PASS\n            description = VerifyResultDescription.VERIFY_OK\n        } else {\n            verifyResult = VerifyResult.FAIL\n            description = VerifyResultDescription.FILE_NAME_OR_CONTENT_ERROR\n        }\n    }\n\n    const result = {\n        status: 'ok',\n        verifyResult: verifyResult,\n        description: description,\n        verifyResultDescription: description,\n        verifyFileName: verifyFileResult.verifyFileName,\n        proofFileName: proofFileName,\n        evmEnv: verificationProof.env,\n        explorerType: obtainExplorerType(verificationProof.env),\n        contractAddress: verificationProof.contractAddress,\n        uploadTimestamp: verifyTimestamp,\n        indexValue: verifyReceiptResult.indexValue,\n        clearanceOrder: verifyReceiptResult.clearanceOrder,\n        ledgerInputTimestamp: verifyReceiptResult.ledgerInputTimestamp,\n        receiptTimestamp: verifyReceiptResult.receiptTimestamp,\n        merkleProofRootHash: verifyReceiptResult.merkleProofRootHash,\n        contractRootHash: verifyReceiptResult.contractRootHash,\n        proofExistStatus: verifyReceiptResult.proofExistStatus,\n        txHash: verifyReceiptResult.txHash,\n        certification: verifyReceiptResult.certification,\n        cmd: verifyReceiptResult.cmd,\n        attestationFileName: verifyFileResult.attestationFileName,\n        fileNameVerifyResult: fileNameVerifyResult,\n        fileContentVerifyResult: fileContentVerifyResult,\n    }\n    console.log('buildRawDataResponseResult() end', { result })\n    return result\n}\n\nexport { verifyRawDataWithVerificationProof }\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport i18next from 'i18next'\nimport { useTranslation } from 'react-i18next'\nimport { useSnackbar } from 'notistack'\nimport CryptoJS from 'crypto-js'\nimport sha256 from 'crypto-js/sha256'\nimport moment from 'moment'\nimport { Box, Hidden } from '@mui/material'\n\nimport VerifyStepper from '../../../common/VerifyStepper/VerifyStepper'\nimport UploadBinaryData from './UploadBinaryData'\nimport UploadVerificationProof from '../../../common/UploadVerificationProof'\nimport UploadedInfoSection from '../../../common/UploadedInfoSection'\nimport StepperButton from '../../../common/VerifyStepper/StepperButton'\nimport RwdUploadSection from './RwdUploadSection'\nimport { verifyRawDataWithVerificationProof } from '../../../../function/api/verifyRawDataApi'\nimport { toHumanReadableFileSize } from '../../../../util/stringUtil'\n\nconst UploadSection = ({ handleDetailDataChange, handleBackdropOpen, handleBackdropClose }) => {\n    const { t } = useTranslation()\n    const { enqueueSnackbar } = useSnackbar()\n    const [activeStep, setActiveStep] = useState(0)\n    const [binaryData, setbinaryData] = useState([])\n    const [binaryHash, setbinaryHash] = useState('')\n    const [binaryName, setbinaryName] = useState('')\n    const [verificationProof, setverificationProof] = useState([])\n\n    const handleNext = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep + 1)\n    }\n\n    const handleBinaryBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1)\n        setbinaryData([])\n    }\n    const handleProofBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1)\n        setverificationProof([])\n    }\n\n    const handleFileDataChange = (files) => {\n        setbinaryData(files)\n    }\n\n    const handleFileHashChange = (fileHash) => {\n        setbinaryHash(fileHash)\n    }\n\n    const handleFileNameChange = (fileName) => {\n        setbinaryName(fileName)\n    }\n\n    const handleProofDataChange = (files) => {\n        setverificationProof(files)\n    }\n\n    const onBackButtonClick = () => {\n        if (activeStep === 1) {\n            handleBinaryBack()\n        } else if (activeStep === 2) {\n            handleProofBack()\n        }\n    }\n\n    const handleReset = () => {\n        setActiveStep(0)\n        setbinaryData([])\n        setbinaryHash('')\n        setbinaryName('')\n        setverificationProof([])\n        handleDetailDataChange(null)\n    }\n\n    const handleVerify = async () => {\n        handleBackdropOpen()\n        let timeOut = setTimeout(() => {\n            handleBackdropClose()\n            enqueueSnackbar(`${t('Upload fail')}`, {\n                variant: 'error',\n            })\n        }, 30000)\n        const uploadTimestamp = Number(moment(moment.now()).format('x'))\n\n        verifyRawDataWithVerificationProof(binaryName, binaryHash, verificationProof[0], isVerifyFileName)\n            .then((result) => {\n                console.log('verifyRawDataWithVerificationProof result=', result)\n                if (result.status === 'ok') {\n                    handleBackdropClose()\n                    clearTimeout(timeOut)\n                    handleDetailDataChange({\n                        ...result,\n                        uploadFileHash: binaryHash,\n                        verifyFileName: binaryName,\n                        isVerifyFileName: isVerifyFileName,\n                        uploadTimestamp: uploadTimestamp,\n                    })\n                    enqueueSnackbar(`${t('Upload successful')}`, {\n                        variant: 'success',\n                    })\n                } else if (\n                    result.status !== 'ok' &&\n                    result.description &&\n                    result.description.toLocaleLowerCase().includes('convert', 'fail')\n                ) {\n                    handleBackdropClose()\n                    clearTimeout(timeOut)\n                    enqueueSnackbar(`${t('Fail to upload, proof file content is not JSON format')}`, {\n                        variant: 'error',\n                    })\n                } else {\n                    handleBackdropClose()\n                    clearTimeout(timeOut)\n                    enqueueSnackbar(`${t('Upload fail')}`, {\n                        variant: 'error',\n                    })\n                }\n                handleNext()\n            })\n            .catch(() => {\n                handleBackdropClose()\n                clearTimeout(timeOut)\n                enqueueSnackbar(`${t('Upload fail')}`, {\n                    variant: 'error',\n                })\n                handleNext()\n            })\n    }\n\n    const maxSize = Number(process.env.REACT_APP_UPLOAD_MAX_SIZE) * 1024 * 1024\n\n    const onFileUpload = (event) => {\n        const uploadFile = event.target.files[0]\n        console.log('uploadFile=', uploadFile)\n        if (uploadFile.size <= maxSize) {\n            setbinaryData([uploadFile])\n            const reader = new FileReader()\n            reader.onload = function (e) {\n                const wordArray = CryptoJS.lib.WordArray.create(e.target.result)\n                const hash = sha256(wordArray).toString()\n                setbinaryHash(hash)\n                setbinaryName(uploadFile.name)\n            }\n            reader.readAsArrayBuffer(uploadFile)\n            !verificationProof[0] ? setActiveStep(1) : setActiveStep(2)\n        } else {\n            enqueueSnackbar(\n                `${i18next.t('Maximum file upload size is {{maxSize}}', {\n                    maxSize: toHumanReadableFileSize(maxSize),\n                })}`,\n                {\n                    variant: 'warning',\n                },\n            )\n        }\n    }\n\n    const onProofUpload = (event) => {\n        const uploadProof = event.target.files[0]\n        console.log('uploadProof=', uploadProof)\n        if (\n            uploadProof.name.slice(uploadProof.name.lastIndexOf('.')) === '.json' ||\n            uploadProof.name.slice(uploadProof.name.lastIndexOf('.')) === '.itm'\n        ) {\n            if (uploadProof.size <= maxSize) {\n                setverificationProof([uploadProof])\n                setActiveStep(2)\n            } else {\n                enqueueSnackbar(\n                    `${i18next.t('Maximum file upload size is {{maxSize}}', {\n                        maxSize: toHumanReadableFileSize(maxSize),\n                    })}`,\n                    {\n                        variant: 'warning',\n                    },\n                )\n            }\n        } else {\n            enqueueSnackbar(`${t('Upload off-chain proof file name extension need to be .json or .itm')}`, {\n                variant: 'warning',\n            })\n        }\n    }\n\n    // verify file name\n    const [isVerifyFileName, setIsVerifyFileName] = useState(true)\n    const handleCheckboxChange = () => {\n        setIsVerifyFileName(!isVerifyFileName)\n    }\n\n    return (\n        <>\n            <Hidden only={['xs']}>\n                <Box my={3}>\n                    <VerifyStepper activeStep={activeStep} />\n                    {activeStep === 0 && (\n                        <UploadBinaryData\n                            handleFileDataChange={handleFileDataChange}\n                            handleFileHashChange={handleFileHashChange}\n                            handleFileNameChange={handleFileNameChange}\n                            handleNext={handleNext}\n                        />\n                    )}\n                    {activeStep === 1 && (\n                        <UploadVerificationProof\n                            uploadedFiles={binaryData}\n                            handleProofDataChange={handleProofDataChange}\n                            handleNext={handleNext}\n                        />\n                    )}\n                    {activeStep === 2 && (\n                        <UploadedInfoSection\n                            uploadedFiles={binaryData}\n                            verificationProof={verificationProof}\n                            isVerifyFileName={isVerifyFileName}\n                            handleCheckboxChange={handleCheckboxChange}\n                        />\n                    )}\n                    <StepperButton\n                        activeStep={activeStep}\n                        onBackButtonClick={onBackButtonClick}\n                        handleVerify={handleVerify}\n                        handleReset={handleReset}\n                    />\n                </Box>\n            </Hidden>\n            <Hidden only={['sm', 'md', 'lg', 'xl']}>\n                <RwdUploadSection\n                    activeStep={activeStep}\n                    binaryData={binaryData}\n                    verificationProof={verificationProof}\n                    onFileUpload={onFileUpload}\n                    onProofUpload={onProofUpload}\n                    isVerifyFileName={isVerifyFileName}\n                    handleCheckboxChange={handleCheckboxChange}\n                    handleReset={handleReset}\n                    handleVerify={handleVerify}\n                />\n            </Hidden>\n        </>\n    )\n}\n\nUploadSection.propTypes = {\n    handleDetailDataChange: PropTypes.func.isRequired,\n    handleBackdropOpen: PropTypes.func.isRequired,\n    handleBackdropClose: PropTypes.func.isRequired,\n}\n\nexport default UploadSection\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTranslation } from 'react-i18next'\nimport {\n    Typography,\n    Box,\n    Paper,\n    Table,\n    TableBody,\n    TableRow,\n    TableCell,\n    TableContainer,\n    Hidden,\n    IconButton,\n    Collapse,\n} from '@mui/material'\nimport CheckIcon from '@mui/icons-material/Check'\nimport CloseIcon from '@mui/icons-material/Close'\nimport PriorityHighIcon from '@mui/icons-material/PriorityHigh'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess'\nimport { renderTime } from '../../../util/stringUtil'\n\nconst VerifyResultTable = ({ detailData }) => {\n    const { t } = useTranslation()\n    const [resultExpand, setResultExpand] = useState(true)\n\n    const renderResult = (result) => {\n        if (result === 'PASS') {\n            return (\n                <Box display=\"flex\" alignItems=\"center\">\n                    <CheckIcon sx={{ color: 'success.main', fontSize: '1.8rem' }} />\n                    <Typography variant=\"body2\" sx={{ ml: 1 }}>\n                        {t('Success')}\n                    </Typography>\n                </Box>\n            )\n        } else if (result === 'PROOF_ERROR') {\n            return (\n                <Box display=\"flex\" alignItems=\"center\">\n                    <PriorityHighIcon sx={{ color: 'warning.main' }} />\n                    <Typography variant=\"body2\" sx={{ ml: 1 }}>\n                        {t('Proof Error')}\n                    </Typography>\n                </Box>\n            )\n        } else if (result === 'FAIL') {\n            return (\n                <Box display=\"flex\" alignItems=\"center\">\n                    <CloseIcon sx={{ color: 'error.main', fontSize: '1.8rem' }} />\n                    <Typography variant=\"body2\" sx={{ ml: 1 }}>\n                        {t('Fail')}\n                    </Typography>\n                </Box>\n            )\n        } else {\n            return false\n        }\n    }\n\n    const checkIsVerifyFileName = () => {\n        var result = true\n        if (detailData.isVerifyFileName !== null && detailData.isVerifyFileName !== undefined) {\n            result = detailData.isVerifyFileName\n        }\n        return result\n    }\n\n    return (\n        <>\n            <Box my={2} display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                <Box display=\"flex\" alignItems=\"center\">\n                    <Typography variant=\"h6\" color=\"textPrimary\" sx={{ color: 'common.white' }}>\n                        {t('Verify Result')}\n                    </Typography>\n                    <IconButton\n                        size=\"small\"\n                        sx={{ color: 'common.white' }}\n                        aria-label=\"expand-list\"\n                        onClick={() => setResultExpand((prev) => !prev)}\n                    >\n                        {resultExpand ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n                    </IconButton>\n                </Box>\n            </Box>\n            <Collapse data-testid=\"list-collapse\" in={resultExpand} timeout=\"auto\" unmountOnExit>\n                <TableContainer component={Paper} sx={{ width: { xs: '100%', sm: 400 } }}>\n                    <Table id=\"verify-result-table\" stickyHeader aria-label=\"sticky table\">\n                        <TableBody>\n                            <Hidden only={['xs']}>\n                                {checkIsVerifyFileName() && (\n                                    <TableRow id=\"file-name-row\">\n                                        <TableCell align=\"left\">{t('File Name')}</TableCell>\n                                        <TableCell align=\"left\">\n                                            {renderResult(detailData.fileNameVerifyResult)}\n                                        </TableCell>\n                                    </TableRow>\n                                )}\n                                <TableRow id=\"content-row\">\n                                    <TableCell align=\"left\">{t('Content')}</TableCell>\n                                    <TableCell align=\"left\">\n                                        {renderResult(detailData.fileContentVerifyResult)}\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow id=\"verify-time-row\">\n                                    <TableCell align=\"left\" sx={{ minWidth: 150 }}>\n                                        {t('Upload Time')}\n                                    </TableCell>\n                                    <TableCell align=\"left\">{renderTime(detailData.uploadTimestamp)}</TableCell>\n                                </TableRow>\n                            </Hidden>\n                            <Hidden only={['sm', 'md', 'lg', 'xl']}>\n                                {checkIsVerifyFileName() && (\n                                    <TableRow id=\"file-name-row\">\n                                        <TableCell>\n                                            <Typography variant=\"body2\">{t('File Name')}</Typography>\n                                            <Box sx={{ mt: 1, wordBreak: 'break-all' }}>\n                                                {renderResult(detailData.fileNameVerifyResult)}\n                                            </Box>\n                                        </TableCell>\n                                    </TableRow>\n                                )}\n                                <TableRow id=\"content-row\">\n                                    <TableCell>\n                                        <Typography variant=\"body2\">{t('Content')}</Typography>\n                                        <Box sx={{ mt: 1, wordBreak: 'break-all' }}>\n                                            {renderResult(detailData.fileContentVerifyResult)}\n                                        </Box>\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow id=\"verify-time-row\">\n                                    <TableCell>\n                                        <Typography variant=\"body2\">{t('Upload Time')}</Typography>\n                                        <Typography variant=\"body2\" sx={{ mt: 1, wordBreak: 'break-all' }}>\n                                            {renderTime(detailData.uploadTimestamp)}\n                                        </Typography>\n                                    </TableCell>\n                                </TableRow>\n                            </Hidden>\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Collapse>\n        </>\n    )\n}\n\nVerifyResultTable.propTypes = {\n    detailData: PropTypes.object.isRequired,\n}\n\nexport default VerifyResultTable\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useTranslation } from 'react-i18next'\nimport { Typography, Box, TableRow, TableCell, Tooltip } from '@mui/material'\nimport ErrorIcon from '@mui/icons-material/Error'\nimport HelpIcon from '@mui/icons-material/Help'\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle'\nimport {\n    renderTime,\n    renderCmd,\n    renderCertificatedName,\n    renderAttesterAddress,\n    getContractAddressUrl,\n    getTxHashBaseUrl,\n    isEmptyString,\n} from '../../../../util/stringUtil'\n\nconst titleCell = { minWidth: '150px' }\nconst contentCell = { wordBreak: 'break-all' }\n\nconst DetailTableContent = ({ detailData }) => {\n    const { t } = useTranslation()\n\n    const {\n        certification,\n        clearanceOrder,\n        cmd,\n        contractAddress,\n        evmEnv,\n        indexValue,\n        ledgerInputTimestamp,\n        merkleProofRootHash,\n        proofFileName,\n        txHash,\n        verifyFileName,\n        verifyResult,\n        uploadFileHash,\n    } = detailData\n    const attesterAddress = renderAttesterAddress(detailData)\n    const contractAddressUrl = getContractAddressUrl(evmEnv, contractAddress)\n    const txHashBaseUrl = getTxHashBaseUrl(evmEnv)\n\n    let parseCmd = null\n    if (detailData?.cmd !== '') {\n        parseCmd = JSON.parse(cmd)\n    }\n\n    return (\n        <>\n            <TableRow id=\"uploaded-data-file-name-row\">\n                <TableCell align=\"left\" sx={titleCell}>\n                    {t('Uploaded Data File Name')}\n                </TableCell>\n                <TableCell align=\"left\" sx={contentCell}>\n                    {verifyFileName}\n                </TableCell>\n            </TableRow>\n            <TableRow id=\"uploaded-data-file-hash-row\">\n                <TableCell align=\"left\" sx={titleCell}>\n                    {t('Uploaded Data File Hash')}\n                </TableCell>\n                <TableCell align=\"left\" sx={contentCell}>\n                    {isEmptyString(uploadFileHash) ? 'N/A' : uploadFileHash}\n                </TableCell>\n            </TableRow>\n            {parseCmd && !isEmptyString(parseCmd.description) && (\n                <TableRow id=\"description-row\">\n                    <TableCell align=\"left\" sx={titleCell}>\n                        {t('Description')}\n                    </TableCell>\n                    <TableCell align=\"left\" sx={contentCell}>\n                        {parseCmd && parseCmd.description}\n                    </TableCell>\n                </TableRow>\n            )}\n            {!isEmptyString(attesterAddress) && (\n                <TableRow id=\"attester-wallet-address-row\">\n                    <TableCell align=\"left\" sx={titleCell}>\n                        {t('Attester Wallet Address')}\n                    </TableCell>\n                    <TableCell align=\"left\" sx={contentCell}>\n                        {attesterAddress}\n                    </TableCell>\n                </TableRow>\n            )}\n            <TableRow id=\"attester-certificated-info-row\">\n                <TableCell align=\"left\" sx={titleCell}>\n                    {t('Attester Certificated Info')}\n                </TableCell>\n                <TableCell align=\"left\" sx={contentCell}>\n                    <Box display=\"flex\" alignItems=\"center\">\n                        {certification ? renderCertificatedName(certification) : t('Not Certified')}\n                        {certification ? (\n                            <CheckCircleIcon fontSize=\"small\" sx={{ color: 'primary.main', ml: 1 }} />\n                        ) : (\n                            <ErrorIcon fontSize=\"small\" sx={{ color: 'text.hint', ml: 1 }} />\n                        )}\n                    </Box>\n                </TableCell>\n            </TableRow>\n            {!isEmptyString(ledgerInputTimestamp) && (\n                <TableRow id=\"attestation-time-row\">\n                    <TableCell align=\"left\" sx={titleCell}>\n                        {t('Attestation Time')}\n                    </TableCell>\n                    <TableCell align=\"left\" sx={contentCell}>\n                        {renderTime(ledgerInputTimestamp)}\n                    </TableCell>\n                </TableRow>\n            )}\n            <TableRow id=\"off-chain-proof-row\">\n                <TableCell align=\"left\" sx={titleCell}>\n                    {t('Off-chain Proof')}\n                </TableCell>\n                <TableCell align=\"left\" sx={contentCell}>\n                    {proofFileName}\n                </TableCell>\n            </TableRow>\n            <TableRow id=\"contract-address-row\">\n                <TableCell align=\"left\" sx={titleCell}>\n                    {t('Contract Address')}\n                </TableCell>\n                <TableCell align=\"left\" sx={contentCell}>\n                    {isEmptyString(contractAddress) ? (\n                        'N/A'\n                    ) : (\n                        <Box display=\"flex\" alignItems=\"center\">\n                            <Typography\n                                id=\"contract-address-link\"\n                                component=\"a\"\n                                variant=\"body2\"\n                                href={contractAddressUrl}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                                sx={{ color: 'primary.main', textDecoration: 'none', wordBreak: 'break-all' }}\n                            >\n                                {contractAddress}\n                            </Typography>\n                            {verifyResult === 'PROOF_ERROR' ? (\n                                <Tooltip\n                                    title={t('The Proof had been modified, the link might be invalid')}\n                                    placement=\"top\"\n                                    arrow\n                                >\n                                    <ErrorIcon fontSize=\"small\" sx={{ color: 'warning.main', ml: 1 }} />\n                                </Tooltip>\n                            ) : (\n                                <Tooltip\n                                    title={t('proof.verification.detail.help_contract_address')}\n                                    placement=\"top\"\n                                    aria-label=\"contractAddress\"\n                                >\n                                    <HelpIcon color=\"primary\" fontSize=\"small\" sx={{ ml: 1 }} />\n                                </Tooltip>\n                            )}\n                        </Box>\n                    )}\n                </TableCell>\n            </TableRow>\n            <TableRow id=\"blockchain-detail-row\">\n                <TableCell align=\"left\" sx={titleCell}>\n                    {t('Blockchain Detail')}\n                </TableCell>\n                <TableCell align=\"left\" sx={contentCell}>\n                    {isEmptyString(clearanceOrder) ? (\n                        'N/A'\n                    ) : (\n                        <Box display=\"flex\" alignItems=\"center\">\n                            <Typography\n                                id=\"clearance-order-link\"\n                                component=\"a\"\n                                variant=\"body2\"\n                                href={`${txHashBaseUrl}/${txHash}`}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                                sx={{ color: 'primary.main', textDecoration: 'none', wordBreak: 'break-all' }}\n                            >\n                                {clearanceOrder}\n                            </Typography>\n                            {verifyResult === 'PROOF_ERROR' ? (\n                                <Tooltip\n                                    title={t('The Proof had been modified, the link might be invalid')}\n                                    placement=\"right\"\n                                >\n                                    <ErrorIcon sx={{ color: 'warning.main', ml: 1 }} />\n                                </Tooltip>\n                            ) : (\n                                <Tooltip title={t('proof.verification.detail.help_clearance_order')} placement=\"right\">\n                                    <HelpIcon color=\"primary\" fontSize=\"small\" sx={{ ml: 1 }} />\n                                </Tooltip>\n                            )}\n                        </Box>\n                    )}\n                </TableCell>\n            </TableRow>\n            <TableRow id=\"index-value-row\">\n                <TableCell align=\"left\" sx={titleCell}>\n                    Index Value\n                </TableCell>\n                <TableCell align=\"left\" sx={contentCell}>\n                    {isEmptyString(indexValue) ? 'N/A' : indexValue}\n                </TableCell>\n            </TableRow>\n            <TableRow id=\"root-hash-row\">\n                <TableCell align=\"left\" sx={titleCell}>\n                    Root Hash\n                </TableCell>\n                <TableCell align=\"left\" sx={contentCell}>\n                    {isEmptyString(merkleProofRootHash) ? 'N/A' : merkleProofRootHash}\n                </TableCell>\n            </TableRow>\n            <TableRow id=\"attested-fields-row\">\n                <TableCell align=\"left\" sx={titleCell}>\n                    {t('Attested Fields')}\n                </TableCell>\n                <TableCell align=\"left\" sx={{ whiteSpace: 'pre-wrap', wordBreak: 'break-all', mt: 1 }}>\n                    {isEmptyString(cmd) ? 'N/A' : renderCmd(cmd)}\n                </TableCell>\n            </TableRow>\n        </>\n    )\n}\n\nDetailTableContent.propTypes = {\n    detailData: PropTypes.object.isRequired,\n}\n\nexport default DetailTableContent\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useTranslation } from 'react-i18next'\nimport { Typography, Box, TableRow, TableCell, Tooltip } from '@mui/material'\nimport ErrorIcon from '@mui/icons-material/Error'\nimport HelpIcon from '@mui/icons-material/Help'\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle'\nimport ErrorCircleIcon from '@mui/icons-material/Error'\nimport {\n    renderTime,\n    renderCmd,\n    renderCertificatedName,\n    renderAttesterAddress,\n    getContractAddressUrl,\n    getTxHashBaseUrl,\n    isEmptyString,\n} from '../../../../util/stringUtil'\n\nconst contentTypo = { mt: 1, wordBreak: 'break-all' }\n\nconst RwdDetailTableContent = ({ detailData }) => {\n    const { t } = useTranslation()\n\n    const {\n        certification,\n        clearanceOrder,\n        cmd,\n        contractAddress,\n        evmEnv,\n        indexValue,\n        ledgerInputTimestamp,\n        merkleProofRootHash,\n        proofFileName,\n        txHash,\n        verifyFileName,\n        verifyResult,\n        uploadFileHash,\n    } = detailData\n    const attesterAddress = renderAttesterAddress(detailData)\n    const contractAddressUrl = getContractAddressUrl(evmEnv, contractAddress)\n    const txHashBaseUrl = getTxHashBaseUrl(evmEnv)\n\n    let parseCmd = null\n    if (detailData?.cmd !== '') {\n        parseCmd = JSON.parse(cmd)\n    }\n\n    return (\n        <>\n            <TableRow id=\"uploaded-data-file-name-row\">\n                <TableCell>\n                    <Typography variant=\"body2\">{t('Uploaded Data File Name')}</Typography>\n                    <Typography variant=\"body2\" sx={contentTypo}>\n                        {verifyFileName}\n                    </Typography>\n                </TableCell>\n            </TableRow>\n            <TableRow id=\"uploaded-data-file-hash-row\">\n                <TableCell>\n                    <Typography variant=\"body2\">{t('Uploaded Data File Hash')}</Typography>\n                    <Typography variant=\"body2\" sx={contentTypo}>\n                        {isEmptyString(uploadFileHash) ? 'N/A' : uploadFileHash}\n                    </Typography>\n                </TableCell>\n            </TableRow>\n            {parseCmd && !isEmptyString(parseCmd.description) && (\n                <TableRow id=\"description-row\">\n                    <TableCell>\n                        <Typography variant=\"body2\">{t('Description')}</Typography>\n                        <Typography variant=\"body2\" sx={contentTypo}>\n                            {parseCmd && parseCmd.description}\n                        </Typography>\n                    </TableCell>\n                </TableRow>\n            )}\n            {!isEmptyString(attesterAddress) && (\n                <TableRow id=\"attester-wallet-address-row\">\n                    <TableCell>\n                        <Typography variant=\"body2\">{t('Attester Wallet Address')}</Typography>\n                        <Typography variant=\"body2\" sx={contentTypo}>\n                            {attesterAddress}\n                        </Typography>\n                    </TableCell>\n                </TableRow>\n            )}\n            <TableRow id=\"attester-certificated-info-row\">\n                <TableCell>\n                    <Typography variant=\"body2\">{t('Attester Certificated Info')}</Typography>\n                    <Box display=\"flex\" alignItems=\"center\" sx={contentTypo}>\n                        <Typography variant=\"body2\">\n                            {certification ? renderCertificatedName(certification) : t('Not Certified')}\n                        </Typography>\n                        {certification ? (\n                            <CheckCircleIcon fontSize=\"small\" sx={{ color: 'primary.main', ml: 1 }} />\n                        ) : (\n                            <ErrorCircleIcon fontSize=\"small\" sx={{ color: 'text.hint', ml: 1 }} />\n                        )}\n                    </Box>\n                </TableCell>\n            </TableRow>\n            {!isEmptyString(ledgerInputTimestamp) && (\n                <TableRow id=\"attestation-time-row\">\n                    <TableCell>\n                        <Typography variant=\"body2\">{t('Attestation Time')}</Typography>\n                        <Typography variant=\"body2\" sx={contentTypo}>\n                            {renderTime(ledgerInputTimestamp)}\n                        </Typography>\n                    </TableCell>\n                </TableRow>\n            )}\n            <TableRow id=\"off-chain-roof-row\">\n                <TableCell>\n                    <Typography variant=\"body2\">{t('Off-chain Proof')}</Typography>\n                    <Typography variant=\"body2\" sx={contentTypo}>\n                        {proofFileName}\n                    </Typography>\n                </TableCell>\n            </TableRow>\n            <TableRow id=\"contract-address-row\">\n                <TableCell>\n                    <Typography variant=\"body2\">{t('Contract Address')}</Typography>\n                    {isEmptyString(contractAddress) ? (\n                        'N/A'\n                    ) : (\n                        <Box display=\"flex\" alignItems=\"center\" sx={contentTypo}>\n                            <Typography\n                                id=\"contract-address-link\"\n                                component=\"a\"\n                                variant=\"body2\"\n                                href={contractAddressUrl}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                                sx={{ color: 'primary.main', textDecoration: 'none', wordBreak: 'break-all' }}\n                            >\n                                {contractAddress}\n                            </Typography>\n                            {verifyResult === 'PROOF_ERROR' ? (\n                                <Tooltip\n                                    title={t('The Proof had been modified, the link might be invalid')}\n                                    placement=\"top\"\n                                    arrow\n                                >\n                                    <ErrorIcon fontSize=\"small\" sx={{ color: 'warning.main', ml: 1 }} />\n                                </Tooltip>\n                            ) : (\n                                <Tooltip\n                                    title={t('proof.verification.detail.help_contract_address')}\n                                    placement=\"top\"\n                                    aria-label=\"contractAddress\"\n                                >\n                                    <HelpIcon color=\"primary\" fontSize=\"small\" sx={{ ml: 1 }} />\n                                </Tooltip>\n                            )}\n                        </Box>\n                    )}\n                </TableCell>\n            </TableRow>\n            <TableRow id=\"blockchain-detail-row\">\n                <TableCell>\n                    <Typography variant=\"body2\">{t('Blockchain Detail')}</Typography>\n                    {isEmptyString(clearanceOrder) ? (\n                        'N/A'\n                    ) : (\n                        <Box display=\"flex\" alignItems=\"center\" sx={contentTypo}>\n                            <Typography\n                                id=\"clearance-order-link\"\n                                component=\"a\"\n                                variant=\"body2\"\n                                href={`${txHashBaseUrl}/${txHash}`}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                                sx={{ color: 'primary.main', textDecoration: 'none', wordBreak: 'break-all' }}\n                            >\n                                {clearanceOrder}\n                            </Typography>\n                            {verifyResult === 'PROOF_ERROR' ? (\n                                <Tooltip\n                                    title={t('The Proof had been modified, the link might be invalid')}\n                                    placement=\"right\"\n                                >\n                                    <ErrorIcon sx={{ color: 'warning.main', ml: 1 }} />\n                                </Tooltip>\n                            ) : (\n                                <Tooltip title={t('proof.verification.detail.help_clearance_order')} placement=\"right\">\n                                    <HelpIcon color=\"primary\" fontSize=\"small\" sx={{ ml: 1 }} />\n                                </Tooltip>\n                            )}\n                        </Box>\n                    )}\n                </TableCell>\n            </TableRow>\n            <TableRow id=\"index-value-row\">\n                <TableCell>\n                    <Typography variant=\"body2\">Index Value</Typography>\n                    <Typography variant=\"body2\" sx={contentTypo}>\n                        {isEmptyString(indexValue) ? 'N/A' : indexValue}\n                    </Typography>\n                </TableCell>\n            </TableRow>\n            <TableRow id=\"root-hash-row\">\n                <TableCell>\n                    <Typography variant=\"body2\">Root Hash</Typography>\n                    <Typography variant=\"body2\" sx={contentTypo}>\n                        {isEmptyString(merkleProofRootHash) ? 'N/A' : merkleProofRootHash}\n                    </Typography>\n                </TableCell>\n            </TableRow>\n            <TableRow id=\"attested-fields-row\">\n                <TableCell>\n                    <Typography variant=\"body2\">{t('Attested Fields')}</Typography>\n                    <Typography variant=\"body2\" sx={{ whiteSpace: 'pre-wrap', wordBreak: 'break-all', mt: 1 }}>\n                        {isEmptyString(cmd) ? 'N/A' : renderCmd(cmd)}\n                    </Typography>\n                </TableCell>\n            </TableRow>\n        </>\n    )\n}\n\nRwdDetailTableContent.propTypes = {\n    detailData: PropTypes.object.isRequired,\n}\n\nexport default RwdDetailTableContent\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTranslation } from 'react-i18next'\nimport { Box, Typography, Paper, Table, TableBody, TableContainer, Hidden, IconButton, Collapse } from '@mui/material'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess'\nimport DetailTableContent from './DetailTableContent'\nimport RwdDetailTableContent from './RwdDetailTableContent'\n\nconst VerifyDetailTable = ({ detailData }) => {\n    const { t } = useTranslation()\n    const [detailExpand, setDetailExpand] = useState(true)\n\n    return (\n        <>\n            <Box mt={4} mb={2}>\n                <Box display=\"flex\" alignItems=\"center\">\n                    <Typography variant=\"h6\" color=\"textPrimary\" sx={{ color: 'common.white' }}>\n                        {t('Verify Detail')}\n                    </Typography>\n                    <IconButton\n                        size=\"small\"\n                        sx={{ color: 'common.white' }}\n                        aria-label=\"expand-list\"\n                        onClick={() => setDetailExpand((prev) => !prev)}\n                    >\n                        {detailExpand ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n                    </IconButton>\n                </Box>\n            </Box>\n            <Collapse data-testid=\"list-collapse\" in={detailExpand} timeout=\"auto\" unmountOnExit>\n                <TableContainer component={Paper}>\n                    <Table id=\"verify-detail-table\" aria-label=\"sticky table\">\n                        <TableBody>\n                            <Hidden only={['xs']}>\n                                <DetailTableContent detailData={detailData} />\n                            </Hidden>\n                            <Hidden only={['sm', 'md', 'lg', 'xl']}>\n                                <RwdDetailTableContent detailData={detailData} />\n                            </Hidden>\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Collapse>\n        </>\n    )\n}\n\nVerifyDetailTable.propTypes = {\n    detailData: PropTypes.object.isRequired,\n}\n\nexport default VerifyDetailTable\n","import React, { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useMediaQuery, Typography, Backdrop, CircularProgress, Box } from '@mui/material'\nimport UploadSection from './UploadSection/UploadSection'\nimport VerifyResultTable from './VerifyResultTable'\nimport VerifyDetailTable from './VerifyDetailTable/VerifyDetailTable'\nimport theme from '../../../theme/Theme'\n\nconst RawDataVerificationPage = () => {\n    const { t } = useTranslation()\n    const matches = useMediaQuery((theme) => theme.breakpoints.down('sm'))\n    const [open, setopen] = useState(false)\n    const [detailData, setDetailData] = useState(null)\n\n    const handleDetailDataChange = (data) => {\n        setDetailData(data)\n    }\n\n    const handleBackdropOpen = () => {\n        setopen(true)\n    }\n\n    const handleBackdropClose = () => {\n        setopen(false)\n    }\n\n    return (\n        <div>\n            <Typography variant={matches ? 'h5' : 'h4'} sx={{ color: 'common.white' }}>\n                {t('Raw Data Verification')}\n            </Typography>\n            <Box mt={2}>\n                <UploadSection\n                    handleDetailDataChange={handleDetailDataChange}\n                    handleBackdropOpen={handleBackdropOpen}\n                    handleBackdropClose={handleBackdropClose}\n                />\n                {detailData && (\n                    <>\n                        <VerifyResultTable detailData={detailData} />\n                        <VerifyDetailTable detailData={detailData} />\n                    </>\n                )}\n            </Box>\n            <Backdrop open={open} sx={{ zIndex: theme.zIndex.drawer + 1, color: 'common.white' }}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        </div>\n    )\n}\n\nexport default RawDataVerificationPage\n","import CryptoJS from 'crypto-js'\n\nconst sha256File = (file, onProgress, chunkSize = 1024 * 1024, reader = undefined, hasher = undefined) => {\n    if (reader === undefined) {\n        // on initial\n        return new Promise((resolve, reject) => {\n            hasher = CryptoJS.algo.SHA256.create()\n            reader = new FileReader()\n            reader.size = chunkSize\n            reader.offset = 0\n            reader.index = 0\n            reader.onload = function (event) {\n                hasher.update(CryptoJS.lib.WordArray.create(event.target.result))\n                sha256File(file, onProgress, chunkSize, this, hasher)\n                    .then((hash) => {\n                        resolve(hash)\n                    })\n                    .catch(reject)\n            }\n            var partial = file.slice(reader.offset, reader.offset + reader.size)\n            reader.readAsArrayBuffer(partial)\n        })\n    } else {\n        if (reader.offset + reader.size < file.size) {\n            // on progress\n            return new Promise((resolve, reject) => {\n                reader.offset += chunkSize\n                reader.index += 1\n                reader.onload = function (event) {\n                    hasher.update(CryptoJS.lib.WordArray.create(event.target.result))\n                    const progress = ((reader.offset + reader.size) / file.size) * 100\n                    onProgress(progress.toFixed(0))\n                    sha256File(file, onProgress, chunkSize, this, hasher)\n                        .then((hash) => {\n                            resolve(hash)\n                        })\n                        .catch(reject)\n                }\n                var partial = file.slice(reader.offset, reader.offset + reader.size)\n                reader.readAsArrayBuffer(partial)\n            })\n        } else {\n            // on final\n            return new Promise((resolve, reject) => {\n                onProgress(100)\n                resolve(hasher.finalize().toString())\n                reject('read file fail')\n            })\n        }\n    }\n}\n\nconst getAndSha256FileList = (fileList, onProgress, index = 0) => {\n    if (fileList === undefined || fileList.length === 0) {\n        return Promise.resolve(fileList)\n    }\n    const resultPromise = sha256File(fileList[index], (progress) => onProgress(index, progress, fileList[index].name))\n    if (index + 1 === fileList.length) {\n        // on final\n        return new Promise((resolve, reject) => {\n            resultPromise\n                .then((hash) => {\n                    const toVerifyFile = {\n                        fileName: fileList[index].name,\n                        hash: hash,\n                    }\n                    resolve([toVerifyFile])\n                })\n                .catch(reject)\n        })\n    } else {\n        // on progress\n        return new Promise((resolve, reject) => {\n            resultPromise\n                .then((hash) => {\n                    const toVerifyFile = {\n                        fileName: fileList[index].name,\n                        hash: hash,\n                    }\n                    getAndSha256FileList(fileList, onProgress, index + 1)\n                        .then((_toVerifyFileList) => {\n                            const toVerifyFileList = [toVerifyFile, ..._toVerifyFileList]\n                            resolve(toVerifyFileList)\n                        })\n                        .catch(reject)\n                })\n                .catch(reject)\n        })\n    }\n}\n\nexport { getAndSha256FileList }\n","import React, { useState, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTranslation } from 'react-i18next'\nimport { useDropzone } from 'react-dropzone'\nimport { useSnackbar } from 'notistack'\nimport { Box, Typography } from '@mui/material'\nimport Alert from '@mui/material/Alert'\nimport FileUpload from '../../../../img/fileUpload.svg'\nimport { getAndSha256FileList } from '../../../../util/cryptoUtil'\nimport theme from '../../../../theme/Theme'\n\nconst UploadFolder = ({ setFileList, setRootFolderName, handleNext, handleUploadStart }) => {\n    const { t } = useTranslation()\n    const { enqueueSnackbar } = useSnackbar()\n    const [cursor, setCursor] = useState('')\n    const cursorStyle = {\n        cursor: cursor,\n    }\n\n    const checkFileNameValid = (name) => {\n        const nameFirstIndex = name.slice(0, 1)\n        if (nameFirstIndex.includes('.') || nameFirstIndex.includes('~') || nameFirstIndex.includes('$')) {\n            return false\n        }\n\n        if (name.toLocaleLowerCase() === 'desktop.ini') {\n            return false\n        }\n\n        return true\n    }\n\n    const checkFileInRootFolder = (file) => {\n        var folderPath = file.path.slice(0, file.path.indexOf(file.name))\n        var count = (folderPath.match(/\\//g) || []).length\n        if (count > 1) {\n            return false\n        }\n        return true\n    }\n\n    const getRootFolderName = (path) => {\n        return path.slice(0, path.indexOf('/'))\n    }\n\n    const onDrop = useCallback((acceptedFiles) => {\n        console.log('start uploading files, acceptedFiles=', acceptedFiles)\n        if (acceptedFiles.length > 0) {\n            handleUploadStart()\n\n            // set root folder name\n            var folderName = getRootFolderName(acceptedFiles[0].path)\n            setRootFolderName(folderName)\n            // Only get files in root folder, and ignore hidden file name\n            var toReadFiles = []\n            for (let i = 0; i < acceptedFiles.length; i++) {\n                var file = acceptedFiles[i]\n                if (checkFileInRootFolder(file) && checkFileNameValid(file.name)) {\n                    toReadFiles.push(file)\n                }\n            }\n            // TODO handle if root folder doesn't contain any file (only subfolder has file)\n            const onProgress = (index, progress, fileName) => {\n                console.log(`index=${index}, fileName=${fileName}`)\n            }\n            getAndSha256FileList(toReadFiles, onProgress).then((toVerifyFileList) => {\n                console.log('toVerifyFileList=', toVerifyFileList)\n                setFileList(toVerifyFileList)\n                handleNext()\n            })\n        }\n    }, [])\n\n    const onDropRejected = () => {\n        enqueueSnackbar(`${t('Maximum file upload size is 5GB')}`, {\n            variant: 'warning',\n        })\n    }\n    const maxSize = Number(process.env.REACT_APP_UPLOAD_MAX_SIZE) * 1024 * 1024\n\n    const { getRootProps, getInputProps } = useDropzone({ onDrop, onDropRejected, maxSize })\n\n    return (\n        <>\n            <Box\n                style={cursorStyle}\n                onMouseOver={() => {\n                    setCursor('pointer')\n                }}\n                onMouseLeave={() => {\n                    setCursor('')\n                }}\n            >\n                <div {...getRootProps()}>\n                    <input\n                        id=\"folder-uploader\"\n                        data-testid=\"folder-uploader\"\n                        {...getInputProps()}\n                        webkitdirectory=\"\"\n                        type=\"file\"\n                    />\n                    <Box\n                        sx={{\n                            height: 220,\n                            backgroundColor: 'background.uploader',\n                            textAlign: 'center',\n                            color: 'text.secondary',\n                            display: 'flex',\n                            flexDirection: 'column',\n                            alignItems: 'center',\n                            justifyContent: 'center',\n                            borderRadius: `0 0 ${theme.shape.borderRadius}px ${theme.shape.borderRadius}px`,\n                        }}\n                    >\n                        <Box py={1.5}>\n                            <img width=\"45\" alt=\"fileUpload\" src={FileUpload} />\n                        </Box>\n                        <Typography variant=\"body1\" sx={{ color: 'background.main', fontWeight: 'bold' }}>\n                            {t('Choose a Folder to Verify')}\n                        </Typography>\n                    </Box>\n                </div>\n            </Box>\n            <Box mt={2}>\n                <Alert severity=\"warning\">\n                    {t('upload.binary.data.alert_upload_hash_info')}\n                    {t('upload.folder.alert')}\n                </Alert>\n            </Box>\n        </>\n    )\n}\n\nUploadFolder.propTypes = {\n    setFileList: PropTypes.func.isRequired,\n    setRootFolderName: PropTypes.func.isRequired,\n    handleUploadStart: PropTypes.func.isRequired,\n    handleNext: PropTypes.func.isRequired,\n}\n\nexport default UploadFolder\n","export default {\n    OK: 'OK',\n    ERROR: 'ERROR',\n    NOT_IN_PROOF: 'NOT_IN_PROOF',\n    MISSING_DATA_TO_VERIFY: 'MISSING_DATA_TO_VERIFY',\n}\n","import { verify } from './verifyService'\nimport { ExistenceType } from '../../constants/ExistenceType'\nimport VerifyFileNameAndHashStatus from '../../constants/VerifyFileNameAndHashStatus'\n\nconst verifyFileSetAndContinuousProof = async (verificationProof, fileNameAndHashList, infuraProjectId) => {\n    const verifyProofResult = await verify(verificationProof, infuraProjectId)\n    const verifyFileSetResultList = await verifyFileNameAndHashListWithContinuousProof(\n        fileNameAndHashList,\n        verifyProofResult,\n    )\n    console.log('verifyFileSetAndContinuousProof() end', { verifyProofResult, verifyFileSetResultList })\n    return { verifyProofResult, verifyFileSetResultList }\n}\n\n//TODO add unit test\nconst verifyFileNameAndHashListWithContinuousProof = async (fileNameAndHashList, verifyProofResult) => {\n    console.log('verifyFileNameAndHashListWithContinuousProof() start', { fileNameAndHashList, verifyProofResult })\n    const existProofVerifyResultList = getOnlyExistVerifyReceiptResult(verifyProofResult.verifyReceiptResult)\n    var verifyFileSetResultList = existProofVerifyResultList.map((existProofVerifyResult) => {\n        const verifyFileNameAndFileHashResult = verifyFileNameAndHashWithProofVerifyResult(\n            existProofVerifyResult,\n            fileNameAndHashList,\n        )\n        console.log({ verifyFileNameAndFileHashResult, fileNameAndHashList })\n        return verifyFileNameAndFileHashResult\n    })\n    // Add remain element to result list\n    fileNameAndHashList.forEach((element) => {\n        var verifyResult = {\n            fileName: element.fileName,\n            fileHash: element.hash,\n            status: VerifyFileNameAndHashStatus.NOT_IN_PROOF,\n        }\n        verifyFileSetResultList.push(verifyResult)\n    })\n    console.log('verifyFileNameAndHashListWithContinuousProof() end', { verifyFileSetResultList })\n    return verifyFileSetResultList\n}\n\n//TODO add unit test\nconst verifyFileNameAndHashWithProofVerifyResult = (existProofVerifyResult, fileNameAndHashList) => {\n    var verifyFileNameAndHashResult = null\n    var verifyStatus = null\n    if (isFileType(existProofVerifyResult.cmd)) {\n        const cmdObject = JSON.parse(existProofVerifyResult.cmd)\n        if (existProofVerifyResult.pass) {\n            const fileObjectInList = getFileObjectInList(cmdObject.fileName, fileNameAndHashList)\n            console.log({ fileObjectInList, cmdFileName: cmdObject.fileName })\n            if (fileObjectInList) {\n                // remove the file from the list\n                fileNameAndHashList.splice(fileObjectInList.index, 1)\n                if (cmdObject.fileHash === fileObjectInList.hash) {\n                    verifyStatus = VerifyFileNameAndHashStatus.OK\n                } else {\n                    verifyStatus = VerifyFileNameAndHashStatus.ERROR\n                }\n            } else {\n                verifyStatus = VerifyFileNameAndHashStatus.MISSING_DATA_TO_VERIFY\n            }\n        } else {\n            verifyStatus = VerifyFileNameAndHashStatus.ERROR\n        }\n        verifyFileNameAndHashResult = {\n            fileName: cmdObject.fileName,\n            fileHash: cmdObject.fileHash,\n            status: verifyStatus,\n        }\n    }\n    return verifyFileNameAndHashResult\n}\n\nconst getFileObjectInList = (fileName, fileNameAndHashList) => {\n    var result = null\n    for (let i = 0; i < fileNameAndHashList.length; i++) {\n        if (fileNameAndHashList[i].fileName === fileName) {\n            result = { ...fileNameAndHashList[i], index: i }\n            break\n        }\n    }\n    return result\n}\n\nconst isFileType = (cmd) => {\n    var result = false\n    if (cmd) {\n        if (cmd.includes('fileName') && cmd.includes('fileHash')) {\n            result = true\n        }\n    }\n    return result\n}\n\nconst getOnlyExistVerifyReceiptResult = (verifyReceiptResultList) => {\n    const result = verifyReceiptResultList.filter((object) => {\n        return object.existenceType === ExistenceType.EXIST\n    })\n    return result\n}\n\nexport { verifyFileSetAndContinuousProof }\nexport const __testing =\n    process.env.NODE_ENV === 'test'\n        ? {\n              verifyFileNameAndHashListWithContinuousProof,\n              verifyFileNameAndHashWithProofVerifyResult,\n              getFileObjectInList,\n              isFileType,\n              getOnlyExistVerifyReceiptResult,\n          }\n        : void 0\n","import { StatusConstantsString } from '../../constants/StatusConstantsString'\nimport VerifyFileNameAndHashStatus from '../../constants/VerifyFileNameAndHashStatus'\nimport VerifyResultDescription from '../../constants/VerifyResultDescription'\nimport { getCertification } from '../service/certificationService'\nimport { verifyFileSetAndContinuousProof } from '../service/verifyContinuousProofService'\nimport { obtainExplorerType } from '../util/blockChainExplorerUrlUtil'\nimport { loadVerificationProofFileToJson } from '../util/fileUtil'\nimport {\n    buildVerifyProofDetailList,\n    getVerifyResult,\n    getVerifyResultDescription,\n    isVerificationContentContainsNull,\n} from '../util/verificationUtil'\n\nconst INFURA_PROJECT_ID = process.env.REACT_APP_INFURA_PROJECT_ID\n\nconst verifyFileSetWithVerificationProof = async (fileNameAndHashList, proofFile) => {\n    const verifyTimestamp = Date.now()\n    var verificationProof\n    var responseResult\n    const proofFileName = proofFile.name\n    try {\n        verificationProof = await loadVerificationProofFileToJson(proofFile)\n    } catch (error) {\n        console.log('parse proof file fail')\n    }\n    if (!verificationProof) {\n        responseResult = {\n            status: 'error',\n            description: VerifyResultDescription.COVERT_FILE_TO_VERIFICATION_PROOF_FAIL,\n            verifyResultDescription: VerifyResultDescription.COVERT_FILE_TO_VERIFICATION_PROOF_FAIL,\n            proofFileName,\n        }\n    } else if (isVerificationContentContainsNull(verificationProof)) {\n        responseResult = {\n            status: 'error',\n            description: VerifyResultDescription.VERIFICATION_PROOF_CONTENT_NULL_ERROR,\n            verifyResultDescription: VerifyResultDescription.VERIFICATION_PROOF_CONTENT_NULL_ERROR,\n            proofFileName,\n        }\n    } else {\n        const verifyFileSetAndContinuousProofResult = await verifyFileSetAndContinuousProof(\n            verificationProof,\n            fileNameAndHashList,\n            INFURA_PROJECT_ID,\n        )\n        await getCertification(verifyFileSetAndContinuousProofResult.verifyProofResult, verificationProof)\n\n        responseResult = await buildVerifyContinuousProofResponse(\n            verifyTimestamp,\n            proofFileName,\n            verificationProof,\n            verifyFileSetAndContinuousProofResult,\n        )\n    }\n    console.log('verifyFileSetWithVerificationProof() end', { responseResult })\n    return responseResult\n}\n\nconst buildVerifyContinuousProofResponse = async (\n    verifyTimestamp,\n    proofFileName,\n    verificationProof,\n    verifyFileSetAndContinuousProofResult,\n) => {\n    const { verifyProofResult, verifyFileSetResultList } = verifyFileSetAndContinuousProofResult\n    console.log('buildVerifyContinuousProofResponse() start', { verifyFileSetAndContinuousProofResult })\n    const verifyFileCount = countVerifyFileCount(verifyFileSetResultList)\n    const verifyResult = getVerifyResult(verifyProofResult.status)\n    const verifyResultDescription = getVerifyResultDescription(verifyProofResult.status)\n\n    const result = {\n        status: StatusConstantsString.OK,\n        description: verifyResultDescription,\n        verifyResultDescription: verifyResultDescription,\n        proofFileName: proofFileName,\n        verifyResult: verifyResult,\n        query: verifyProofResult.query,\n        queryType: verifyProofResult.queryType,\n        evmEnv: verificationProof.env,\n        explorerType: obtainExplorerType(verificationProof.env),\n        uploadTimestamp: verifyTimestamp,\n        contractAddress: verificationProof.contractAddress,\n        totalCount: verifyProofResult.totalCount,\n        successCount: verifyProofResult.successCount,\n        modifiedCount: verifyProofResult.modifiedCount,\n        removedCount: verifyProofResult.removedCount,\n        addedCount: verifyProofResult.addedCount,\n        errorClearanceOrderInClearanceRecordList: verifyProofResult.errorClearanceOrderInClearanceRecordList,\n        proofDetailList: await buildVerifyProofDetailList(verifyProofResult),\n        verifyFileNameAndHashDetailList: verifyFileSetResultList,\n        verifyFileTotalCount: verifyFileCount.total,\n        verifyFileSuccessCount: verifyFileCount.success,\n        verifyFileMissingCount: verifyFileCount.missing,\n        verifyFileAddedCount: verifyFileCount.added,\n        verifyFileModifiedCount: verifyFileCount.modified,\n    }\n    return result\n}\n\nconst countVerifyFileCount = (verifyFileSetResultList) => {\n    const total = verifyFileSetResultList?.length || 0\n    var success = 0\n    var modified = 0\n    var added = 0\n    var missing = 0\n    if (verifyFileSetResultList && verifyFileSetResultList.length > 0) {\n        verifyFileSetResultList.forEach((result) => {\n            switch (result.status) {\n                case VerifyFileNameAndHashStatus.OK:\n                    {\n                        success++\n                    }\n                    break\n                case VerifyFileNameAndHashStatus.ERROR:\n                    {\n                        modified++\n                    }\n                    break\n                case VerifyFileNameAndHashStatus.NOT_IN_PROOF:\n                    {\n                        added++\n                    }\n                    break\n                case VerifyFileNameAndHashStatus.MISSING_DATA_TO_VERIFY:\n                    {\n                        missing++\n                    }\n                    break\n            }\n        })\n    }\n\n    return {\n        total,\n        success,\n        modified,\n        added,\n        missing,\n    }\n}\n\nexport { verifyFileSetWithVerificationProof }\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useTranslation } from 'react-i18next'\nimport { Box, Button, Typography } from '@mui/material'\nimport CloudUploadIcon from '@mui/icons-material/CloudUpload'\nimport UploadedInfoAlert from '../../../common/UploadedInfoAlert'\n\nconst RwdUploadSection = ({\n    activeStep,\n    fileList,\n    rootFolderName,\n    verificationProof,\n    onFolderUpload,\n    onProofUpload,\n    handleReset,\n    handleVerify,\n}) => {\n    const { t } = useTranslation()\n\n    return (\n        <>\n            <Typography sx={{ color: 'common.white' }} variant=\"body1\">\n                {t('Upload Folder to Verify')}\n            </Typography>\n            <Button\n                variant=\"contained\"\n                component=\"label\"\n                color=\"primary\"\n                startIcon={<CloudUploadIcon />}\n                disabled={activeStep === 3}\n                sx={{ mt: 1 }}\n            >\n                {t('Upload Folder')}\n                <input\n                    style={{ display: 'none' }}\n                    id=\"upload-folder-button\"\n                    data-testid=\"upload-folder-input\"\n                    webkitdirectory=\"\"\n                    type=\"file\"\n                    onChange={onFolderUpload}\n                />\n            </Button>\n            {fileList[0] && (\n                <Box mt={1}>\n                    <UploadedInfoAlert uploadedFiles={fileList} rootFolderName={rootFolderName} />\n                </Box>\n            )}\n            <Box mt={2}>\n                <Typography sx={{ color: 'common.white' }} variant=\"body1\">\n                    {t('Upload Off-chain Proof')}\n                </Typography>\n                <Button\n                    variant=\"contained\"\n                    component=\"label\"\n                    color=\"primary\"\n                    startIcon={<CloudUploadIcon />}\n                    disabled={activeStep === 3 || activeStep === 0}\n                    sx={{ mt: 1 }}\n                >\n                    {t('Upload')}\n                    <input\n                        style={{ display: 'none' }}\n                        id=\"upload-proof-button\"\n                        data-testid=\"upload-proof-input\"\n                        type=\"file\"\n                        onChange={onProofUpload}\n                    />\n                </Button>\n                {verificationProof[0] && (\n                    <Box mt={1}>\n                        <UploadedInfoAlert uploadedFiles={verificationProof} />\n                    </Box>\n                )}\n            </Box>\n            <Box mt={2}>\n                <Typography sx={{ color: 'common.white' }} variant=\"body1\">\n                    {t('Verify')}\n                </Typography>\n                <Box display=\"flex\" alignItems=\"center\">\n                    <Button\n                        id=\"verify-btn\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={activeStep === 3 ? handleReset : handleVerify}\n                        // FIXME should not be disable on success stage\n                        disabled={!(fileList[0] && verificationProof[0])}\n                        sx={{ mt: 1 }}\n                    >\n                        {activeStep === 3 ? t('Reupload') : t('Verify')}\n                    </Button>\n                </Box>\n            </Box>\n        </>\n    )\n}\n\nRwdUploadSection.propTypes = {\n    activeStep: PropTypes.number.isRequired,\n    fileList: PropTypes.array.isRequired,\n    rootFolderName: PropTypes.string.isRequired,\n    verificationProof: PropTypes.array.isRequired,\n    onFolderUpload: PropTypes.func.isRequired,\n    onProofUpload: PropTypes.func.isRequired,\n    handleReset: PropTypes.func.isRequired,\n    handleVerify: PropTypes.func.isRequired,\n}\n\nexport default RwdUploadSection\n","import React, { useState } from 'react'\nimport i18next from 'i18next'\nimport { useTranslation } from 'react-i18next'\nimport PropTypes from 'prop-types'\nimport { useSnackbar } from 'notistack'\nimport moment from 'moment'\nimport { Hidden } from '@mui/material'\nimport VerifyStepper from '../../../common/VerifyStepper/VerifyStepper'\nimport UploadFolder from './UploadFolder'\nimport UploadVerificationProof from '../../../common/UploadVerificationProof'\nimport { verifyFileSetWithVerificationProof } from '../../../../function/api/verifyFileSetApi'\nimport UploadedInfoSection from '../../../common/UploadedInfoSection'\nimport StepperButton from '../../../common/VerifyStepper/StepperButton'\nimport RwdUploadSection from './RwdUploadSection'\nimport { getAndSha256FileList } from '../../../../util/cryptoUtil'\nimport { toHumanReadableFileSize } from '../../../../util/stringUtil'\n\nconst UploadSection = ({ handleDetailDataChange, handleInProgress, handleProgressDone }) => {\n    const { t } = useTranslation()\n    const { enqueueSnackbar } = useSnackbar()\n    const [activeStep, setActiveStep] = useState(0)\n    const [verificationProof, setverificationProof] = useState([])\n    const [fileList, setFileList] = useState([])\n    const [rootFolderName, setRootFolderName] = useState('')\n\n    const handleProofDataChange = (files) => {\n        setverificationProof(files)\n    }\n\n    const handleNext = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep + 1)\n        handleProgressDone()\n    }\n\n    const handleFileBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1)\n        setFileList([])\n    }\n\n    const handleProofBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1)\n        setverificationProof([])\n    }\n\n    const onBackButtonClick = () => {\n        if (activeStep === 1) {\n            handleFileBack()\n        } else if (activeStep === 2) {\n            handleProofBack()\n        }\n    }\n\n    const handleVerify = () => {\n        handleInProgress()\n        const uploadTimestamp = Number(moment(moment.now()).format('x'))\n        verifyFileSetWithVerificationProof(fileList, verificationProof[0])\n            .then((result) => {\n                console.log('handleVerify() res=', result)\n                var fileVerifyResult = 'FAIL'\n                if (result.verifyResult === 'FAIL') {\n                    fileVerifyResult = 'PROOF_ERROR'\n                } else if (result.verifyFileTotalCount === result.verifyFileSuccessCount) {\n                    fileVerifyResult = 'PASS'\n                }\n\n                handleDetailDataChange({\n                    ...result,\n                    rootFolderName,\n                    fileVerifyResult,\n                    uploadTimestamp,\n                })\n\n                enqueueSnackbar(`${t('Upload successful')}`, {\n                    variant: 'success',\n                })\n                handleNext()\n            })\n            .catch((error) => {\n                console.log('handleVerify() error=', error)\n                enqueueSnackbar(t('Upload fail'), {\n                    variant: 'error',\n                })\n                handleNext()\n            })\n    }\n\n    const handleReset = () => {\n        setActiveStep(0)\n        setFileList([])\n        setRootFolderName('')\n        setverificationProof([])\n    }\n\n    //RWD\n    const maxSize = Number(process.env.REACT_APP_UPLOAD_MAX_SIZE) * 1024 * 1024\n    const getRootFolderName = (path) => {\n        return path.slice(0, path.indexOf('/'))\n    }\n\n    const checkFileInRootFolder = (file) => {\n        var folderPath = file.webkitRelativePath.slice(0, file.webkitRelativePath.indexOf(file.name))\n        var count = (folderPath.match(/\\//g) || []).length\n        if (count > 1) {\n            return false\n        }\n        return true\n    }\n    const checkFileNameValid = (name) => {\n        const nameFirstIndex = name.slice(0, 1)\n        if (nameFirstIndex.includes('.') || nameFirstIndex.includes('~') || nameFirstIndex.includes('$')) {\n            return false\n        }\n\n        if (name.toLocaleLowerCase() === 'desktop.ini') {\n            return false\n        }\n\n        return true\n    }\n\n    const onFolderUpload = (event) => {\n        const acceptedFiles = event.target.files\n        const uploadFiles = Object.keys(acceptedFiles).map((key) => acceptedFiles[key])\n        console.log('start uploading files, acceptedFiles=', uploadFiles)\n        //calculate upload files total size\n        var uploadFilesSize = 0\n        uploadFiles.forEach((file) => (uploadFilesSize += file.size))\n\n        if (uploadFilesSize <= maxSize && uploadFiles.length > 0) {\n            handleInProgress()\n\n            // set root folder name\n            var folderName = getRootFolderName(uploadFiles[0].webkitRelativePath)\n            setRootFolderName(folderName)\n            // Only get files in root folder, and ignore hidden file name\n            var toReadFiles = []\n            for (let i = 0; i < uploadFiles.length; i++) {\n                var file = uploadFiles[i]\n                if (checkFileInRootFolder(file) && checkFileNameValid(file.name)) {\n                    toReadFiles.push(file)\n                }\n            }\n            // TODO handle if root folder doesn't contain any file (only subfolder has file)\n            const onProgress = (index, progress, fileName) => {\n                console.log(`index=${index}, fileName=${fileName}`)\n            }\n            getAndSha256FileList(toReadFiles, onProgress).then((toVerifyFileList) => {\n                console.log('toVerifyFileList=', toVerifyFileList)\n                setFileList(toVerifyFileList)\n                !verificationProof[0] ? setActiveStep(1) : setActiveStep(2)\n                handleProgressDone()\n            })\n        } else {\n            enqueueSnackbar(\n                `${i18next.t('Maximum file upload size is {{maxSize}}', {\n                    maxSize: toHumanReadableFileSize(maxSize),\n                })}`,\n                {\n                    variant: 'warning',\n                },\n            )\n        }\n    }\n    const onProofUpload = (event) => {\n        const uploadProof = event.target.files[0]\n        console.log('uploadProof=', uploadProof)\n        if (\n            uploadProof.name.slice(uploadProof.name.lastIndexOf('.')) === '.json' ||\n            uploadProof.name.slice(uploadProof.name.lastIndexOf('.')) === '.itm'\n        ) {\n            if (uploadProof.size <= maxSize) {\n                setverificationProof([uploadProof])\n                setActiveStep(2)\n            } else {\n                enqueueSnackbar(\n                    `${i18next.t('Maximum file upload size is {{maxSize}}', {\n                        maxSize: toHumanReadableFileSize(maxSize),\n                    })}`,\n                    {\n                        variant: 'warning',\n                    },\n                )\n            }\n        } else {\n            enqueueSnackbar(`${t('Upload off-chain proof file name extension need to be .json or .itm')}`, {\n                variant: 'warning',\n            })\n        }\n    }\n\n    return (\n        <>\n            <Hidden only={['xs']}>\n                <VerifyStepper activeStep={activeStep} />\n                {activeStep === 0 && (\n                    <UploadFolder\n                        setFileList={setFileList}\n                        setRootFolderName={setRootFolderName}\n                        handleUploadStart={handleInProgress}\n                        handleNext={handleNext}\n                    />\n                )}\n                {activeStep === 1 && fileList.length > 0 && (\n                    <UploadVerificationProof\n                        uploadedFiles={fileList}\n                        handleProofDataChange={handleProofDataChange}\n                        handleNext={handleNext}\n                        rootFolderName={rootFolderName}\n                    />\n                )}\n                {activeStep === 2 && (\n                    <UploadedInfoSection\n                        uploadedFiles={fileList}\n                        verificationProof={verificationProof}\n                        rootFolderName={rootFolderName}\n                    />\n                )}\n                <StepperButton\n                    activeStep={activeStep}\n                    onBackButtonClick={onBackButtonClick}\n                    handleVerify={handleVerify}\n                    handleReset={handleReset}\n                />\n            </Hidden>\n            <Hidden only={['sm', 'md', 'lg', 'xl']}>\n                <RwdUploadSection\n                    activeStep={activeStep}\n                    fileList={fileList}\n                    rootFolderName={rootFolderName}\n                    verificationProof={verificationProof}\n                    onFolderUpload={onFolderUpload}\n                    onProofUpload={onProofUpload}\n                    handleReset={handleReset}\n                    handleVerify={handleVerify}\n                />\n            </Hidden>\n        </>\n    )\n}\n\nUploadSection.propTypes = {\n    handleDetailDataChange: PropTypes.func.isRequired,\n    handleInProgress: PropTypes.func.isRequired,\n    handleProgressDone: PropTypes.func.isRequired,\n}\n\nexport default UploadSection\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useTranslation } from 'react-i18next'\nimport {\n    Box,\n    IconButton,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Tooltip,\n    Typography,\n    Hidden,\n    Modal,\n} from '@mui/material'\nimport CheckIcon from '@mui/icons-material/Check'\nimport CloseIcon from '@mui/icons-material/Close'\nimport SearchIcon from '@mui/icons-material/Search'\nimport HelpIcon from '@mui/icons-material/Help'\nimport PriorityHighIcon from '@mui/icons-material/PriorityHigh'\n\nconst FilesVerifyListModal = ({ verifyFileDetailList, modalOpen, handleVerifyListModalClose, handleMoreInfoOpen }) => {\n    const { t } = useTranslation()\n\n    const renderResult = (result) => {\n        if (result === 'OK') {\n            return <CheckIcon sx={{ color: 'success.main', fontSize: '1.8rem' }} />\n        } else if (result === 'NOT_IN_PROOF') {\n            return (\n                <Tooltip title={t('Proof Not Found')} placement=\"right\">\n                    <HelpIcon sx={{ color: 'warning.light' }} />\n                </Tooltip>\n            )\n        } else if (result === 'MISSING_DATA_TO_VERIFY') {\n            return (\n                <Tooltip title={t('Missing data to verify')} placement=\"right\">\n                    <PriorityHighIcon sx={{ color: 'warning.main' }} />\n                </Tooltip>\n            )\n        } else {\n            return <CloseIcon sx={{ color: 'error.main', fontSize: '1.8rem' }} />\n        }\n    }\n\n    const renderMoreInfo = (data) => {\n        const { status, fileName, fileHash } = data\n        const moreInfoContent = {\n            status,\n            fileName,\n            fileHash,\n        }\n        return (\n            <IconButton onClick={() => handleMoreInfoOpen(moreInfoContent)} size=\"large\">\n                <SearchIcon />\n            </IconButton>\n        )\n    }\n\n    return (\n        <Modal open={modalOpen} onClose={handleVerifyListModalClose}>\n            <Box\n                sx={{\n                    backgroundColor: 'background.main',\n                    position: 'absolute',\n                    overflowY: 'auto',\n                    boxShadow: 5,\n                    p: 3,\n                    pb: 4,\n                    top: '50%',\n                    left: '50%',\n                    transform: 'translate(-50%, -50%)',\n                    width: { xs: '80%', lg: '70%' },\n                    maxHeight: { sm: '75%' },\n                    maxWidth: { lg: 950 },\n                }}\n            >\n                <Box mb={2} display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                    <Typography variant=\"h6\" color=\"textPrimary\" sx={{ color: 'common.white' }}>\n                        {t('Files Verify List')}\n                    </Typography>\n                    <IconButton\n                        sx={{ color: 'common.white' }}\n                        aria-label=\"close-modal\"\n                        onClick={handleVerifyListModalClose}\n                        size=\"large\"\n                    >\n                        <CloseIcon />\n                    </IconButton>\n                </Box>\n                {/* TODO update rwd view */}\n                <TableContainer component={Paper} sx={{ width: '100%' }}>\n                    <Table stickyHeader aria-label=\"files verify list table\">\n                        <TableHead>\n                            <TableRow id=\"files-verify-list-header-row\">\n                                <TableCell>{t('File Name')}</TableCell>\n                                <Hidden only={['xs']}>\n                                    <TableCell>{t('File Hash')}</TableCell>\n                                </Hidden>\n                                <TableCell align=\"center\">{t('Status')}</TableCell>\n                                <TableCell align=\"center\">{t('More Info')}</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {verifyFileDetailList.length > 0 &&\n                                verifyFileDetailList.map((data, index) => {\n                                    return (\n                                        <TableRow\n                                            key={`file-verify-result-row-${index}`}\n                                            id={`file-verify-result-row-${index}`}\n                                        >\n                                            <TableCell>\n                                                <Tooltip title={data.fileName} placement=\"bottom-end\">\n                                                    <Box component=\"div\" textOverflow=\"ellipsis\" overflow=\"hidden\">\n                                                        {data.fileName}\n                                                    </Box>\n                                                </Tooltip>\n                                            </TableCell>\n                                            <Hidden only={['xs']}>\n                                                <TableCell>\n                                                    <Tooltip title={data.fileHash} placement=\"bottom-end\">\n                                                        <Box component=\"div\" textOverflow=\"ellipsis\" overflow=\"hidden\">\n                                                            {data.fileHash}\n                                                        </Box>\n                                                    </Tooltip>\n                                                </TableCell>\n                                            </Hidden>\n                                            <TableCell align=\"center\">\n                                                <Box display=\"flex\" justifyContent=\"center\">\n                                                    {renderResult(data.status)}\n                                                </Box>\n                                            </TableCell>\n                                            <TableCell align=\"center\">{renderMoreInfo(data)}</TableCell>\n                                        </TableRow>\n                                    )\n                                })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Box>\n        </Modal>\n    )\n}\n\nFilesVerifyListModal.propTypes = {\n    verifyFileDetailList: PropTypes.array.isRequired,\n    modalOpen: PropTypes.bool.isRequired,\n    handleVerifyListModalClose: PropTypes.func.isRequired,\n    handleMoreInfoOpen: PropTypes.func.isRequired,\n}\n\nexport default FilesVerifyListModal\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useTranslation } from 'react-i18next'\nimport {\n    Box,\n    IconButton,\n    Modal,\n    Paper,\n    Table,\n    TableCell,\n    TableContainer,\n    TableRow,\n    Tooltip,\n    Typography,\n    TableBody,\n    Hidden,\n    List,\n    ListItem,\n} from '@mui/material'\nimport CheckIcon from '@mui/icons-material/Check'\nimport CloseIcon from '@mui/icons-material/Close'\nimport HelpIcon from '@mui/icons-material/Help'\nimport PriorityHighIcon from '@mui/icons-material/PriorityHigh'\nimport CloseRoundedIcon from '@mui/icons-material/CloseRounded'\nimport theme from '../../../theme/Theme'\n\nconst listItem = {\n    borderBottom: `1px solid ${theme.palette.grey[300]}`,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n}\n\nconst SingleFileMoreInfoModal = ({ open, onClose, content }) => {\n    const { t } = useTranslation()\n    console.log('SingleFileMoreInfoModal', content)\n\n    const renderVerifyFileContentResult = (status) => {\n        console.log('status: ', status)\n        if (status === 'OK') {\n            return <CheckIcon sx={{ color: 'success.main', mr: 1 }} />\n        } else if (status === 'NOT_IN_PROOF') {\n            return <HelpIcon fontSize=\"small\" sx={{ color: 'warning.light', mr: 1 }} />\n        } else if (status === 'MISSING_DATA_TO_VERIFY') {\n            return <PriorityHighIcon fontSize=\"small\" sx={{ color: 'warning.main', mr: 1 }} />\n        } else {\n            return <CloseIcon sx={{ color: 'error.main' }} />\n        }\n    }\n\n    const renderVerifyFileNameResult = (status) => {\n        if (status === 'NOT_IN_PROOF') {\n            return <HelpIcon fontSize=\"small\" sx={{ color: 'warning.light', mr: 1 }} />\n        } else if (status === 'MISSING_DATA_TO_VERIFY') {\n            return <PriorityHighIcon fontSize=\"small\" sx={{ color: 'warning.main', mr: 1 }} />\n        } else {\n            // file name is key, so it will always be correct when it's found in proof\n            return <CheckIcon sx={{ color: 'success.main', mr: 1 }} />\n        }\n    }\n\n    const renderVerifyResultText = (status) => {\n        if (status === 'OK') {\n            return t('File verify success')\n        } else if (status === 'MISSING_DATA_TO_VERIFY') {\n            return t('Missing data to verify')\n        } else if (status === 'NOT_IN_PROOF') {\n            return t('No corresponding proof found')\n        } else {\n            return t('File had been modified')\n        }\n    }\n\n    return (\n        <Modal open={open} onClose={onClose}>\n            <Box\n                sx={{\n                    top: '50%',\n                    left: '50%',\n                    transform: 'translate(-50%, -50%)',\n                    backgroundColor: 'background.main',\n                    position: 'absolute',\n                    overflowY: 'auto',\n                    boxShadow: 5,\n                    p: 3,\n                    pb: 4,\n                    width: { xs: '80%', md: '60%', lg: '50%' },\n                    maxWidth: { lg: 800 },\n                    maxHeight: { md: '75%' },\n                }}\n            >\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                    <Typography sx={{ color: 'common.white' }} variant=\"h6\" gutterBottom>\n                        {t('More Info')}\n                    </Typography>\n                    <IconButton aria-label=\"close-modal\" onClick={onClose} size=\"large\">\n                        <CloseRoundedIcon sx={{ color: 'common.white' }} />\n                    </IconButton>\n                </Box>\n                <Paper>\n                    <Hidden only={['xs']}>\n                        <TableContainer component={Paper}>\n                            <Table aria-label=\"File verify result more info table\">\n                                <TableBody>\n                                    <TableRow id=\"file-status-row\">\n                                        <TableCell sx={{ width: '15%' }}>{t('Status')}</TableCell>\n                                        <TableCell align=\"center\">\n                                            <Box display=\"flex\" alignItems=\"center\">\n                                                {renderVerifyFileContentResult(content.status)}\n                                                <Box ml={2}>{renderVerifyResultText(content.status)}</Box>\n                                            </Box>\n                                        </TableCell>\n                                    </TableRow>\n                                    <TableRow id=\"file-name-row\">\n                                        <TableCell sx={{ width: '15%' }}>{t('File Name')}</TableCell>\n                                        <TableCell sx={{ maxWidth: 500, wordBreak: 'break-all' }}>\n                                            <Box display=\"flex\" alignItems=\"center\">\n                                                {renderVerifyFileNameResult(content.status)}\n                                                <Box ml={2}>\n                                                    <Tooltip title={content.fileName} placement=\"bottom-end\">\n                                                        <Box component=\"div\" textOverflow=\"ellipsis\" overflow=\"hidden\">\n                                                            {content.fileName}\n                                                        </Box>\n                                                    </Tooltip>\n                                                </Box>\n                                            </Box>\n                                        </TableCell>\n                                    </TableRow>\n                                    <TableRow id=\"file-hash-row\">\n                                        <TableCell sx={{ width: '15%' }}>{t('File Hash')}</TableCell>\n                                        <TableCell sx={{ maxWidth: 500, wordBreak: 'break-all' }}>\n                                            <Box display=\"flex\" alignItems=\"center\">\n                                                {renderVerifyFileContentResult(content.status)}\n                                                <Box ml={2}>\n                                                    <Tooltip title={content.fileHash} placement=\"bottom-end\">\n                                                        <Box component=\"div\" textOverflow=\"ellipsis\" overflow=\"hidden\">\n                                                            {content.fileHash}\n                                                        </Box>\n                                                    </Tooltip>\n                                                </Box>\n                                            </Box>\n                                        </TableCell>\n                                    </TableRow>\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Hidden>\n                    <Hidden only={['sm', 'md', 'lg', 'xl']}>\n                        <List sx={{ backgroundColor: 'common.white', borderRadius: 2, mt: 1 }}>\n                            <ListItem sx={listItem} id=\"file-status-row\">\n                                <Typography variant=\"body2\">{t('Status')}</Typography>\n                                <Box display=\"flex\" alignItems=\"center\" sx={{ mt: 1, wordBreak: 'break-all' }}>\n                                    {renderVerifyFileContentResult(content.status)}\n                                    <Typography variant=\"body2\">{renderVerifyResultText(content.status)}</Typography>\n                                </Box>\n                            </ListItem>\n                            <ListItem sx={listItem} id=\"file-name-row\">\n                                <Typography variant=\"body2\">{t('File Name')}</Typography>\n                                <Box display=\"flex\" alignItems=\"center\" sx={{ mt: 1, wordBreak: 'break-all' }}>\n                                    {renderVerifyFileNameResult(content.status)}\n                                    <Typography variant=\"body2\">\n                                        <Tooltip title={content.fileName} placement=\"bottom-end\">\n                                            <Box component=\"div\" textOverflow=\"ellipsis\" overflow=\"hidden\">\n                                                {content.fileName}\n                                            </Box>\n                                        </Tooltip>\n                                    </Typography>\n                                </Box>\n                            </ListItem>\n                            <ListItem\n                                sx={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}\n                                id=\"file-hash-row\"\n                            >\n                                <Typography variant=\"body2\">{t('File Hash')}</Typography>\n                                <Box display=\"flex\" alignItems=\"center\" sx={{ mt: 1, wordBreak: 'break-all' }}>\n                                    {renderVerifyFileContentResult(content.status)}\n                                    <Typography variant=\"body2\">\n                                        <Tooltip title={content.fileHash} placement=\"bottom-end\">\n                                            <Box component=\"div\" textOverflow=\"ellipsis\" overflow=\"hidden\">\n                                                {content.fileHash}\n                                            </Box>\n                                        </Tooltip>\n                                    </Typography>\n                                </Box>\n                            </ListItem>\n                        </List>\n                    </Hidden>\n                </Paper>\n            </Box>\n        </Modal>\n    )\n}\n\nSingleFileMoreInfoModal.propTypes = {\n    open: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n    content: PropTypes.object.isRequired,\n}\n\nexport default SingleFileMoreInfoModal\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTranslation } from 'react-i18next'\nimport {\n    Box,\n    Paper,\n    Table,\n    TableCell,\n    TableContainer,\n    TableRow,\n    Tooltip,\n    Typography,\n    TableBody,\n    Hidden,\n    IconButton,\n    Collapse,\n    Button,\n} from '@mui/material'\nimport HelpIcon from '@mui/icons-material/Help'\nimport CheckIcon from '@mui/icons-material/Check'\nimport CloseIcon from '@mui/icons-material/Close'\nimport PriorityHighIcon from '@mui/icons-material/PriorityHigh'\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\nimport { renderTime, getContractAddressUrl } from '../../../util/stringUtil'\nimport FilesVerifyListModal from './FilesVerifyListModal'\nimport SingleFileMoreInfoModal from './SingleFileMoreInfoModal'\n\nconst titleCell = { minWidth: '20%' }\nconst contentCell = { wordBreak: 'break-all', mt: { xs: 1, sm: 0 } }\n\nconst FilesVerifyDetailTable = ({ detailData }) => {\n    const { t } = useTranslation()\n    const [detailExpand, setDetailExpand] = useState(true)\n    const [modalOpen, setModalOpen] = useState(false)\n    const [moreInfoContent, setMoreInfoContent] = useState({})\n    const [moreInfoOpen, setMoreInfoOpen] = useState(false)\n    const contractAddressUrl = getContractAddressUrl(detailData.evmEnv, detailData.contractAddress)\n\n    const renderResult = (result) => {\n        if (result === 'PASS') {\n            return (\n                <Box display=\"flex\" alignItems=\"center\" sx={contentCell}>\n                    <CheckIcon sx={{ color: 'success.main' }} />\n                    <Typography variant=\"body2\" sx={{ ml: 1 }}>\n                        {t('Success')}\n                    </Typography>\n                </Box>\n            )\n        } else if (result === 'PROOF_ERROR') {\n            return (\n                <Box display=\"flex\" alignItems=\"center\" sx={contentCell}>\n                    <PriorityHighIcon sx={{ color: 'warning.main' }} />\n                    <Typography variant=\"body2\" sx={{ ml: 1 }}>\n                        {t('Proof Error')}\n                    </Typography>\n                </Box>\n            )\n        } else if (result === 'FAIL') {\n            return (\n                <Box display=\"flex\" alignItems=\"center\" sx={contentCell}>\n                    <CloseIcon sx={{ color: 'error.main' }} />\n                    <Typography variant=\"body2\" sx={{ ml: 1 }}>\n                        {t('Fail')}\n                    </Typography>\n                </Box>\n            )\n        } else {\n            return false\n        }\n    }\n\n    const handleVerifyListModalOpen = () => {\n        setModalOpen(true)\n    }\n\n    const handleVerifyListModalClose = () => {\n        setModalOpen(false)\n    }\n\n    const handleMoreInfoOpen = (moreInfoContent) => {\n        setMoreInfoContent(moreInfoContent)\n        setMoreInfoOpen(true)\n    }\n\n    const handleMoreInfoClose = () => {\n        setMoreInfoOpen(false)\n    }\n\n    return (\n        <>\n            <Box mt={3} mb={2} display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                <Box display=\"flex\" alignItems=\"center\">\n                    <Typography variant=\"h6\" color=\"textPrimary\" sx={{ color: 'common.white' }}>\n                        {t('multiple Files Verify Detail')}\n                    </Typography>\n                    <IconButton\n                        size=\"small\"\n                        sx={{ color: 'common.white' }}\n                        aria-label=\"expand-list\"\n                        onClick={() => setDetailExpand((prev) => !prev)}\n                    >\n                        {detailExpand ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n                    </IconButton>\n                </Box>\n            </Box>\n            <Collapse data-testid=\"list-collapse\" in={detailExpand} timeout=\"auto\" unmountOnExit>\n                <TableContainer component={Paper} sx={{ width: '100%' }}>\n                    <Table\n                        id=\"files-verification-detail-table\"\n                        stickyHeader\n                        aria-label=\"files verify detail overall info table\"\n                    >\n                        <TableBody>\n                            <Hidden only={['xs']}>\n                                <TableRow id=\"proof-file-name-row\">\n                                    <TableCell align=\"left\" sx={titleCell}>\n                                        {t('Off-chain Proof')}\n                                    </TableCell>\n                                    <TableCell align=\"left\" sx={contentCell}>\n                                        {detailData.proofFileName}\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow id=\"upload-time-row\">\n                                    <TableCell align=\"left\" sx={titleCell}>\n                                        {t('Upload Time')}\n                                    </TableCell>\n                                    <TableCell align=\"left\" sx={contentCell}>\n                                        {renderTime(detailData.uploadTimestamp)}\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow id=\"contract-address-row\">\n                                    <TableCell align=\"left\" sx={titleCell}>\n                                        {t('Contract Address')}\n                                    </TableCell>\n                                    <TableCell align=\"left\" sx={contentCell}>\n                                        {detailData.contractAddress !== null && detailData.contractAddress !== '' ? (\n                                            <Box display=\"flex\" alignItems=\"center\">\n                                                <Typography\n                                                    component=\"a\"\n                                                    variant=\"body2\"\n                                                    href={contractAddressUrl}\n                                                    target=\"_blank\"\n                                                    rel=\"noopener noreferrer\"\n                                                    sx={{ color: 'primary.main', textDecoration: 'none' }}\n                                                >\n                                                    {detailData.contractAddress}\n                                                </Typography>\n                                                <Tooltip\n                                                    title={t('proof.verification.detail.help_contract_address')}\n                                                    placement=\"right\"\n                                                    aria-label=\"contract address explanation tooltip\"\n                                                >\n                                                    <HelpIcon fontSize=\"small\" color=\"primary\" sx={{ ml: 1 }} />\n                                                </Tooltip>\n                                            </Box>\n                                        ) : (\n                                            <Typography variant=\"body2\">N/A</Typography>\n                                        )}\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow id=\"root-folder-name-row\">\n                                    <TableCell align=\"left\" sx={titleCell}>\n                                        {t('Root Folder Name')}\n                                    </TableCell>\n                                    <TableCell align=\"left\" sx={contentCell}>\n                                        {detailData.rootFolderName}\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow id=\"file-status-row\">\n                                    <TableCell align=\"left\" sx={titleCell}>\n                                        {t('File Status')}\n                                    </TableCell>\n                                    <TableCell align=\"left\" sx={contentCell}>{`${t('Total')}:${\n                                        detailData.verifyFileTotalCount\n                                    }, ${t('Pass')}:${detailData.verifyFileSuccessCount}, ${t('Modified')}:${\n                                        detailData.verifyFileModifiedCount\n                                    }, ${t('Added')}:${detailData.verifyFileAddedCount}, ${t('Missing')}:${\n                                        detailData.verifyFileMissingCount\n                                    }`}</TableCell>\n                                </TableRow>\n                                <TableRow id=\"verify-result-row\">\n                                    <TableCell align=\"left\" sx={titleCell}>\n                                        {t('Verify Result')}\n                                    </TableCell>\n                                    <TableCell align=\"left\" sx={contentCell}>\n                                        {renderResult(detailData.fileVerifyResult)}\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow id=\"blockchain-verify-list-row\">\n                                    <TableCell align=\"left\" sx={titleCell}>\n                                        {t('Files Verify List')}\n                                    </TableCell>\n                                    <TableCell align=\"left\" sx={contentCell}>\n                                        <Box display=\"flex\" alignItems=\"center\">\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                size=\"small\"\n                                                onClick={handleVerifyListModalOpen}\n                                            >\n                                                {t('View')}\n                                            </Button>\n                                        </Box>\n                                    </TableCell>\n                                </TableRow>\n                            </Hidden>\n                            <Hidden only={['sm', 'md', 'lg', 'xl']}>\n                                <TableRow id=\"proof-file-name-row\">\n                                    <TableCell>\n                                        <Typography variant=\"body2\">{t('Off-chain Proof')}</Typography>\n                                        <Typography variant=\"body2\" sx={contentCell}>\n                                            {detailData.proofFileName}\n                                        </Typography>\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow id=\"upload-time-row\">\n                                    <TableCell>\n                                        <Typography variant=\"body2\">{t('Upload Time')}</Typography>\n                                        <Typography variant=\"body2\" sx={contentCell}>\n                                            {renderTime(detailData.uploadTimestamp)}\n                                        </Typography>\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow id=\"contract-address-row\">\n                                    <TableCell>\n                                        <Typography variant=\"body2\">{t('Contract Address')}</Typography>\n                                        {detailData.contractAddress !== null && detailData.contractAddress !== '' ? (\n                                            <Box display=\"flex\" alignItems=\"center\" sx={contentCell}>\n                                                <Typography\n                                                    component=\"a\"\n                                                    variant=\"body2\"\n                                                    href={contractAddressUrl}\n                                                    target=\"_blank\"\n                                                    rel=\"noopener noreferrer\"\n                                                    sx={{ color: 'primary.main', textDecoration: 'none' }}\n                                                >\n                                                    {detailData.contractAddress}\n                                                </Typography>\n                                                <Tooltip\n                                                    title={t('proof.verification.detail.help_contract_address')}\n                                                    placement=\"right\"\n                                                    aria-label=\"contract address explanation tooltip\"\n                                                >\n                                                    <HelpIcon fontSize=\"small\" color=\"primary\" sx={{ ml: 1 }} />\n                                                </Tooltip>\n                                            </Box>\n                                        ) : (\n                                            <Typography variant=\"body2\" sx={contentCell}>\n                                                N/A\n                                            </Typography>\n                                        )}\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow id=\"root-folder-name-row\">\n                                    <TableCell>\n                                        <Typography variant=\"body2\">{t('Root Folder Name')}</Typography>\n                                        <Typography variant=\"body2\" sx={contentCell}>\n                                            {detailData.rootFolderName}\n                                        </Typography>\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow id=\"file-status-row\">\n                                    <TableCell>\n                                        <Typography variant=\"body2\">{t('File Status')}</Typography>\n                                        <Typography variant=\"body2\" sx={contentCell}>\n                                            {`${t('Total')}:${detailData.verifyFileTotalCount}, ${t('Pass')}:${\n                                                detailData.verifyFileSuccessCount\n                                            }, ${t('Modified')}:${detailData.verifyFileModifiedCount}, ${t('Added')}:${\n                                                detailData.verifyFileAddedCount\n                                            }, ${t('Missing')}:${detailData.verifyFileMissingCount}`}\n                                        </Typography>\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow id=\"verify-result-row\">\n                                    <TableCell>\n                                        <Typography variant=\"body2\">{t('Verify Result')}</Typography>\n                                        {renderResult(detailData.fileVerifyResult)}\n                                    </TableCell>\n                                </TableRow>\n\n                                <TableRow id=\"blockchain-verify-list-row\">\n                                    <TableCell>\n                                        <Typography variant=\"body2\">{t('Files Verify List')}</Typography>\n                                        <Box display=\"flex\" alignItems=\"center\" sx={contentCell}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                size=\"small\"\n                                                onClick={handleVerifyListModalOpen}\n                                            >\n                                                {t('View')}\n                                            </Button>\n                                        </Box>\n                                    </TableCell>\n                                </TableRow>\n                            </Hidden>\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Collapse>\n            <FilesVerifyListModal\n                verifyFileDetailList={detailData.verifyFileNameAndHashDetailList}\n                modalOpen={modalOpen}\n                handleVerifyListModalClose={handleVerifyListModalClose}\n                handleMoreInfoOpen={handleMoreInfoOpen}\n            />\n            <SingleFileMoreInfoModal open={moreInfoOpen} onClose={handleMoreInfoClose} content={moreInfoContent} />\n        </>\n    )\n}\n\nFilesVerifyDetailTable.propTypes = {\n    detailData: PropTypes.object.isRequired,\n}\n\nexport default FilesVerifyDetailTable\n","import React, { useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useMediaQuery, Backdrop, Box, Typography, CircularProgress } from '@mui/material'\nimport UploadSection from './UploadSection/UploadSection'\nimport VerifyDetailTable from '../ProofVerification/VerifyDetailTable'\nimport FilesVerifyDetailTable from './FilesVerifyDetailTable'\nimport theme from '../../../theme/Theme'\n\nconst FileSetVerificationPage = () => {\n    const { t } = useTranslation()\n    const matches = useMediaQuery((theme) => theme.breakpoints.down('sm'))\n    const [inProgress, setInProgress] = useState(false)\n    const [detailData, setDetailData] = useState(null)\n\n    const handleInProgress = () => {\n        setInProgress(true)\n    }\n\n    const handleProgressDone = () => {\n        setInProgress(false)\n    }\n\n    const handleDetailDataChange = (data) => {\n        setDetailData(data)\n    }\n\n    return (\n        <>\n            <Typography variant={matches ? 'h5' : 'h4'} sx={{ color: 'common.white' }}>\n                {t('File Set Verification')}\n            </Typography>\n            <Box mt={2}>\n                <UploadSection\n                    handleDetailDataChange={handleDetailDataChange}\n                    handleInProgress={handleInProgress}\n                    handleProgressDone={handleProgressDone}\n                />\n                {detailData && (\n                    <Box mt={4}>\n                        <VerifyDetailTable detailData={detailData} />\n                        <FilesVerifyDetailTable detailData={detailData} />\n                    </Box>\n                )}\n            </Box>\n            <Backdrop open={inProgress} sx={{ zIndex: theme.zIndex.drawer + 1, color: 'common.white' }}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n        </>\n    )\n}\n\nexport default FileSetVerificationPage\n","import React, { useEffect } from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { SnackbarProvider } from 'notistack'\nimport Cookies from 'universal-cookie'\nimport { useTranslation } from 'react-i18next'\nimport { ThemeProvider, StyledEngineProvider } from '@mui/material/styles'\nimport { useMediaQuery, Toolbar, Box } from '@mui/material'\nimport Navbar from './navbar/Navbar'\nimport Sidebar from './sidebar/Sidebar'\nimport HomePage from './page/HomePage'\nimport ProofVerificationPage from './page/ProofVerification/ProofVerificationPage'\nimport RawDataVerificationPage from './page/RawDataVerification/RawDataVerificationPage'\nimport FileSetVerificationPage from './page/FileSetVerification/FileSetVerificationPage'\nimport theme from '../theme/Theme'\n\nconst App = () => {\n    const { i18n } = useTranslation()\n    const cookies = new Cookies()\n    const isBiggerView = useMediaQuery(theme.breakpoints.up('sm'))\n\n    useEffect(() => {\n        if (cookies.get('language') === '中文') {\n            i18n.changeLanguage('zh-TW')\n        } else {\n            cookies.set('language', 'English', { path: '/' })\n            i18n.changeLanguage('en')\n        }\n    }, [])\n\n    const productionPath = process.env.REACT_APP_BASE_WEB_PATH\n\n    return (\n        <Box sx={{ display: { sm: 'flex' } }}>\n            <StyledEngineProvider injectFirst>\n                <ThemeProvider theme={theme}>\n                    <SnackbarProvider\n                        maxSnack={3}\n                        anchorOrigin={{\n                            vertical: isBiggerView ? 'top' : 'bottom',\n                            horizontal: 'center',\n                        }}\n                    >\n                        <Router basename={productionPath}>\n                            <Navbar />\n                            <Sidebar />\n                            <Box sx={{ flexGrow: 1, p: { xs: 3, md: 4 }, pt: 3 }}>\n                                <Toolbar />\n                                <Switch>\n                                    <Route path=\"/proofVerification\">\n                                        <ProofVerificationPage />\n                                    </Route>\n                                    <Route path=\"/rawDataVerification\">\n                                        <RawDataVerificationPage />\n                                    </Route>\n                                    <Route path=\"/fileSetVerification\">\n                                        <FileSetVerificationPage />\n                                    </Route>\n                                    <Route path=\"/\">\n                                        <HomePage />\n                                    </Route>\n                                </Switch>\n                            </Box>\n                        </Router>\n                    </SnackbarProvider>\n                </ThemeProvider>\n            </StyledEngineProvider>\n        </Box>\n    )\n}\n\nexport default App\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry)\n            getFID(onPerfEntry)\n            getFCP(onPerfEntry)\n            getLCP(onPerfEntry)\n            getTTFB(onPerfEntry)\n        })\n    }\n}\n\nexport default reportWebVitals\n","import i18n from 'i18next'\nimport LanguageDetector from 'i18next-browser-languagedetector'\nimport { initReactI18next } from 'react-i18next'\nimport tw from './zh-TW.json'\nimport en from './en.json'\n\ni18n.use(LanguageDetector)\n    .use(initReactI18next)\n    .init({\n        resources: {\n            en: {\n                translations: en,\n            },\n            'zh-TW': {\n                translations: tw,\n            },\n        },\n        lng: 'zh-TW',\n        fallbackLng: 'zh-TW',\n        debug: true,\n\n        // have a common namespace used around the full app\n        ns: ['translations'],\n        defaultNS: 'translations',\n\n        keySeparator: false, // we use content as keys\n\n        interpolation: {\n            escapeValue: false,\n        },\n    })\n\nexport default i18n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './css/index.css'\nimport App from './component/App'\nimport reportWebVitals from './reportWebVitals'\nimport './i18n/i18n'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}